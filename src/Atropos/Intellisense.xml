<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atropos</name>
    </assembly>
    <members>
        <member name="T:Atropos.FullCheck">
            <summary>
              A class that exposes <see langword="static"/> evaluation methods for checking user-defined equality and
              ordering APIs.
            </summary>
            <remarks>
              <para>
                The purpose of the <see cref="T:Atropos.FullCheck"/> class is to provide a simple interface by which to evaluate the
                full slate of API methods that describe equality and ordering for custom types. These functions are
                generally expected to be internally consistent, but it can be tedious to manually evaluate each one
                individually. This is exacerbated by the optionality of most elements of the API and the relative
                difficulty of discovering their presence for an arbitrary type. The functions exposed by
                <see cref="T:Atropos.FullCheck"/> allow unit tests to succinctly express their intents without being concerned as to
                the actual methods that are physically invoked.
              </para>
              <para>
                When evaluating equality, <see cref="T:Atropos.FullCheck"/> tests the most appropriate overload of any
                <see langword="static"/> binary equality operators, the inherited <see cref="M:System.Object.Equals(System.Object)"/>
                method, and any strongly typed <c>Equals(T?)</c> methods brought in via <see cref="T:System.IEquatable`1"/>.
                Furthermore, if equality is expected, the <see cref="M:System.Object.GetHashCode"/> method is evaluated as well.
                Appropriate symmetry is assumed: i.e. if testing that <c>A</c> is equal to <c>B</c>,
                <see cref="T:Atropos.FullCheck"/> will also test that <c>B</c> is equal to <c>A</c>.
              </para>
              <para>
                When evaluating ordering, <see cref="T:Atropos.FullCheck"/> tests the most appropriate overload of any
                <see langword="static"/> binary ordering operators and any strongly typed <c>CompareTo(T?)</c> methods
                brought in via <see cref="T:System.IComparable`1"/>. Note that neither <c>operator==</c> nor <c>operator!=</c> is
                evaluated for ordering, as <i>equivalence</i> and <i>equality</i> are treated separately. Appropriate
                symmetry is also assumed: i.e. if testing that <c>A</c> is strictly less than <c>B</c>,
                <see cref="T:Atropos.FullCheck"/> will also test that <c>B</c> is strictly greater than <c>A</c>.
              </para>
              <para>
                <see cref="T:Atropos.FullCheck"/> is intended as a utility for unit testing but is not tied to any particular unit
                testing framework or paradigm. To support the client's choice of testing platform, all of the APIs exposed
                by <see cref="T:Atropos.FullCheck"/> return an optional <see cref="T:System.String"/> denoting the result of the evaluation.
                If the evaluation succeeds (i.e. the test passes), the optional will be a <c>NONE</c> instance. If, on the
                other hand, the evaluation fails (i.e. the test fails), the optional will be a <c>SOME</c> instance that
                contains the failed expression. This allows users to build thin adapters on top of the methods to handle
                failure appropriately, including a useful error message if so desired.
              </para>
            </remarks>
        </member>
        <member name="M:Atropos.FullCheck.ExpectLessThan``1(``0,``0)">
            <summary>
              Determines if the full ordering API exposed by a type indicates that one instance of that type is
              strictly less than another instance.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/> is
              not strictly less than <paramref name="rhs"/> if such an expression exists; otherwise, a <c>NONE</c>
              instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.ExpectEquivalent``1(``0,``0)">
            <summary>
              Determines if the full ordering API exposed by a type indicates that one instance of that type is
              equivalent to another instance.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/> is
              not equivalent to <paramref name="rhs"/> if such an expression exists; otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.ExpectGreaterThan``1(``0,``0)">
            <summary>
              Determines if the full ordering API exposed by a type indicates that one instance of that type is
              strictly greater than another instance.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/> is
              not strictly greater than <paramref name="rhs"/> if such an expression exists; otherwise, a <c>NONE</c>
              instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.ExpectIncomparable``1(``0,``0)">
            <summary>
              Determines if the full ordering API exposed by a type indicates that one instance of that type is
              incomparable to (i.e. neither strictly less than nor equivalent to nor strictly greater than) another
              instance.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/> is
              not incomparable to <paramref name="rhs"/> if such an expression exists; otherwise, a <c>NONE</c>
              instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.TestOrdering``1(``0,``0,System.Nullable{System.Int32})">
            <summary>
              Evaluates the ordering relation between two instancs of a type using the full ordering API of that type.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <param name="trichotomy">
              A negative integer if <paramref name="lhs"/> is expected to be strictly less than <paramref name="rhs"/>,
              <c>0</c> if <paramref name="lhs"/> is expected to be equivalent to <paramref name="rhs"/>, a positive
              integer if <paramref name="lhs"/> is expected to be strictly greater than <paramref name="rhs"/>, and
              <see langword="null"/> if <paramref name="lhs"/> is expected to be incomparable to
              <paramref name="rhs"/>.
            </param>
            <returns>
              If the ordering relation between <paramref name="lhs"/> and <paramref name="rhs"/> is not the same as
              that indicated by <paramref name="trichotomy"/>, a <c>SOME</c> instance whose value is the expression
              that exposed the failed ordering. Otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.ExpectEqual``1(``0,``0)">
            <summary>
              Determines if the full equality API exposed by a type indicates that two instances of that type are
              equal.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/>
              and <paramref name="rhs"/> are not equal if such an expression exists; otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.ExpectNotEqual``1(``0,``0)">
            <summary>
              Determines if the full equality API exposed by a type indicates that two instances of that type are not
              equal.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <returns>
              A <c>SOME</c> instance with the expression that, when evaluated, indicates that <paramref name="lhs"/>
              and <paramref name="rhs"/> are equal if such an expression exists; otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.TestEquality``1(``0,``0,System.Boolean)">
            <summary>
              Evaluates the equality relation between two instancs of a type using the full ordering API of that type.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <param name="expectedEqual">
              Whether or not <paramref name="lhs"/> and <paramref name="rhs"/> are expected to be equal.
            </param>
            <returns>
              If the equality relation between <paramref name="lhs"/> and <paramref name="rhs"/>, is not the same as
              that indicated by <paramref name="expectedEqual"/>, a <c>SOME</c> instance whose value is the expression
              that exposed the failed equality relation. Otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.GetOperator``1(Atropos.FullCheck.Operator,System.Boolean)">
            <summary>
              Looks up a binary operator function for a particular <see cref="T:System.Type"/>. The result is a generalized form
              of a binary operator that can be invoked, producing a default fallback if the target <see cref="T:System.Type"/>
              does not actually support the specified operator.
            </summary>
            <typeparam name="T">
              [explicit] The <see cref="T:System.Type"/> on which to look up the binary operator.
            </typeparam>
            <param name="op">
              The binary operator functino to look up.
            </param>
            <param name="fallback">
              The fallback result, in the event that <typeparamref name="T"/> does not support binary operator
              <paramref name="op"/>.
            </param>
            <pre>
              <paramref name="op"/> is valid.
            </pre>
            <returns>
              A function that can be invoked on two instances of <typeparamref name="T"/> and either returns the result
              of evaluating <paramref name="op"/> on those two instances (if <typeparamref name="T"/> supports the
              binary operator) or returns <paramref name="fallback"/> (otherwise).
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.#cctor">
            <summary>
              Initializes the <see langword="static"/> state of the <see cref="T:Atropos.FullCheck"/> class.
            </summary>
        </member>
        <member name="M:Atropos.FullCheck.GetBasesOf(System.Type)">
            <summary>
              Produces a list of interfaces and base types of a particular <see cref="T:System.Type"/>, including that
              <see cref="T:System.Type"/> itself.
            </summary>
            <param name="type">
              The target <see cref="T:System.Type"/>.
            </param>
            <pre>
              <paramref name="type"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A list consisting of <paramref name="type"/>, all interfaces implemented by <paramref name="type"/>, and
              all base classes of <paramref name="type"/>. The order of elements in the list is undefined.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.EvaluateIEquatable``1(``0,``0,System.Boolean)">
            <summary>
              Symmetrially evaluates the <c>IEquatable&lt;T&gt;.Equals(T?)</c> method for two arguments if the type of
              those arguments implements the <see cref="T:System.IEquatable`1"/> interface.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <param name="expectedEqual">
              Whether or not <paramref name="lhs"/> and <paramref name="rhs"/> are expected to be equal.
            </param>
            <returns>
              If the equality relation between <paramref name="lhs"/> and <paramref name="rhs"/>, is not the same as
              that indicated by <paramref name="expectedEqual"/>, a <c>SOME</c> instance whose value is the expression
              that exposed the failed equality relation. Otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="M:Atropos.FullCheck.EvaluateIComparable``1(``0,``0,System.Nullable{System.Int32})">
            <summary>
              Symmetrically evaluates the <c>IComparable&lt;T&gt;.CompareTo(T?)</c> method for two arguments if the
              type of those arguments implements the <see cref="T:System.IComparable`1"/> interface.
            </summary>
            <typeparam name="T">
              [deduced] The type of the arguments.
            </typeparam>
            <param name="lhs">
              The first of the two arguments.
            </param>
            <param name="rhs">
              The second of the two arguments.
            </param>
            <param name="trichotomy">
              A negative integer if <paramref name="lhs"/> is expected to be strictly less than <paramref name="rhs"/>,
              <c>0</c> if <paramref name="lhs"/> is expected to be equivalent to <paramref name="rhs"/>, a positive
              integer if <paramref name="lhs"/> is expected to be strictly greater than <paramref name="rhs"/>, and
              <see langword="null"/> if <paramref name="lhs"/> is expected to be incomparable to
              <paramref name="rhs"/>.
            </param>
            <returns>
              If the ordering relation between <paramref name="lhs"/> and <paramref name="rhs"/> is not the same as
              that indicated by <paramref name="trichotomy"/>, a <c>SOME</c> instance whose value is the expression
              that exposed the failed ordering. Otherwise, a <c>NONE</c> instance.
            </returns>
        </member>
        <member name="T:Atropos.Moq.CallSequence`1">
            <summary>
              A utility for ensuring that calls made through a <see cref="T:Moq.Mock`1"/> occur in a specific order.
            </summary>
            <remarks>
              <para>
                A common need when unit testing complex components is to ensure that a series of calls to the system under
                test occur in a particular order. While the <see href="https://github.com/Moq">Moq</see> library provides
                many powerful facilities for mocking objects and evaluating the ensuring behavior, the library is lacking
                when it comes to evaluating call sequences. <see cref="T:Atropos.Moq.CallSequence`1"/> fills this gap, interoperating
                with the <see cref="T:Moq.Mock`1"/> hierarchy seamlessly to provide a fluent way to expect a speific order of
                invocations.
              </para>
              <para>
                A <see cref="T:Atropos.Moq.CallSequence`1"/> begins empty, i.e. with no expectations, and can be augmented one expected
                call at a time. Any expected call that can be set-up via <see cref="T:Moq.Mock`1"/> can be added to a
                <see cref="T:Atropos.Moq.CallSequence`1"/>. <see cref="T:Atropos.Moq.CallSequence`1"/> imposes a custom callback that verifies the
                calls are made in the correct order. For this reason, however, it is not possible to add an additional
                user-defined callback that is invoked after the order-check passes. This feature is under consideration as
                a future extension of the library. If a call is made out-of-order, an exception is raised with robust
                information regarding the expectation of the <see cref="T:Atropos.Moq.CallSequence`1"/> versus reality.
              </para>
              <para>
                A <see cref="T:Atropos.Moq.CallSequence`1"/> necessarily imposes an immutable strict total order. This means that an
                expectated call cannot be reordered or removed once added, and that every expected call must occur either
                before or after each other expectation. For example, it is not possible to expect that both call <c>A</c>
                and <c>B</c> occur, in any order, before call <c>C</c>. It is, however, possible to expect repeated calls,
                either sequentially (e.g. <c>A</c>, <c>A</c>, <c>B</c>) or non-sequentially  (e.g. <c>A</c>, <c>B</c>,
                <c>A</c>). There are limitations to repeat call suppport, as detailed below.
              </para>
              <para>
                A <see cref="T:Atropos.Moq.CallSequence`1"/> is in one of three states at any given time: unstarted, incomplete, or
                complete. A <see cref="T:Atropos.Moq.CallSequence`1"/> can be extended in any state, adding an additional expected call
                to the end; specifically, adding an expected call to an incomplete sequence does not set the expectation of
                the next call. A <see cref="T:Atropos.Moq.CallSequence`1"/> is complete when all expected calls have been made; one can
                verify that a <see cref="T:Atropos.Moq.CallSequence`1"/> is complete using a
                <see cref="M:Atropos.Moq.CallSequence`1.VerifyCompleted">dedicated API</see>, which will throw an exception in the adverse case. An
                empty <see cref="T:Atropos.Moq.CallSequence`1"/> (i.e. one without any expected calls) is always considered complete.
              </para>
              <para>
                Calls can be made to the <see cref="T:Moq.Mock`1"/> that backs a <see cref="T:Atropos.Moq.CallSequence`1"/> that are not
                directly expected by the sequence. The strict total order imposed on the calls by a sequence does not
                preclude other calls; to verify that no other calls are made, use a combination of the
                <see cref="M:Atropos.Moq.CallSequence`1.VerifyCompleted"/> method on the <see cref="T:Atropos.Moq.CallSequence`1"/> and the
                <see cref="M:Moq.Mock`1.VerifyNoOtherCalls"/> method on the underlying <see cref="T:Moq.Mock`1"/>.
              </para>
              <para>
                A single <see cref="T:Moq.Mock`1"/> can underlie more than one <see cref="T:Atropos.Moq.CallSequence`1"/> as long as those
                sequences contain disjoint sets of expected calls. If an expected call appears in multiple sequences that
                are backed by the same <see cref="T:Moq.Mock`1"/>, at least one of the sequences will fail. The other major
                limitation of <see cref="T:Atropos.Moq.CallSequence`1"/> has to do with repeat expectations: to include a repeated
                expectation in a sequence, the LINQ expression with which the expectation is established must use the same
                lambda variable names. For example, <c>x => x.Foo()</c> and <c>y => y.Foo()</c>, while representing the
                same invocation, will cause a <see cref="T:Atropos.Moq.CallSequence`1"/> containing both to fail on the first
                invocation. This variable naming is case sensitive, so <c>x => x.Foo()</c> is also different than
                <c>X => X.Foo()</c>.
              </para>
            </remarks>
            <typeparam name="T">
              The type of object being mocked by the underlying <see cref="T:Moq.Mock`1"/>.
            </typeparam>
        </member>
        <member name="P:Atropos.Moq.CallSequence`1.Name">
            <summary>
              The name of this <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </summary>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.#ctor(Moq.Mock{`0})">
            <summary>
              Constructs a new, unnamed <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </summary>
            <param name="mock">
              The <see cref="T:Moq.Mock`1"/> through which to track calls.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="mock"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.#ctor(Moq.Mock{`0},System.String)">
            <summary>
              Constructs a new, named <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </summary>
            <param name="mock">
              The <see cref="T:Moq.Mock`1"/> through which to track calls.
            </param>
            <param name="name">
              The <see cref="P:Atropos.Moq.CallSequence`1.Name">name</see> of the new <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="mock"/> is <see langword="null"/>
                --or--
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.Add(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
              Adds an expected call to the end of the current call sequence. This can be used to extend a sequence that
              has not yet been started, a sequence that is in progrss, or a sequence that has already completed. Call
              expectations cannot be reordered or removed once added.
            </summary>
            <param name="expression">
              The LINQ <see cref="T:System.Linq.Expressions.Expression"/> denoting the call to be added to the end of the current call sequence.
            </param>
            <returns>
              The <see cref="T:Moq.Language.Flow.ICallbackResult"/> produced by using <paramref name="expression"/> to
              <see cref="M:Moq.Mock`1.Setup(System.Linq.Expressions.Expression{System.Action{`0}})">set-up</see> an expectation on <see cref="T:Moq.Mock`1"/>
              that backs the current <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="expression"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
              Adds an expected call to the end of the current call sequence. This can be used to extend a sequence that
              has not yet been started, a sequence that is in progrss, or a sequence that has already completed. Call
              expectations cannot be reordered or removed once added.
            </summary>
            <param name="expression">
              The LINQ <see cref="T:System.Linq.Expressions.Expression"/> denoting the call to be added to the end of the current call sequence.
            </param>
            <returns>
              The <see cref="T:Moq.Language.Flow.ICallbackResult"/> produced by using <paramref name="expression"/> to
              <see cref="M:Moq.Mock`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">set-up</see> an expectation on
              <see cref="T:Moq.Mock`1"/> that backs the current <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="expression"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.VerifyCompleted">
            <summary>
              Verifies that the current call sequence was completed through the backing <see cref="T:Moq.Mock`1"/>.
            </summary>
            <exception cref="T:Moq.MockException">
              if any call expected by this <see cref="T:Atropos.Moq.CallSequence`1"/> was not made.
            </exception>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.AddToBookkeeping(System.Linq.Expressions.Expression)">
            <summary>
              Adds a new LINQ <see cref="T:System.Linq.Expressions.Expression"/> to the internal bookkeeping of the current
              <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </summary>
            <param name="expression">
              The LINQ <see cref="T:System.Linq.Expressions.Expression"/> to bookkeep.
            </param>
            <pre>
              <paramref name="expression"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.VerifyInOrder(System.Linq.Expressions.Expression)">
            <summary>
              Verifies that the call modeled by a particular LINQ <see cref="T:System.Linq.Expressions.Expression"/> is the next call expected by
              the current <see cref="T:Atropos.Moq.CallSequence`1"/>.
            </summary>
            <param name="expression">
              The LINQ <see cref="T:System.Linq.Expressions.Expression"/>.
            </param>
            <pre>
              <paramref name="expression"/> is not <see langword="null"/>
                --and--
              a call modeled by <paramref name="expression"/> is part of the current <see cref="T:Atropos.Moq.CallSequence`1"/>,
              even if it is in the wrong order.
            </pre>
            <exception cref="T:System.Exception">
              if the current <see cref="T:Atropos.Moq.CallSequence`1"/> is completed, and therefore not expecting any additional
              calls
                --or--
              if the current <see cref="T:Atropos.Moq.CallSequence`1"/> is incomplete but the next expected call does not exactly
              match <paramref name="expression"/>.
            </exception>
        </member>
        <member name="T:Atropos.Moq.CallSequence`1.ExpressionEq">
            <summary>
              An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interface that compares LINQ
              <see cref="T:System.Linq.Expressions.Expression">expressions</see> for equality by looking at their string representations.
            </summary>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.ExpressionEq.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
              Checks if two LINQ <see cref="T:System.Linq.Expressions.Expression">expressions</see> are equal.
            </summary>
            <param name="lhs">
              The left-hand operand.
            </param>
            <param name="rhs">
              The right-hand operand.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>
            </returns>
        </member>
        <member name="M:Atropos.Moq.CallSequence`1.ExpressionEq.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
              Produces the hash code for a LINQ <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="expr">
              The LINQ <see cref="T:System.Linq.Expressions.Expression"/> to hash.
            </param>
            <returns>
              The hash code for <paramref name="expr"/>.
            </returns>
        </member>
        <member name="T:Atropos.Moq.MoqExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the <see href="https://github.com/Moq">Moq</see> library.
            </summary>
        </member>
        <member name="M:Atropos.Moq.MoqExtensions.MakeSequence``1(Moq.Mock{``0})">
            <summary>
              Creates a new, unnamed call sequence to be tracked by a <see cref="T:Moq.Mock`1"/>.
            </summary>
            <typeparam name="T">
              [deduced] The type of object on which the sequence-tracked calls are to be made.
            </typeparam>
            <param name="mock">
              The <see cref="T:Moq.Mock`1"/> with which to track the call sequence.
            </param>
            <returns>
              A new <see cref="T:Atropos.Moq.CallSequence`1"/> that can be used to track a sequence of calls made through
              <paramref name="mock"/>.
            </returns>
        </member>
        <member name="M:Atropos.Moq.MoqExtensions.MakeSequence``1(Moq.Mock{``0},System.String)">
            <summary>
              Creates a new, named call sequence to be tracked by a <see cref="T:Moq.Mock`1"/>.
            </summary>
            <typeparam name="T">
              [deduced] The type of object on which the sequence-tracked calls are to be made.
            </typeparam>
            <param name="mock">
              The <see cref="T:Moq.Mock`1"/> with which to track the call sequence.
            </param>
            <param name="name">
              The <see cref="P:Atropos.Moq.CallSequence`1.Name">name</see> of the new call sequence.
            </param>
            <returns>
              A new <see cref="T:Atropos.Moq.CallSequence`1"/> that can be used to track a sequence of calls made through
              <paramref name="mock"/>.
            </returns>
        </member>
        <member name="T:Atropos.Moq.Arg">
            <summary>
              A collection of custom Matchers that can be used to verify calls against a <see cref="T:Moq.Mock`1"/>.
            </summary>
        </member>
        <member name="M:Atropos.Moq.Arg.IsSameSequence``1(System.Collections.IEnumerable)">
            <summary>
              Produces a Matcher that returns <see langword="true"/> when the actual argument is an
              <see cref="T:System.Collections.IEnumerable"/> with the same sequence of elements as another.
            </summary>
            <typeparam name="T">
              The conrete type of <see cref="T:System.Collections.IEnumerable"/> to be operated on by the Matcher.
            </typeparam>
            <param name="expected">
              The sequence of elements.
            </param>
            <pre>
              <paramref name="expected"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A dummy instance of <typeparamref name="T"/> for syntactic compliance.
            </returns>
        </member>
        <member name="M:Atropos.Moq.Arg.IsSameSequence``1(System.Collections.IEnumerable,System.Collections.IEqualityComparer)">
            <summary>
              Produces a Matcher that returns <see langword="true"/> when the actual argument is an
              <see cref="T:System.Collections.IEnumerable"/> with the same sequence of elements as another as defined by a custom comparer.
            </summary>
            <typeparam name="T">
              The conrete type of <see cref="T:System.Collections.IEnumerable"/> to be operated on by the Matcher.
            </typeparam>
            <param name="expected">
              The sequence of elements.
            </param>
            <param name="comparer">
              The comparer with which to determine equality of elements.
            </param>
            <pre>
              <paramref name="expected"/> is not <see langword="null"/>
                --and--
              <paramref name="comparer"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A dummy instance of <typeparamref name="T"/> for syntactic compliance.
            </returns>
        </member>
    </members>
</doc>
