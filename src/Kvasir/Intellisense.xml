<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kvasir</name>
    </assembly>
    <members>
        <member name="T:Kvasir.Annotations.INestableAnnotation">
            <summary>
              The base interface to be implemented by any Kvasir annotations that expose a <c>Path</c> property for nested
              application.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.INestableAnnotation.Path">
            <summary>
              The dot-separated path, relative to the property on which the annotation is placed, to the property to
              which the annotation actually applies.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.INestableAnnotation.WithPath(System.String)">
            <summary>
              Creates an exact copy of a <see cref="T:Kvasir.Annotations.INestableAnnotation"/>, but with a different <see cref="P:Kvasir.Annotations.INestableAnnotation.Path"/>.
            </summary>
            <param name="path">
              The new <see cref="P:Kvasir.Annotations.INestableAnnotation.Path"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Annotations.INestableAnnotation"/> of the same most-derived type as <c>this</c>, whose <see cref="P:Kvasir.Annotations.INestableAnnotation.Path"/>
              attribute is exactly <paramref name="path"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Annotations.CalculatedAttribute">
            <summary>
              An annotation that marks the Field backing a particular property as "calculated."
            </summary>
            <remarks>
              <para>
                A "calculated" Field is one whose value is stored in the back-end database but not loaded therefrom on read
                operations. The value of such a Field is invariably determined by the value of one or more other Fields in
                the same Table; common examples include alphabetization keys, computed averages/percentages, deduced
                geographies, and checksums. Because the value of such a Field is not loaded, the annotated property does
                not participate in construction resolution.
              </para>
              <para>
                A <see cref="T:Kvasir.Annotations.CalculatedAttribute"/> that is applied to a property of aggregate type recursively applies to
                all properties of the aggregate. 
              </para>
            </remarks>
        </member>
        <member name="T:Kvasir.Annotations.CheckAttribute">
            <summary>
              A non-generic view of a <see cref="T:Kvasir.Annotations.CheckAttribute`1"/>.
            </summary>
            <seealso cref="T:Kvasir.Annotations.CheckAttribute`1"/>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute.ConstraintGenerator">
            <summary>
              The <see cref="T:Kvasir.Core.IConstraintGenerator"/> instance specified in the annotation.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute.UserError">
            <summary>
              The error message explaining why the <see cref="P:Kvasir.Annotations.CheckAttribute.ConstraintGenerator"/> specified in the annotation is
              invalid, for example if it throws an error during construction. (This value will be <see langword="null"/>
              if the <see cref="P:Kvasir.Annotations.CheckAttribute.ConstraintGenerator"/> is, in fact, valid.)
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute.WithPath(System.String)">
            <see cref="M:Kvasir.Annotations.INestableAnnotation.WithPath(System.String)"/>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.CheckAttribute`1">
            <summary>
              An annotation that imposes a <c>CHECK</c> constraint on the Field backing a particular property.
            </summary>
            <typeparam name="TConstraintGenerator">
              The type of <see cref="T:Kvasir.Core.IConstraintGenerator"/>.
            </typeparam>
            <seealso cref="T:Kvasir.Annotations.Check.IsNotAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsLessThanAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsLessOrEqualToAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsGreaterThanAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNonZeroAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsPositiveAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNegativeAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNonEmptyAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsAtLeastAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsAtMostAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsBetweenAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsOneOfAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNotOneOfAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.ComplexAttribute`1"/>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute`1.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute`1.ConstraintGenerator">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.CheckAttribute`1.UserError">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute`1.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.CheckAttribute`1"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute`1.#ctor(System.Object[])">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.CheckAttribute`1"/> class.
            </summary>
            <param name="args">
              The parameterization of the <c>CHECK</c> constraint.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute`1.#ctor(Kvasir.Core.IConstraintGenerator)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.CheckAttribute`1"/> class.
            </summary>
            <param name="generator">
              The already-constructed <see cref="T:Kvasir.Core.IConstraintGenerator"/> to be used to produce the <c>CHECK</c>
              constraint clause for this annotation.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.CheckAttribute`1.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check">
            <summary>
              A pseudo-namespace within which annotations in which specific, predefined constraints are defined.
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.Check.ComplexAttribute">
            <summary>
              A non-generic view of a <see cref="T:Kvasir.Annotations.Check.ComplexAttribute`1"/>.
            </summary>
            <seealso cref="T:Kvasir.Annotations.Check.ComplexAttribute`1"/>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute.FieldNames">
            <summary>
              The names of the Fields to which the <c>CHECK</c> constraint imposed by this attribute apply.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute.ConstraintGenerator">
            <summary>
              The <see cref="T:Kvasir.Core.IConstraintGenerator"/> instance specified in the annotation.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute.UserError">
            <summary>
              The error message explaining why the <see cref="P:Kvasir.Annotations.Check.ComplexAttribute.ConstraintGenerator"/> specified in the annotation is
              invalid, for example if it throws an error during construction. (This value will be
              <see langword="null"/> if the <see cref="P:Kvasir.Annotations.Check.ComplexAttribute.ConstraintGenerator"/> is, in fact, valid.)
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.Check.ComplexAttribute`1">
            <summary>
              An annotation that imposes a <c>CHECK</c> constraint on the Fields backing a particular set of property.
            </summary>
            <typeparam name="TConstraintGenerator">
              The type of <see cref="T:Kvasir.Core.IConstraintGenerator"/>.
            </typeparam>
            <seealso cref="T:Kvasir.Annotations.Check.IsNotAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsLessThanAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsLessOrEqualToAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsGreaterThanAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNonZeroAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsPositiveAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNegativeAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNonEmptyAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsAtLeastAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsAtMostAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.LengthIsBetweenAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsOneOfAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.IsNotOneOfAttribute"/>
            <seealso cref="T:Kvasir.Annotations.CheckAttribute`1"/>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute`1.FieldNames">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute`1.ConstraintGenerator">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComplexAttribute`1.UserError">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Annotations.Check.ComplexAttribute`1.#ctor(System.String[])">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.ComplexAttribute`1"/> class.
            </summary>
            <param name="fieldNames">
              The names of the backing Fields (<i>NOT</i> the C# properties) to which the <c>CHECK</c> constraint
              imposed by this annotation applies.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.ComplexAttribute`1.#ctor(System.String[],System.Object[])">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.ComplexAttribute`1"/> class.
            </summary>
            <param name="fieldNames">
              The names of the backing Fields (<i>NOT</i> the C# properties) to which the <c>CHECK</c> constraint
              imposed by this annotation applies.
            </param>
            <param name="args">
              The parameterization of the <c>CHECK</c> constraint.
            </param>
        </member>
        <member name="T:Kvasir.Annotations.Check.ComparisonAttribute">
            <summary>
              The base class for all annotations that restrict the value for the Field backing a particular property
              relative to a single anchor point.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComparisonAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComparisonAttribute.Operator">
            <summary>
              The operator of the comparison restriction.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.ComparisonAttribute.Anchor">
            <summary>
              The anchor of the comparison restriction.
            </summary>
            <remarks>
              This value is taken directly from the user, and no compatibility checks are (or, really, can be)
              performed. This means, for example, that the anchor <i>might</i> be an array of values, even though
              that is incongruous with the purpose of a <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute"/>. The one exception is that
              a literal user-provided <see langword="null"/> will be converted into <see cref="T:System.DBNull"/>, though
              that will also induce an error during Translation.
            </remarks>
        </member>
        <member name="M:Kvasir.Annotations.Check.ComparisonAttribute.#ctor(Kvasir.Schema.ComparisonOperator,System.Object)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute"/> instance.
            </summary>
            <param name="op">
              The <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Operator"/> for the constraint.
            </param>
            <param name="anchor">
              The <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Anchor"/> for the constraint.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.ComparisonAttribute.WithPath(System.String)">
            <summary>
              Creates an exact copy of a <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute"/>, but with a different <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Path"/>.
            </summary>
            <param name="path">
              The new <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Path"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute"/> of the same most-derived type as <c>this</c>, whose
              <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Path"/> attribute is exactly <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Annotations.Check.ComparisonAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsNotAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property cannot have a
              specific value.
            </summary>
            <seealso cref="T:Kvasir.Annotations.NonNullableAttribute"/>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNotAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsNotAttribute"/> class.
            </summary>
            <param name="value">
              The value that the Field backing the annotated property cannot take.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNotAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsGreaterThanAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be strictly
              greater than a specific value.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsGreaterThanAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsGreaterThanAttribute"/> class.
            </summary>
            <param name="lowerBound">
              The value that the Field backing the annotated property must be strictly greater than.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsGreaterThanAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsLessThanAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be strictly
              less than a specific value.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsLessThanAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsLessThanAttribute"/> class.
            </summary>
            <param name="upperBound">
              The value that the Field backing the annotated property must be strictly less than.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsLessThanAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be greater
              than or equal to a specific value.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute"/> class.
            </summary>
            <param name="lowerBound">
              The value that the Field backing the annotated property must be greater than or equal to.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsLessOrEqualToAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be less
              than or equal to a specific value.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsLessOrEqualToAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsLessOrEqualToAttribute"/> class.
            </summary>
            <param name="upperBound">
              The value that the Field backing the annotated property must be less than or equal to.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsLessOrEqualToAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.InclusionAttribute">
            <summary>
              The base class for all annotations that restrict the value for the Field backing a particular property
              relative to a collection of anchor values.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.InclusionAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.Check.InclusionAttribute.Operator">
            <summary>
              The operator of the comparison restriction.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.InclusionAttribute.Anchor">
            <summary>
              The collection of anchor values for the comparison restriction.
            </summary>
            <remarks>
              The values are taken directly from the user, and no compatibility checks are (or, really, can be)
              performed. The one exception is that a literal user-provided <see langword="null"/> will be converted
              into <see cref="T:System.DBNull"/>, though that will also induce an error during Translation. The collection
              will not be empty, but it may consist of only a single value.
            </remarks>
        </member>
        <member name="M:Kvasir.Annotations.Check.InclusionAttribute.#ctor(Kvasir.Schema.InclusionOperator,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute"/> instance.
            </summary>
            <param name="op">
              The <see cref="P:Kvasir.Annotations.Check.InclusionAttribute.Operator"/> for the constraint.
            </param>
            <param name="anchor">
              The <see cref="P:Kvasir.Annotations.Check.InclusionAttribute.Anchor"/> for the constraint.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.InclusionAttribute.WithPath(System.String)">
            <summary>
              Creates an exact copy of a <see cref="T:Kvasir.Annotations.Check.InclusionAttribute"/>, but with a different <see cref="P:Kvasir.Annotations.Check.InclusionAttribute.Path"/>.
            </summary>
            <param name="path">
              The new <see cref="P:Kvasir.Annotations.Check.InclusionAttribute.Path"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Annotations.Check.InclusionAttribute"/> of the same most-derived type as <c>this</c>, whose
              <see cref="P:Kvasir.Annotations.Check.InclusionAttribute.Path"/> attribute is exactly <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Annotations.Check.InclusionAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsOneOfAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be one of a
              discrete set of options.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsOneOfAttribute.#ctor(System.Object,System.Object[])">
            <summary>
              Construct a new instance of the <see cref="T:Kvasir.Annotations.Check.IsOneOfAttribute"/> class.
            </summary>
            <param name="first">
              The first of the discrete set of options, of which the value that the Field backing the annotated
              property must be one.
            </param>
            <param name="rest">
              The remainder of the discrete set of options, of which the value that the Field backing the annotated
              property must be one. It is valid for this array to be empty.
            </param>
            <remarks>
              Each element of <paramref name="rest"/> should be the same exact type as <paramref name="first"/>,
              though this is not checked or enforced until Translation.
            </remarks>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsOneOfAttribute.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Construct a new instance of the <see cref="T:Kvasir.Annotations.Check.IsOneOfAttribute"/> class.
            </summary>
            <param name="all">
              The complete discrete set of options, of which the value that the Field backing the annotated property
              must be one.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsOneOfAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsNotOneOfAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property cannot be one of
              a discrete set of options
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNotOneOfAttribute.#ctor(System.Object,System.Object[])">
            <summary>
              Construct a new instance of the <see cref="T:Kvasir.Annotations.Check.IsNotOneOfAttribute"/> class.
            </summary>
            <param name="first">
              The first of the discrete set of options, of which the value that the Field backing the annotated
              property cannot be one.
            </param>
            <param name="rest">
              The remainder of the discrete set of options, of which the value that the Field backing the annotated
              property cannot be one. It is valid for this array to be empty.
            </param>
            <remarks>
              Each element of <paramref name="rest"/> should be the same exact type as <paramref name="first"/>,
              though this is not checked or enforced until Translation.
            </remarks>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNotOneOfAttribute.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Construct a new instance of the <see cref="T:Kvasir.Annotations.Check.IsOneOfAttribute"/> class.
            </summary>
            <param name="all">
              The complete discrete set of options, of which the value that the Field backing the annotated property
              cannot be one.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNotOneOfAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.SignednessAttribute">
            <summary>
              The base class for all annotations that restrict the value for the Field backing a particular numeric-type
              property relative to zero.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.SignednessAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.Check.SignednessAttribute.Operator">
            <summary>
              The operator of the comparison restriction.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.SignednessAttribute.#ctor(Kvasir.Schema.ComparisonOperator)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Annotations.Check.SignednessAttribute"/> instance.
            </summary>
            <param name="op">
              The <see cref="P:Kvasir.Annotations.Check.ComparisonAttribute.Operator"/> for the constraint.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.SignednessAttribute.WithPath(System.String)">
            <summary>
              Creates an exact copy of a <see cref="T:Kvasir.Annotations.Check.SignednessAttribute"/>, but with a different <see cref="P:Kvasir.Annotations.Check.SignednessAttribute.Path"/>.
            </summary>
            <param name="path">
              The new <see cref="P:Kvasir.Annotations.Check.SignednessAttribute.Path"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Annotations.Check.SignednessAttribute"/> of the same most-derived type as <c>this</c>, whose
              <see cref="P:Kvasir.Annotations.Check.SignednessAttribute.Path"/> attribute is exactly <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Annotations.Check.SignednessAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsNonZeroAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property cannot be
              <c>0</c>.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNonZeroAttribute.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsNonZeroAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNonZeroAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsPositiveAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be positive
              (i.e. <c>&gt;= 0</c>).
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsPositiveAttribute.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsPositiveAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsPositiveAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsNegativeAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property must be positive
              (i.e. <c>&lt;= 0</c>).
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNegativeAttribute.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsNegativeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNegativeAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.StringLengthAttribute">
            <summary>
              The base class for all annotations that restrict the length of the value for the Field backing a
              particular string-type property.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.StringLengthAttribute.Path">
            <summary>
              The dot-separated path, relative to the property on which the annotation is placed, to the property to
              which the annotation actually applies.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.StringLengthAttribute.Minimum">
            <summary>
              The (inclusive) lower bound on the string length imposed by the annotation. A value that cannot be
              represented by an <see cref="T:System.Int32"/> indicates that there is no lower bound. Note that this value may
              be negative, despite a natural boundary at 0.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.Check.StringLengthAttribute.Maximum">
            <summary>
              The (inclusive) upper bound on the string length imposed by the annotation. A value that cannot be
              represented by an <see cref="T:System.Int32"/> indicates that there is no upper bound. Note that this value may
              be less than the <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Minimum"/>, despite that being a natural boundary.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.StringLengthAttribute.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Annotations.Check.StringLengthAttribute"/> instance.
            </summary>
            <param name="minimum">
              The <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Minimum"/> string length.
            </param>
            <param name="maximum">
              The <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Maximum"/> string length.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.StringLengthAttribute.WithPath(System.String)">
            <summary>
              Creates an exact copy of a <see cref="T:Kvasir.Annotations.Check.StringLengthAttribute"/>, but with a different
              <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Path"/>.
            </summary>
            <param name="path">
              The new <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Path"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Annotations.Check.StringLengthAttribute"/> of the same most-derived type as <c>this</c>, whose
              <see cref="P:Kvasir.Annotations.Check.StringLengthAttribute.Path"/> attribute is exactly <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Annotations.Check.StringLengthAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.IsNonEmptyAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular string-type property must
              be non-empty.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNonEmptyAttribute.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.IsNonEmptyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.IsNonEmptyAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.LengthIsAtLeastAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular string-type property must
              be at least a certain length.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsAtLeastAttribute.#ctor(System.Int32)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.LengthIsAtLeastAttribute"/> class.
            </summary>
            <param name="lowerBound">
              The length (<i>inclusive</i>) that the Field backing the annotated property must be no shorter than.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsAtLeastAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.LengthIsAtMostAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular string-type property can
              be at most a certain length.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsAtMostAttribute.#ctor(System.Int32)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.LengthIsAtMostAttribute"/> class.
            </summary>
            <param name="upperBound">
              The length (<i>inclusive</i>) that the Field backing the annotated property must be no shorter than.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsAtMostAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.Check.LengthIsBetweenAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular string-type property must
              have a length within a certain range.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsBetweenAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.Check.LengthIsBetweenAttribute"/> class.
            </summary>
            <param name="lowerBound">
              The length (<i>inclusive</i>) that the Field backing the annotated property must be no shorter than.
            </param>
            <param name="upperBound">
              The length (<i>inclusive</i>) that the Field backing the annotated property must be no longer than.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.Check.LengthIsBetweenAttribute.WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.ColumnAttribute">
            <summary>
              An annotation that specifies the column index for the Field backing a particular property.
            </summary>
            <remarks>
              A <see cref="T:Kvasir.Annotations.ColumnAttribute"/> that is applied to a property of aggregate type defines the offset of the
              nested properties thereof. When applied to a property within an aggregate, the absolute position of the
              backing Field will depend on the offset defined by the owning Entity (and, therefore, can be different from
              Entity to Entity).
            </remarks>
        </member>
        <member name="P:Kvasir.Annotations.ColumnAttribute.Column">
            <summary>
              The <c>0</c>-based column index.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.ColumnAttribute.#ctor(System.Int32)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.ColumnAttribute"/> class.
            </summary>
            <param name="column">
              The <c>0</c>-based column index.
            </param>
        </member>
        <member name="T:Kvasir.Annotations.DataConverterAttribute">
            <summary>
              A non-generic view of a <see cref="T:Kvasir.Annotations.DataConverterAttribute`1"/>.
            </summary>
            <seealso cref="T:Kvasir.Annotations.DataConverterAttribute`1"/>.
        </member>
        <member name="P:Kvasir.Annotations.DataConverterAttribute.DataConverter">
            <summary>
              The <see cref="P:Kvasir.Annotations.DataConverterAttribute.DataConverter"/> instance specified in the annotation.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.DataConverterAttribute.UserError">
            <summary>
              The error message explaining why the <see cref="P:Kvasir.Annotations.DataConverterAttribute.DataConverter"/> specified in the annotation is invalid,
              for example if it throws an error during construction. (This value will be <see langword="null"/> if the
              <see cref="P:Kvasir.Annotations.DataConverterAttribute.DataConverter"/> is, in fact, valid.)
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.DataConverterAttribute`1">
            <summary>
              An annotation that defines the data converter to be used to convert between C# values for a particular
              property and values of the backing Field.
            </summary>
            <typeparam name="TConverter">
              The type of <see cref="T:Kvasir.Core.IDataConverter"/>.
            </typeparam>
        </member>
        <member name="P:Kvasir.Annotations.DataConverterAttribute`1.DataConverter">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.DataConverterAttribute`1.UserError">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Annotations.DataConverterAttribute`1.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.DataConverterAttribute`1"/> class.
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.DefaultAttribute">
            <summary>
              An annotation that defines the default value for the Field backing a particular property.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.DefaultAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.DefaultAttribute.Value">
            <summary>
              The default value specified by the annotation. This value is guaranteed not to be <see langword="null"/>;
              the sentinel value <see cref="F:System.DBNull.Value"/> is used instead.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.DefaultAttribute.#ctor(System.Object)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.DefaultAttribute"/> class.
            </summary>
            <param name="value">
              The default value.
            </param>
            <remarks>
              A default value of <c>NULL</c> is fundamentally different than the absence of a default value. The former
              indicates that, in the absence of a user-provided value, a Field should take on the value of <c>NULL</c>.
              The latter, meanwhile, indicates that it is an error for the user to omit a value for a Field. If the
              desire is to make a Field "required," do not place a <see cref="T:Kvasir.Annotations.DefaultAttribute"/> on the corresponding
              property.
            </remarks>
        </member>
        <member name="M:Kvasir.Annotations.DefaultAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.NumericAttribute">
            <summary>
              An annotation that specifies that the type of the Field backing a particular property should correspond to
              the underlying numeric type of the property's own type, which must be an <see cref="T:System.Enum"/>.
            </summary>
            <remarks>
              The default storage scheme for Enumeration-type Fields depends on the capabilities of the back-end database,
              but decays to <c>string</c> (with <c>CHECK</c> constraints as possible) in the absence of any explicit
              enumeration support. The <see cref="T:Kvasir.Annotations.NumericAttribute"/> can be used to override the default storage behavior
              and insist that the storage be a numeric type instead.
            </remarks>
        </member>
        <member name="T:Kvasir.Annotations.AsStringAttribute">
            <summary>
              An annotation that specifies that the type of the Field backing a particular property should correspond to the
              built-in string representation of the property's own type, which must be an <see cref="T:System.Enum"/>.
            </summary>
            <remarks>
              The default storage scheme for Enumeration-type Fields depends on the capabilities of the back-end database,
              but decays to <c>string</c> (with <c>CHECK</c> constraints as possible) in the absence of any explicit
              enumeration support. the <see cref="T:Kvasir.Annotations.AsStringAttribute"/> can be used to override the default storage behavior
              and insist that the storage be a string type even if enumeration support is available.
            </remarks>
        </member>
        <member name="T:Kvasir.Annotations.CodeOnlyAttribute">
            <summary>
              An annotation that marks a particular property as "code-only."
            </summary>
            <remarks>
              <para>
                A "code-only" property is one whose value is not stored in the back-end database. The value of such a
                property is the domain of the application solely; examples include internal state tracking, sensitive user
                data that is otherwise persisted, or content that is temporally dependent. Because the value of a code-only
                property never propagates to the database, the property itself does not participate in construction
                resolution (that is, it must have an implicit default value).
              </para>
              <para>
                A <see cref="T:Kvasir.Annotations.CodeOnlyAttribute"/> that is applied to a property of aggregate type <i>without</i> a path
                parameterization recursively applies to all nested properties.
              </para>
            </remarks>
        </member>
        <member name="T:Kvasir.Annotations.IncludeInModelAttribute">
            <summary>
              An annotation that marks a particular property or class as one that should be included in the data model.
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.NameAttribute">
            <summary>
              An annotation that specifies the name of the Field backing a particular property.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the name of backing Fields based on the name of the POCO
              property. The <see cref="T:Kvasir.Annotations.NameAttribute"/> can be used to override the default deduction when that deduction
              would be incorrect or undesirable.
            </remarks>
            <seealso cref="T:Kvasir.Schema.FieldName"/>
        </member>
        <member name="P:Kvasir.Annotations.NameAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.NameAttribute.Name">
            <summary>
              The Field name specified by the annotation.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.NameAttribute.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.NameAttribute"/>.
            </summary>
            <param name="name">
              The name of the Field.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.NameAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.NullableAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property <i>cannot</i> be
              <c>NULL</c>.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the nullability of backing Fields based on the nullability
              of the POCO property's type. The <see cref="T:Kvasir.Annotations.NullableAttribute"/> can be used to override the default
              deduction when that deduction would be incorrect or undesirable.
            </remarks>
            <seealso cref="T:Kvasir.Annotations.NonNullableAttribute"/>
        </member>
        <member name="T:Kvasir.Annotations.NonNullableAttribute">
            <summary>
              An annotation that specifies that the value for the Field backing a particular property <i>can</i> be
              <c>NULL</c>.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the nullability of backing Fields based on the nullability
              of the POCO property's type. The <see cref="T:Kvasir.Annotations.NonNullableAttribute"/> can be used to override the default
              deduction when that deduction would be incorrect.
            </remarks>
            <seealso cref="T:Kvasir.Annotations.NonNullableAttribute"/>
        </member>
        <member name="T:Kvasir.Annotations.ExcludeNamespaceFromNameAttribute">
            <summary>
              An annotation that specifies that the namespace of an Entity should not be included in the corresponding Table
              name.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the name of primary backing Tables based on the namespace
              and name of the POCO. The namespace is included to ensure uniqueness among all Tables, since different C#
              namespaces can define classes with the same name. The <see cref="T:Kvasir.Annotations.ExcludeNamespaceFromNameAttribute"/> directs
              Kvasir to ignore the POCO's namespace entirely, making a promise that the POCO's name is globally unique among
              types being treated by the framework.
            </remarks>
        </member>
        <member name="T:Kvasir.Annotations.PrimaryKeyAttribute">
            <summary>
              An attribute that specifies that the Field backing a particular property is part of the owning Entity's
              Primary Key.
            </summary>
            <remarks>
              <para>
                By default, the Kvasir framework will determine the Primary Key for a Table by analyzing the names of the
                Table's Fields and applying a sequence of well-defined rule. For example, a Field named <c>FooID</c> or
                <c>FooId</c> for a Table named <c>Foo</c> is assumed to be the Table's single-Field Primary Key. The
                <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute"/> can be used to override the default deduction when that deduction would
                be incorrect or undesirable.
              </para>
              <para>
                When a <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute"/> is applied to multiple POCO properties, the result is a composite
                Primary Key where the order of the constituent Fields is undefined (and mathematically irrelevant).
                Regardless of the number of Fields involved, a Primary Key by default has no name; to provide a name to a
                Primary Key (either the automatic deduction or the annotation-specified), apply a
                <see cref="T:Kvasir.Annotations.NamedPrimaryKeyAttribute"/> to the POCO class.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Annotations.PrimaryKeyAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Annotations.PrimaryKeyAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Annotations.NamedPrimaryKeyAttribute">
            <summary>
              An attribute that specifies the name of the Primary Key of the Table backing a particular class.
            </summary>
            <seealso cref="T:Kvasir.Annotations.PrimaryKeyAttribute"/>
            <seealso cref="T:Kvasir.Schema.KeyName"/>
        </member>
        <member name="P:Kvasir.Annotations.NamedPrimaryKeyAttribute.Name">
            <summary>
              The Primary Key name specified by the annotation.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.NamedPrimaryKeyAttribute.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.NamedPrimaryKeyAttribute"/>.
            </summary>
            <param name="name">
              The name of the Primary Key.
            </param>
        </member>
        <member name="T:Kvasir.Annotations.ReconstituteThroughAttribute">
            <summary>
              An annotation that directs Kvasir to use a particular constructor for reconstitution.
            </summary>
        </member>
        <member name="T:Kvasir.Annotations.TableAttribute">
            <summary>
              An annotation that specifies the name of the Table backing a particular class.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the name of backing Tables based on the name of the POCO
              class. The <see cref="T:Kvasir.Annotations.TableAttribute"/> can be used to override the default deduction when that deduction
              would be incorrect or undesirable.
            </remarks>
            <seealso cref="T:Kvasir.Schema.FieldName"/>
        </member>
        <member name="P:Kvasir.Annotations.TableAttribute.Name">
            <summary>
              The Table name specified by the annotation.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.TableAttribute.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.TableAttribute"/>.
            </summary>
            <param name="name">
              The name of the Table.
            </param>
        </member>
        <member name="T:Kvasir.Annotations.RelationTableAttribute">
            <summary>
              An annotation that specifies the name of the Relation Table backing a particular relation-type property.
            </summary>
            <remarks>
              The Kvasir framework will automatically determine the name of backing Relation Tables based on the name of the
              in-code property and the owning POCO class. The <see cref="T:Kvasir.Annotations.RelationTableAttribute"/> can be used to override
              the default deduction when that deduction would be incorrect or undesirable.
            </remarks>
            <seealso cref="T:Kvasir.Schema.FieldName"/>
        </member>
        <member name="P:Kvasir.Annotations.RelationTableAttribute.Name">
            <summary>
              The Table name specified by the annotation.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.RelationTableAttribute.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.RelationTableAttribute"/>.
            </summary>
            <param name="name">
              The name of the Table.
            </param>
        </member>
        <member name="T:Kvasir.Annotations.UniqueAttribute">
            <summary>
              An annotation that marks the Field backing a particular property as being part of a <c>UNIQUE</c> constraint.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.UniqueAttribute.ANONYMOUS_PREFIX">
            <summary>
              The name prefix reserved for use by Kvasir itself.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.UniqueAttribute.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Annotations.UniqueAttribute.Name">
            <summary>
              The Candidate Key name specified by the annotation.
            </summary>
        </member>
        <member name="P:Kvasir.Annotations.UniqueAttribute.IsAnonymous">
            <summary>
              Whether or not a <see cref="P:Kvasir.Annotations.UniqueAttribute.Name"/> was provided when the <see cref="T:Kvasir.Annotations.UniqueAttribute"/> was constructed.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.UniqueAttribute.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.UniqueAttribute"/> class with an implementation-defined name.
            </summary>
        </member>
        <member name="M:Kvasir.Annotations.UniqueAttribute.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.UniqueAttribute"/> class with a user-defined name.
            </summary>
            <param name="name">
              The name of the <c>UNIQUE</c> constraint.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.UniqueAttribute.#ctor(System.Char)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.UniqueAttribute"/> class with the dedicated Synthetic name.
            </summary>
            <param name="_">
              A placeholder argument to control overload resolution.
            </param>
        </member>
        <member name="M:Kvasir.Annotations.UniqueAttribute.#ctor(System.String,System.Boolean)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Annotations.UniqueAttribute"/> class.
            </summary>
            <param name="name">
              The name of the <c>UNIQUE</c> constraint.
            </param>
            <param name="anonymous">
              Whether or not the <c>UNIQUE</c> constraint is "anonymous."
            </param>
        </member>
        <member name="M:Kvasir.Annotations.UniqueAttribute.Kvasir#Annotations#INestableAnnotation#WithPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Core.EntityDepot">
            <summary>
              A collection of Entities, indexable by <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Core.EntityDepot.Item(System.Type)">
            <summary>
              Get all the (untyped) Entities of a particular <see cref="T:System.Type"/> that have been stored.
            </summary>
            <param name="type">
              [GET] The <see cref="T:System.Type"/> of Entity.
            </param>
            <seealso cref="M:Kvasir.Core.EntityDepot.GetEntities``1"/>
        </member>
        <member name="M:Kvasir.Core.EntityDepot.#ctor">
            <summary>
              Constructs a new <see cref="T:Kvasir.Core.EntityDepot"/> with no stored Entities.
            </summary>
        </member>
        <member name="M:Kvasir.Core.EntityDepot.GetEntities``1">
            <summary>
              Get all the (typed) Entities of a particular <see cref="T:System.Type"/> that have been stored.
            </summary>
            <seealso cref="P:Kvasir.Core.EntityDepot.Item(System.Type)"/>
        </member>
        <member name="M:Kvasir.Core.EntityDepot.StoreEntity(System.Object)">
            <summary>
              Store a new Entity.
            </summary>
            <param name="entity">
              The Entity to store.
            </param>
        </member>
        <member name="T:Kvasir.Core.EnumToNumericConverter">
            <summary>
              A built-in <see cref="T:Kvasir.Core.IDataConverter"/> that bidirectionally converts between enumerations and their
              underlying numeric value.
            </summary>
        </member>
        <member name="P:Kvasir.Core.EnumToNumericConverter.ConverterImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Core.EnumToNumericConverter.#cctor">
            <summary>
              Initialize the static state of the <see cref="T:Kvasir.Core.EnumToNumericConverter"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Core.EnumToNumericConverter.#ctor(System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Core.EnumToNumericConverter"/>.
            </summary>
            <param name="enumType">
              The type of the enumeration to convert.
            </param>
        </member>
        <member name="M:Kvasir.Core.EnumToNumericConverter.MakeImpl``2">
            <summary>
              Creates a <see cref="T:Cybele.Core.DataConverter"/> that bidirectionally converts between a specific enumeration type
              and its underlying numeric type.
            </summary>
            <typeparam name="TEnum">
              The enumeration type.
            </typeparam>
            <typeparam name="TNumeric">
              The underlying numeric type of <typeparamref name="TEnum"/>.
            </typeparam>
            <returns>
              A <see cref="T:Cybele.Core.DataConverter"/> that converts instances of <typeparamref name="TEnum"/> into the equivalent
              <typeparamref name="TNumeric"/>, and vice-versa.
            </returns>
        </member>
        <member name="T:Kvasir.Core.EnumToStringConverter">
            <summary>
              A built-in <see cref="T:Kvasir.Core.IDataConverter"/> that bidirectionally converts between enumerations and their string
              representation.
            </summary>
            <remarks>
              The string representation of an enumeration is usually the result of invoking <c>ToString()</c> on the
              enumeration. For unnamed combinations of <see cref="T:System.FlagsAttribute">flag enumerators</see>, the string
              representation is the <c>ToString()</c> result with the "comma-space" delimiter replaced by a vertical bar
              (<c>|</c>).
            </remarks>
        </member>
        <member name="P:Kvasir.Core.EnumToStringConverter.ConverterImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Core.EnumToStringConverter.#cctor">
            <summary>
              Initialize the static state of the <see cref="T:Kvasir.Core.EnumToStringConverter"/> class.
            </summary>
        </member>
        <member name="M:Kvasir.Core.EnumToStringConverter.#ctor(System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Core.EnumToStringConverter"/>.
            </summary>
            <param name="enumType">
              The type of the enumeration to convert.
            </param>
        </member>
        <member name="M:Kvasir.Core.EnumToStringConverter.MakeImpl``1">
            <summary>
              Creates a <see cref="T:Cybele.Core.DataConverter"/> that bidirectionally converts between a specific enumeration type
              and its Kvasir-defined string representation.
            </summary>
            <typeparam name="TEnum">
              The enumeration type.
            </typeparam>
            <returns>
              A <see cref="T:Cybele.Core.DataConverter"/> that converts instances of <typeparamref name="TEnum"/> into the equivalent
              <see cref="T:System.String"/>, and vice-versa.
            </returns>
        </member>
        <member name="T:Kvasir.Core.IConstraintGenerator">
            <summary>
              The interface for tying a user-defined <c>CHECK</c> constraint to one or more Fields.
            </summary>
            <remarks>
              <para>
                The Kvasir framework provides a collection of basic constraints natively as part of its annotation system.
                These constraints can be applied to a single Field by placing the relevant attribute directly on the target
                property, with minimal parametrization available. The set of pre-defined constraints is by no means
                exhaustive, and this mechanic is also limited: it cannot be used to apply a constraint that takes into
                account the values of multiple Fields.
              </para>
              <para>
                To provide users with the power to define their own constraints outside of the library, Kvasir's annotation
                system allows for the specification of a <i>Type</i> that encapsulates the custom constraint logic. When
                used, the provided Type must implement this interface, which exposes the method necessary to convert one
                or more Fields into the actual constraint. This pattern allows for the re-use of custom constraint classes
                on multiple Fields in the same Entity or in wholly separate Entities altogether; it also permits the use
                of non-compile-time-constants (which are forbidden in C# attributes).
              </para>
            </remarks>
            <seealso cref="T:Kvasir.Annotations.CheckAttribute"/>
            <seealso cref="T:Kvasir.Annotations.Check.ComplexAttribute"/>
        </member>
        <member name="M:Kvasir.Core.IConstraintGenerator.MakeConstraint(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},System.Collections.Generic.IEnumerable{Cybele.Core.DataConverter},Kvasir.Core.Settings)">
            <summary>
              Produces a constraint <see cref="T:Kvasir.Schema.Clause"/> that restricts the values of one or more Fields.
            </summary>
            <param name="fields">
              The collection of <see cref="T:Kvasir.Schema.IField">Fields</see> on whose values the <c>CHECK</c> constraint depends.
              The order of the Fields reflects the order in which they were listed in the annotation and should be used
              to fill in the <see cref="T:Kvasir.Schema.FieldExpression">FieldExpressions</see> of the resultant <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <param name="converters">
              The <see cref="T:Cybele.Core.DataConverter">DataConverters</see> relevant to the <paramref name="fields"/>. The
              <i>i<sup>th</sup></i> item in this list corresponds to the <i>i<sup>th</sup></i> item in
              <paramref name="fields"/>. These should be used to transform any parameterized values, if present.
            </param>
            <param name="settings">
              The system <see cref="T:Kvasir.Core.Settings"/>.
            </param>
            <pre>
              Both <paramref name="fields"/> and <paramref name="converters"/> are non-empty and of equal length. None
              of the arguments, nor any of the collection items, is <see langword="null"/>.
            </pre>
            <returns>
              A <c>CHECK</c> constraint <see cref="T:Kvasir.Schema.Clause"/> that is configured to constrain <paramref name="fields"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Core.IDataConverter">
            <summary>
              The untyped interface for a user-defined data converter.
            </summary>
            <remarks>
              This is the interface that is leveraged internally, in a type-erased context, by the Kvasir framework.
              Clients are expected to implement the <see cref="T:Kvasir.Core.IDataConverter`2"/>, which inherits from
              this one, to produce their custom data converters. This extra level of indirection allows for clients to
              operate in a type-safe manner, a luxury that the framework does not have due to the need to use reflection.
            </remarks>
        </member>
        <member name="P:Kvasir.Core.IDataConverter.ConverterImpl">
            <summary>
              The bidirectional <see cref="T:Cybele.Core.DataConverter"/> that wraps the user-defined conversion and reversion
              methods.
            </summary>
        </member>
        <member name="T:Kvasir.Core.IDataConverter`2">
            <summary>
              The interface for a user-defined data converter, which is used to convert from in-source values to database
              values and vice-versa.
            </summary>
            <typeparam name="TSource">
              The <see cref="T:System.Type"/> of the in-source values on which this <see cref="T:Kvasir.Core.IDataConverter`2"/>
              operates.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="T:System.Type"/> of the database values on which this <see cref="T:Kvasir.Core.IDataConverter`2"/>
              operates.
            </typeparam>
            <see cref="T:Cybele.Core.DataConverter"/>
        </member>
        <member name="M:Kvasir.Core.IDataConverter`2.Convert(`0)">
            <summary>
              Converts an instance of <typeparamref name="TSource"/> into an instance of
              <typeparamref name="TResult"/>.
            </summary>
            <param name="source">
              The source object.
            </param>
            <returns>
              The conversion of <paramref name="source"/> into an instance of <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Core.IDataConverter`2.Revert(`1)">
            <summary>
              Converts an instance of <typeparamref name="TResult"/> back into an instance of
              <see typeparamref="TSource"/>.
            </summary>
            <remarks>
              Because the underlying conversion mechanism need not be bijective (that is, multiple different source
              objects can convert into the same result object), the <see cref="M:Kvasir.Core.IDataConverter`2.Revert(`1)"/> API does not
              necessarily present a true inversion. For a given result object <c>R</c>, the only guarantees are that
              repeated calls to the API will yield the same source object and that <c>Convert(Revert(R)) == R</c>.
            </remarks>
            <param name="result">
              The result object.
            </param>
            <returns>
              The reversion of <paramref name="result"/> into an instance of <typeparamref name="TSource"/>.
            </returns>
        </member>
        <member name="P:Kvasir.Core.IDataConverter`2.Kvasir#Core#IDataConverter#ConverterImpl">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Core.Settings">
            <summary>
              The settings to be used by the Kvasir framework in the course of its deductions, translations, and other
              built-in behaviors.
            </summary>
        </member>
        <member name="P:Kvasir.Core.Settings.Default">
            <summary>
              The default settings used by the Kvasir framework.
            </summary>
        </member>
        <member name="T:Kvasir.Exceptions.KvasirException">
            <summary>
              A base exception to be raised by the Kvasir framework when malformed, invalid, or contradictory user input
              is encountered.
            </summary>
        </member>
        <member name="M:Kvasir.Exceptions.KvasirException.#ctor">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Exceptions.KvasirException"/> class, setting the <c>Message</c> property
              to an implementation-defined default value and the <c>InnerException</c> property to
              <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Exceptions.KvasirException.#ctor(System.String)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Exceptions.KvasirException"/> class, setting the <c>Message</c> property
              to a user-defined value and the <c>InnerException</c> property to <see langword="null"/>.
            </summary>
            <param name="message">
              A description of the error.
            </param>
        </member>
        <member name="M:Kvasir.Exceptions.KvasirException.#ctor(System.String,System.Exception)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Exceptions.KvasirException"/> class, setting both the <c>Message</c> and
              <c>InnerException</c> properties to user-defined values.
            </summary>
            <param name="message">
              A description of the error.
            </param>
            <param name="innerException">
              The cause of the new exception.
            </param>
        </member>
        <member name="M:Kvasir.Exceptions.KvasirException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Constructs a new instance of the <see cref="T:Kvasir.Exceptions.KvasirException"/> class from serialized data.
            </summary>
            <param name="info">
              The object that holds the serialized data.
            </param>
            <param name="context">
              The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Kvasir.Extraction.ConvertingExtractor">
            <summary>
              An <see cref="T:Kvasir.Extraction.ISingleExtractor"/> that executes a <see cref="T:Cybele.Core.DataConverter"/> after extracting a value.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.ConvertingExtractor.SourceType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Extraction.ConvertingExtractor.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Extraction.ConvertingExtractor.#ctor(Kvasir.Extraction.ISingleExtractor,Cybele.Core.DataConverter)">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.ConvertingExtractor"/>.
            </summary>
            <param name="extractor">
              The <see cref="T:Kvasir.Extraction.ISingleExtractor"/> that produces the unconverted value.
            </param>
            <param name="converter">
              The <see cref="T:Cybele.Core.DataConverter"/> to run over the value produced by <paramref name="extractor"/> during
              <see cref="M:Kvasir.Extraction.ConvertingExtractor.ExtractFrom(System.Object)">extraction</see>.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.ConvertingExtractor.ExtractFrom(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Extraction.CurryingExtractor">
            <summary>
              A <see cref="T:Kvasir.Extraction.IMultiExtractor"/> that takes a single CLR object, extracts a single value from it, and then runs
              extraction logic over that single value.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.CurryingExtractor.SourceType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Extraction.CurryingExtractor.#ctor(Kvasir.Extraction.ISingleExtractor,Kvasir.Extraction.IMultiExtractor)">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.CurryingExtractor"/>.
            </summary>
            <param name="sourceExtractor">
              The <see cref="T:Kvasir.Extraction.ISingleExtractor"/> that produces the single nested value on which to run additional
              extraction logic.
            </param>
            <param name="valuesExtractor">
              The additional extraction logic to run over the value produced by <paramref name="sourceExtractor"/>.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.CurryingExtractor.ExtractFrom(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Extraction.DataExtractionPlan">
            <summary>
              A plan that describes how to extract a set of <see cref="T:Kvasir.Schema.DBValue">database values</see> from a single CLR
              source object.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.DataExtractionPlan.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of object from which this <see cref="T:Kvasir.Extraction.DataExtractionPlan"/> extracts values.
            </summary>
        </member>
        <member name="M:Kvasir.Extraction.DataExtractionPlan.#ctor(System.Collections.Generic.IEnumerable{Kvasir.Extraction.IMultiExtractor})">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.DataExtractionPlan"/>.
            </summary>
            <param name="extractors">
              The collection of extractors that produce the constituent values during <see cref="N:Kvasir.Extraction"/>.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.DataExtractionPlan.ExtractFrom(System.Object)">
            <summary>
              Run the extraction logic over a CLR source object, producing one or more database values.
            </summary>
            <param name="source">
              The CLR source object.
            </param>
            <returns>
              One or more possibly database values, any of which may be <see cref="P:Kvasir.Schema.DBValue.NULL"/>. Each invocation of
              this method on a particular <see cref="T:Kvasir.Extraction.DataExtractionPlan"/> instance will return the same number of
              database values.
            </returns>
        </member>
        <member name="T:Kvasir.Extraction.DecomposingExtractor">
            <summary>
              A <see cref="T:Kvasir.Extraction.IMultiExtractor"/> that takes a single CLR source object and "decomposes" it into one or more
              constituent components.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.DecomposingExtractor.SourceType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Extraction.DecomposingExtractor.#ctor(System.Collections.Generic.IEnumerable{Kvasir.Extraction.IMultiExtractor})">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.DecomposingExtractor"/>.
            </summary>
            <param name="extractors">
              The collection of extractors that produce the constituent values during
              <see cref="M:Kvasir.Extraction.DecomposingExtractor.ExtractFrom(System.Object)">extraction</see>.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.DecomposingExtractor.ExtractFrom(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Extraction.IMultiExtractor">
            <summary>
              The interface describing a component that extracts one or more values from a single CLR source object.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.IMultiExtractor.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of object from which this <see cref="T:Kvasir.Extraction.IMultiExtractor"/> extracts values.
            </summary>
        </member>
        <member name="M:Kvasir.Extraction.IMultiExtractor.ExtractFrom(System.Object)">
            <summary>
              Run the extraction logic over a CLR source object, producing one or more values.
            </summary>
            <param name="source">
              The CLR source object.
            </param>
            <returns>
              One or more possibly <see langword="null"/> values. If <paramref name="source"/> is
              <see langword="null"/>, then all the values will be <see langword="null"/>. Each invocation of this
              method will return the same number of values.
            </returns>
        </member>
        <member name="T:Kvasir.Extraction.ISingleExtractor">
            <summary>
              The interface describing a component that extracts a single value from a CLR source object.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.ISingleExtractor.ResultType">
            <summary>
              The <see cref="T:System.Type"/> of object produced by this <see cref="T:Kvasir.Extraction.ISingleExtractor"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Extraction.ISingleExtractor.ExtractFrom(System.Object)">
            <summary>
              Run the extraction logic over a CLR source object, producing a single value.
            </summary>
            <param name="source">
              The CLR source object.
            </param>
            <returns>
              If <paramref name="source"/> is <see langword="null"/>, then <see langword="null"/>. Otherwise, a single
              value extracted from <paramref name="source"/> that is either <see langword="null"/> or an instance of
              <see cref="P:Kvasir.Extraction.ISingleExtractor.ResultType"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Extraction.ISingleExtractor.Kvasir#Extraction#IMultiExtractor#ExtractFrom(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Extraction.ReadPropertyExtractor">
            <summary>
              A <see cref="T:Kvasir.Extraction.ISingleExtractor"/> that produces its value by reading from a sequence of properties via
              reflection.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.ReadPropertyExtractor.SourceType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Extraction.ReadPropertyExtractor.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Extraction.ReadPropertyExtractor.#ctor(Cybele.Core.PropertyChain)">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.ReadPropertyExtractor"/>.
            </summary>
            <param name="path">
              The path describing the sequence of properties to be read during
              <see cref="M:Kvasir.Extraction.ReadPropertyExtractor.ExtractFrom(System.Object)">extraction</see>.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.ReadPropertyExtractor.ExtractFrom(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Extraction.RelationExtractionPlan">
            <summary>
              A plan that extracts rows of database values from a <see cref="T:Kvasir.Relations.IRelation">Relation</see> to be inserted,
              updated, and/or deleted from a back-end table.
            </summary>
        </member>
        <member name="P:Kvasir.Extraction.RelationExtractionPlan.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of object from which this <see cref="T:Kvasir.Extraction.RelationExtractionPlan"/> extracts values.
            </summary>
        </member>
        <member name="M:Kvasir.Extraction.RelationExtractionPlan.#ctor(Kvasir.Extraction.ISingleExtractor,Kvasir.Extraction.DataExtractionPlan)">
            <summary>
              Construct a new <see cref="T:Kvasir.Extraction.RelationExtractionPlan"/>.
            </summary>
            <param name="relationExtractor">
              The <see cref="T:Kvasir.Extraction.ISingleExtractor"/> describing how to obtain the <see cref="T:Kvasir.Relations.IRelation">Relation</see> from
              which to extract actions from the actual source object.
            </param>
            <param name="elementExtractionPlan">
              The <see cref="T:Kvasir.Extraction.DataExtractionPlan"/> describing how to turn a single element of the target Relation into a
              row of database values.
            </param>
        </member>
        <member name="M:Kvasir.Extraction.RelationExtractionPlan.ExtractFrom(System.Object)">
            <summary>
              Run the extraction logic over a CLR source object, producing <see cref="T:Kvasir.Extraction.RelationData"/>.
            </summary>
            <param name="source">
              The CLR source object.
            </param>
            <returns>
              The <see cref="T:Kvasir.Extraction.RelationData"/> containing the insertions, modifications, and deletions of the
              <see cref="T:Kvasir.Relations.IRelation">Relation</see> extracted from <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Extraction.RelationExtractionPlan.Canonicalize(System.Object)">
            <summary>
              Canonicalize the target <see cref="T:Kvasir.Relations.IRelation">Relation</see> on a CLR source.
            </summary>
            <param name="source">
              The CLR source object.
            </param>
            <seealso cref="M:Kvasir.Relations.IRelation.Canonicalize"/>
        </member>
        <member name="T:Kvasir.Extraction.RelationData">
            <summary>
              A triple of lists describing the data <see cref="T:Kvasir.Extraction.RelationExtractionPlan">extracted from a Relation</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Extraction.RelationData.#ctor(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}})">
            <summary>
              A triple of lists describing the data <see cref="T:Kvasir.Extraction.RelationExtractionPlan">extracted from a Relation</see>.
            </summary>
        </member>
        <member name="T:Kvasir.Reconstitution.ConstructingCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that creates a new CLR object by invoking a constructor via reflection.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.ConstructingCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.ConstructingCreator.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Kvasir.Reconstitution.ICreator},System.Boolean)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.ConstructingCreator"/>.
            </summary>
            <param name="ctor">
              The <see cref="T:System.Reflection.ConstructorInfo">constructor</see> to invoke.
            </param>
            <param name="argumentCreators">
              A collection of <see cref="T:Kvasir.Reconstitution.ICreator">ICreators</see> that define how each argument in the
              <paramref name="ctor">constructor</paramref> is created from the
              <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </param>
            <param name="allowAllNulls">
              If <see langword="true"/>, then a new non-<see langword="null"/> CLR object will be constructed even if
              each of the <see cref="T:Kvasir.Schema.DBValue">database values</see> provided is <see cref="P:Kvasir.Schema.DBValue.NULL"/>. If
              <see langword="false"/>, then such a set of values will result in a <see langword="null"/> object.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.ConstructingCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.CreatorFacade">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that forwards a contiguous subset of <see cref="T:Kvasir.Schema.DBValue">database values</see> to
              another <see cref="T:Kvasir.Reconstitution.ICreator"/>.
            </summary>
            <remarks>
              The purpose of the <see cref="T:Kvasir.Reconstitution.CreatorFacade"/> is to allow the reconstitution logic for an Aggregate type to
              be reused, both within a single Entity and across Entities. The logic for reconstituting an Aggregate depends
              only on the values extracted from that Aggregate, which are guaranteed to be contiguous within the data of the
              owning Entity. Likewise, any data reversions that must applied are known at the scope of the Aggregate, since
              data converters cannot be applied to nested properties. The <see cref="T:Kvasir.Reconstitution.CreatorFacade"/> therefore allows
              Kvasir to build an <see cref="T:Kvasir.Reconstitution.ICreator"/> (generally a <see cref="T:Kvasir.Reconstitution.ReconstitutingCreator"/>) for a particular
              Aggregate assuming that the values of interest are 0-index, then wrap that instance multiple times based on
              the actual offset into the row of values.
            </remarks>
        </member>
        <member name="P:Kvasir.Reconstitution.CreatorFacade.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.CreatorFacade.#ctor(Kvasir.Reconstitution.ICreator,System.Int32,System.Int32)">
            <summary>
              Create a new <see cref="T:Kvasir.Reconstitution.CreatorFacade"/>.
            </summary>
            <param name="creator">
              The <see cref="T:Kvasir.Reconstitution.ICreator"/> to which the new <see cref="T:Kvasir.Reconstitution.CreatorFacade"/> is to delegate.
            </param>
            <param name="startIdx">
              The index into the collection of <see cref="T:Kvasir.Schema.DBValue">database values</see> at which the first relevant
              value for <paramref name="creator"/> is located.
            </param>
            <param name="length">
              The number of <see cref="T:Kvasir.Schema.DBValue">database values</see> to forward to <paramref name="creator"/>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.CreatorFacade.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.DataReconstitutionPlan">
            <summary>
              A plan that describes how to reconstitute a single CLR source object from a set of
              <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.DataReconstitutionPlan.ResultType">
            <summary>
              The <see cref="T:System.Type"/> of CLR object reconstituted by this <see cref="T:Kvasir.Reconstitution.DataReconstitutionPlan"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.DataReconstitutionPlan.#ctor(Kvasir.Reconstitution.ReconstitutingCreator)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.DataReconstitutionPlan"/>.
            </summary>
            <param name="creator">
              The <see cref="T:Kvasir.Reconstitution.ReconstitutingCreator"/> with which to create the bare CLR object.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.DataReconstitutionPlan.ReconstituteFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <summary>
              Reconstitute a CLR object from one or more <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
            <param name="dbValues">
              A non-empty, ordered collection of <see cref="T:Kvasir.Schema.DBValue">database values</see>, any of which may be
              <see cref="P:Kvasir.Schema.DBValue.NULL"/>, from which to reconstitute a new CLR object.
            </param>
            <returns>
              A non-<see langword="null"/> CLR object created from <paramref name="dbValues"/> that is an instance of
              <see cref="P:Kvasir.Reconstitution.DataReconstitutionPlan.ResultType"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Reconstitution.DefaultStructCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that creates a default-constructed instance of a <see cref="T:System.ValueType"/>.
            </summary>
            <remarks>
              This implementation is essentially the same as a <see cref="T:Kvasir.Reconstitution.ConstructingCreator"/>. However, the implicit
              default constructor available for every <see cref="T:System.ValueType"/> is not exposed via reflection (e.g. via
              <see cref="M:System.Type.GetConstructors"/>.
            </remarks>
        </member>
        <member name="P:Kvasir.Reconstitution.DefaultStructCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.DefaultStructCreator.#ctor(System.Type,System.Boolean)">
            <summary>
              Create a new <see cref="T:Kvasir.Reconstitution.DefaultStructCreator"/>.
            </summary>
            <param name="type">
              The <see cref="P:Kvasir.Reconstitution.DefaultStructCreator.ResultType"/> of the new <see cref="T:Kvasir.Reconstitution.DefaultStructCreator"/>.
            </param>
            <param name="allowAllNulls">
              If <see langword="true"/>, then a new non-<see langword="null"/> CLR object will be constructed even if
              each of the <see cref="T:Kvasir.Schema.DBValue">database values</see> provided is <see cref="P:Kvasir.Schema.DBValue.NULL"/>. If
              <see langword="false"/>, then such a set of values will result in a <see langword="null"/> object.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.DefaultStructCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.DirectRepopulator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.IRepopulator"/> that passes each element directly to the
              <see cref="M:Kvasir.Relations.IRelation.Repopulate(System.Object)"/> method of the target <see cref="T:Kvasir.Relations.IRelation">Relation</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.DirectRepopulator.Repopulate(Kvasir.Relations.IRelation,System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.ICreator">
            <summary>
              The interface describing a component that creates a CLR object from one or more
              <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.ICreator.ResultType">
            <summary>
              The <see cref="T:System.Type"/> of CLR object created by this <see cref="T:Kvasir.Reconstitution.ICreator"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.ICreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <summary>
              Create a CLR object from one or more <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
            <param name="dbValues">
              A non-empty, ordered collection of <see cref="T:Kvasir.Schema.DBValue">database values</see>, any of which may be
              <see cref="P:Kvasir.Schema.DBValue.NULL"/>, from which to create a new CLR object.
            </param>
            <returns>
              A CLR object created from <paramref name="dbValues"/> that is either <see langword="null"/> or is an
              instance of <see cref="P:Kvasir.Reconstitution.ICreator.ResultType"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Reconstitution.IdentityCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that simply unwraps a <see cref="T:Kvasir.Schema.DBValue">database value</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.IdentityCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.IdentityCreator.#ctor(System.Type)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.IdentityCreator"/>.
            </summary>
            <param name="resultType">
              The <see cref="P:Kvasir.Reconstitution.IdentityCreator.ResultType"/> of the new <see cref="T:Kvasir.Reconstitution.IdentityCreator"/>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.IdentityCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.IMutator">
            <summary>
              The interface describing a component that modifies a CLR object that has already been created by an
              <see cref="T:Kvasir.Reconstitution.ICreator"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.IMutator.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of object acted upon by this <see cref="T:Kvasir.Reconstitution.IMutator"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.IMutator.Mutate(System.Object,System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <summary>
              Modify a CLR object using one or more database values.
            </summary>
            <param name="source">
              The possibly-<see langword="null"/> CLR object to modify.
            </param>
            <param name="dbValues">
              A non-empty, ordered collection of <see cref="T:Kvasir.Schema.DBValue">database values</see>, any of which may be
              <see cref="P:Kvasir.Schema.DBValue.NULL"/>, with which to modify <paramref name="source"/>
            </param>
            <remarks>
              If <paramref name="source"/> is <see langword="null"/>, no modification occurs.
            </remarks>
        </member>
        <member name="T:Kvasir.Reconstitution.IRepopulator">
            <summary>
              The interface describing a component that repopulates a <see cref="T:Kvasir.Relations.IRelation">Relation</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.IRepopulator.Repopulate(Kvasir.Relations.IRelation,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Repopulate a <see cref="T:Kvasir.Relations.IRelation">Relation</see>.
            </summary>
            <param name="relation">
              The <see cref="T:Kvasir.Relations.IRelation">Relation</see> to repopulate.
            </param>
            <param name="elements">
              A possibly empty collection of element to repopulate into <paramref name="relation"/>.
            </param>
        </member>
        <member name="T:Kvasir.Reconstitution.KeyLookupCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that treats its collection of <see cref="T:Kvasir.Schema.DBValue">database values</see> as the
              Primary Key of an Entity and looks that Entity up.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.KeyLookupCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.KeyLookupCreator.#ctor(Kvasir.Reconstitution.KeyMatcher)">
            <summary>
              Create a new <see cref="T:Kvasir.Reconstitution.KeyLookupCreator"/>.
            </summary>
            <param name="lookup">
              The <see cref="T:Kvasir.Reconstitution.KeyMatcher"/> with which to look up Entities.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.KeyLookupCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.KeyMatcher">
            <summary>
              A simple component that enables efficient, cached lookup of Entities by their Primary Key.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.KeyMatcher.ResultType">
            <summary>
              The <see cref="T:System.Type"/> of Entity produced by look-ups on this <see cref="T:Kvasir.Reconstitution.KeyMatcher"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.KeyMatcher.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Object}},Kvasir.Extraction.DataExtractionPlan)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.KeyMatcher"/>.
            </summary>
            <param name="domainGenerator">
              A generator function that produces the collection of possible Entities.
            </param>
            <param name="keyExtractor">
              The <see cref="T:Kvasir.Extraction.DataExtractionPlan"/> describing how to determine the Primary Key of a candidate Entity
              produced by <paramref name="domainGenerator"/>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.KeyMatcher.Lookup(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <summary>
              Find the Entity whose Primary Key matches a collection of <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
            <param name="dbValues">
              The target Primary Key.
            </param>
            <returns>
              The Entity (of type <see cref="P:Kvasir.Reconstitution.KeyMatcher.ResultType"/>) whose Primary Key is <paramref name="dbValues"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Reconstitution.KeyMatcher.ListEqualityComparer">
            <summary>
              An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for lists of <see cref="T:Kvasir.Schema.DBValue">database values</see> that supports
              ordered, member-wise equality.
            </summary>
        </member>
        <member name="T:Kvasir.Reconstitution.ReconstitutingCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that may apply <see cref="T:Kvasir.Reconstitution.IMutator">modifications</see> after creating the bare CLR
              object.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.ReconstitutingCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.ReconstitutingCreator.#ctor(Kvasir.Reconstitution.ICreator,System.Collections.Generic.IEnumerable{Kvasir.Reconstitution.IMutator})">
            <summary>
              Create a new <see cref="T:Kvasir.Reconstitution.ReconstitutingCreator"/>.
            </summary>
            <param name="creator">
              The <see cref="T:Kvasir.Reconstitution.ICreator"/> with which to create the bare CLR object.
            </param>
            <param name="mutators">
              Zero or more <see cref="T:Kvasir.Reconstitution.IMutator"/> to be applied to the CLR object produced by <paramref name="creator"/>
              in the given order.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.ReconstitutingCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.RelationRepopulationPlan">
            <summary>
              A plan that describes how to repopulate a <see cref="T:Kvasir.Relations.IRelation">Relation</see> from a collection of rows of
              <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.RelationRepopulationPlan.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of object on which the <see cref="T:Kvasir.Relations.IRelation">Relation</see> repopulated by this
              <see cref="T:Kvasir.Reconstitution.RelationRepopulationPlan"/> resides.
            </summary>
        </member>
        <member name="M:Kvasir.Reconstitution.RelationRepopulationPlan.#ctor(Kvasir.Extraction.ISingleExtractor,Kvasir.Reconstitution.DataReconstitutionPlan,Kvasir.Reconstitution.IRepopulator)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.RelationRepopulationPlan"/>.
            </summary>
            <param name="relationExtractor">
              The <see cref="T:Kvasir.Extraction.ISingleExtractor"/> that pulls the target <see cref="T:Kvasir.Relations.IRelation">Relation</see>  out of the
              original CLR object.
            </param>
            <param name="elementReconstitutor">
              The <see cref="T:Kvasir.Reconstitution.DataReconstitutionPlan"/> that describes how to reconstitute an element of the
              <see cref="T:Kvasir.Relations.IRelation">Relation</see> for a list of <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </param>
            <param name="repopulator">
              The <see cref="T:Kvasir.Reconstitution.IRepopulator"/> that describes how to repopulate elements into the
              <see cref="T:Kvasir.Relations.IRelation">Relation</see>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.RelationRepopulationPlan.Repopulate(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}})">
            <summary>
              Repopulate a <see cref="T:Kvasir.Relations.IRelation">Relation</see> with a collection of rows of
              <see cref="T:Kvasir.Schema.DBValue">database values</see>.
            </summary>
            <param name="source">
              The object on which the target <see cref="T:Kvasir.Relations.IRelation">Relation</see> resides. If this is
              <see langword="null"/>, no repopulation will be performed.
            </param>
            <param name="dbRows">
              The rows of <see cref="T:Kvasir.Schema.DBValue">database values</see> from which to repopulate the target
              <see cref="T:Kvasir.Relations.IRelation">Relation</see>.
            </param>
        </member>
        <member name="T:Kvasir.Reconstitution.RevertingCreator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.ICreator"/> that executes a <see cref="T:Cybele.Core.DataConverter"/> after creating an object.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.RevertingCreator.ResultType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.RevertingCreator.#ctor(Kvasir.Reconstitution.ICreator,Cybele.Core.DataConverter)">
            <summary>
              Create a new <see cref="T:Kvasir.Reconstitution.RevertingCreator"/>.
            </summary>
            <param name="creator">
              The <see cref="T:Kvasir.Reconstitution.ICreator"/> that produces the unreverted value.
            </param>
            <param name="reverter">
              The <see cref="T:Cybele.Core.DataConverter"/> to run over the value produced by <paramref name="creator"/>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.RevertingCreator.CreateFrom(System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Reconstitution.WritePropertyMutator">
            <summary>
              An <see cref="T:Kvasir.Reconstitution.IMutator"/> that writes a value to a property via reflection.
            </summary>
        </member>
        <member name="P:Kvasir.Reconstitution.WritePropertyMutator.SourceType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Reconstitution.WritePropertyMutator.#ctor(System.Reflection.PropertyInfo,Kvasir.Reconstitution.ICreator)">
            <summary>
              Construct a new <see cref="T:Kvasir.Reconstitution.WritePropertyMutator"/>.
            </summary>
            <param name="property">
              The property to which to write a value.
            </param>
            <param name="valueCreator">
              The <see cref="T:Kvasir.Reconstitution.ICreator"/> with which to create the value to write to <paramref name="property"/>.
            </param>
        </member>
        <member name="M:Kvasir.Reconstitution.WritePropertyMutator.Mutate(System.Object,System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.IRelation">
            <summary>
              The internal framework interface denoting a custom collection type that serves as a one-to-many relation.
            </summary>
        </member>
        <member name="P:Kvasir.Relations.IRelation.ConnectionType">
            <summary>
              The type of the Relation connection (the "many" in the one-to-many).
            </summary>
            <remarks>
              A few notes about this. We need something that is <see langword="static"/> so that we can access its value
              via reflection when holding just the type, which is the situation we find ourself in when doing
              Translation. However, for mocking purposes, we also need to be able to use <see cref="T:Kvasir.Relations.IRelation"/> as a
              generic type parameter, which we cannot do if this property were <see langword="abstract"/>. We therefore
              make it regular <see langword="virtual"/> with an error-throwing base implementation. While this isn't
              ideal (technically, an implementation could choose not to override the base functionality), it's not a
              huge deal because the property is <c>internal</c>, and we can write exhaustive tests for the
              implementations authored within Kvasir itself.
            </remarks>
        </member>
        <member name="M:Kvasir.Relations.IRelation.Canonicalize">
            <summary>
              Updates the internal state tracking to reflect the Relation being fully synchronized with the back-end
              relational database.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.IRelation.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the connections that are tracked by this Relation, including
              those that have been deleted fro it.
            </summary>
            <remarks>
              The order in which connections are exposed by this method is only softly defined. Any connections that
              have been <see cref="F:Kvasir.Relations.Status.Deleted">deleted</see> since the last
              <see cref="M:Kvasir.Relations.IRelation.Canonicalize">canonicalization</see> will be exposed first, followed by all
              <see cref="F:Kvasir.Relations.Status.New">new</see> and <see cref="F:Kvasir.Relations.Status.Saved">saved</see> ones (which may be interspersed
              together). Within the two groupings, the relative order of connections is undefined. No connection will
              more than once, and implementations are encouraged to ensure that repeated enumerations of the same
              Relation without intervening changes produce the same sequence of items.
            </remarks>
            <returns>
              An enumerator that iterates over the connections that are tracked by this Relation.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.IRelation.Repopulate(System.Object)">
            <summary>
              Places an item into the collection in the <see cref="F:Kvasir.Relations.Status.Saved">saved</see> state.
            </summary>
            <remarks>
              This method is intended to be used when reconstituting an <see cref="T:Kvasir.Relations.IRelation"/> from values stored in
              a back-end database. Its method is intentionally different than any common API for adding items into a
              collection to prevent unintentional ambiguity.
            </remarks>
            <param name="item">
              The item to repopulate into the <see cref="T:Kvasir.Relations.IRelation"/>.
            </param>
            <pre>
              <see cref="P:Kvasir.Relations.IRelation.ConnectionType"/> is the dynamic type of <paramref name="item"/>
                --and--
              There is otherwise no reason that <paramref name="item"/> cannot be added into the
              <see cref="T:Kvasir.Relations.IRelation"/>.
            </pre>
        </member>
        <member name="T:Kvasir.Relations.RelationList`1">
            <summary>
              An ordered collection that tracks the state of its elements for interaction with a back-end database.
            </summary>
            <remarks>
              <para>
                A <see cref="T:Kvasir.Relations.RelationList`1"/> implements the same interfaces as and behaves identically to a standard
                <see cref="T:System.Collections.Generic.List`1"/> collection. Operations that mutate the collection are used to track changes that can
                then be reflected in a back-end database, while view- or read-only operations have no additional side
                effects. Converting a <see cref="T:Kvasir.Relations.RelationList`1"/> into another collection type, such as through a member
                API (e.g. <see cref="M:Kvasir.Relations.RelationList`1.CopyTo(`0[])"/>) or LINQ, drops the change tracking capabilities.
              </para>
              <para>
                Every item in a <see cref="T:Kvasir.Relations.RelationList`1"/> is in one of three state: <c>NEW</c>, <c>SAVED</c>, or
                <c>DELETED</c>. Each state corresponds to the action or actions that should be taken with respect to that
                item to synchronize the back-end database table corresponding to the relation. An item enters the
                <c>NEW</c> state when it is first added; when the collection is canonicalized, each <c>NEW</c> item
                transitions to the <c>SAVED</c> state, indicating that it does not need to be written to the database on
                the next write. When a <c>SAVED</c> item is removed from the collection, it transitions to the
                <c>DELETED</c> state; <c>NEW</c> items do not transition to <c>DELETED</c>. Note that if a <c>SAVED</c>
                item is deleted and then re-added, it will be re-added in the <c>SAVED</c> state.
              </para>
              <para>
                Items used in a <see cref="T:Kvasir.Relations.RelationList`1"/> should be immutable: structs, <see cref="T:System.String"/>, etc. This
                is because read access is <i>not</i> tracked: when using mutable elements, it is possible for the user to
                access an item (e.g. through <c>[]</c>) and mutate that element without the collection knowing, preventing
                that change from being reflected in the back-end database. This also means that actions that convert the
                collection into another form will <i>copy</i> the elements, ensuring that the tracking data remains
                up-to-date.
              </para>
              <para>
                A <see cref="T:Kvasir.Relations.RelationList`1"/> technically permits duplicate elements, though it is strongly advised that
                users treat the collection as more of an ordered set, as the back-end relational database table will
                not permit duplicates. For example, it is possible for the collection to expose a single item in multiple
                seemingly incompatible states (e.g. <c>SAVED</c> and <c>DELETED</c>). Though different search APIs enable
                the use of custom comparators, the internal comparison logic always uses the default comparison.
              </para>
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
            <seealso cref="T:Kvasir.Relations.RelationSet`1"/>
            <seealso cref="T:Kvasir.Relations.RelationMap`2"/>
            <seealso cref="T:Kvasir.Relations.RelationOrderedList`1"/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.Capacity">
            <summary>
              Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <value>
              The number of elements that the <see cref="T:Kvasir.Relations.RelationList`1"/> can contain before resizing is required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <see cref="P:Kvasir.Relations.RelationList`1.Capacity"/> is set to a value that is less than <see cref="P:Kvasir.Relations.RelationList`1.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
              if there is not enough memory available on the system.
            </exception>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationList`1"/> class that is empty and has the default
              initial capacity.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationList`1"/> class that contains elements copied from
              the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">
              The element whose names are copied to the new list.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationList`1"/> class that is empty and has the specified
              initial capacity.
            </summary>
            <param name="capacity">
              The number of elements that the new list can initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Adds the elements of the specified collection to the end of the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="collection">
              The collection whose elements should be added to the end of the <see cref="T:Kvasir.Relations.RelationList`1"/>. The
              collection itself cannot be <see langword="null"/>, but it can contain elements that are
              <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.AsReadOnly">
            <summary>
              Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the current collection.
            </summary>
            <returns>
              An object that acts as a read-only wrapper around the current <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.BinarySearch(`0)">
            <summary>
              Searches the entire sorted <see cref="T:Kvasir.Relations.RelationList`1"/> for an element using the default comparer and
              returns the zero-based index of the element.
            </summary>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the new element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              if the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the
              <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type
              <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.BinarySearch(`0,System.Collections.Generic.Comparer{`0})">
            <summary>
              Searches the entire sorted <see cref="T:Kvasir.Relations.RelationList`1"/> for an element using the specified comparer and
              returns the zero-based index of the element.
            </summary>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements; or, <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the next element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for the type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.Comparer{`0})">
            <summary>
              Searches a range of elements in the sorted <see cref="T:Kvasir.Relations.RelationList`1"/> for an element using the
              specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">
              The zero-based starting index of the range to search.
            </param>
            <param name="count">
              The length of the range to search.
            </param>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the next element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationList`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="item"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
              Converts the elements in the current <see cref="T:Kvasir.Relations.RelationList`1"/> to another type, and returns a list
              containing the converted elements.
            </summary>
            <typeparam name="TOutput">
              The type of the elements of the target array.
            </typeparam>
            <param name="converter">
              A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another
              type.
            </param>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted elements from the current
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.CopyTo(`0[])">
            <summary>
              Copies the entire <see cref="T:Kvasir.Relations.RelationList`1"/> to a compatible one-dimensional array, starting at the
              beginning of the target array.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentException">
              if the number of elements in the source <see cref="T:Kvasir.Relations.RelationList`1"/> is greater than the number of
              elements that the destination <paramref name="array"/> can contain.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Copies a range of elements from the <see cref="T:Kvasir.Relations.RelationList`1"/> to a compatible one-dimensional array,
              starting at the specified index of the target array.
            </summary>
            <param name="index">
              The zero-based index in the source <see cref="T:Kvasir.Relations.RelationList`1"/> at which copying begins.
            </param>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">
              The number of elements to copy.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="arrayIndex"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> is equal to or greater than the <see cref="P:Kvasir.Relations.RelationList`1.Count"/> of the source
              <see cref="T:Kvasir.Relations.RelationList`1"/>
                --or--
              if the number of elements from <paramref name="index"/> to the end of the source
              <see cref="T:Kvasir.Relations.RelationList`1"/> is greater than the available space from <paramref name="arrayIndex"/> to
              the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Exists(System.Predicate{`0})">
            <summary>
              Determines whether the <see cref="T:Kvasir.Relations.RelationList`1"/> contains elements that match the conditions defined
              by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              <see langword="true"/> if the <see cref="T:Kvasir.Relations.RelationList`1"/> contains one or more elements that match the
              conditions defined by the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Find(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              first occurrence within the entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The first element that matches the condition defined by the specified predicate, if found; otherwise, the
              default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindAll(System.Predicate{`0})">
            <summary>
              Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified
              predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindIndex(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns> 
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               if <paramref name="startIndex"/> is outside the range of valid indexes for the
               <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationList`1"/> that starts at the specified index and contains the specified number of
              elements.
            </summary>
            <param name="startIndex">
               The zero-based starting index of the search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               if <paramref name="startIndex"/> is outside the range of valid indexes for the
               <see cref="T:Kvasir.Relations.RelationList`1"/>
                 --or--
               if <paramref name="count"/> is less than <c>0</c>
                 --or--
               if <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the
               <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindLast(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              last occurrence within the entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The last element that matches the conditions defined by the specified predicate, if found; otherwise, the
              default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/>
              that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="startIndex"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/>
              that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="startIndex"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.ForEach(System.Action{`0})">
            <summary>
              Performs the specified action on each element of the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="action">
              The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              if an element in the collection has been modified.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.GetRange(System.Int32,System.Int32)">
            <summary>
              Creates a shallow copy of a range of elements in the source <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="index">
              The zero-based <see cref="T:Kvasir.Relations.RelationList`1"/> index at which the range stats.
            </param>
            <param name="count">
              The number of elements in the range.
            </param>
            <returns>
              A shallow copy of a range of elements in the source <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.IndexOf(`0,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the first occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/> that extends from the specified index to the last
              element.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationList`1"/>. The value can be <see langword="null"/> for
              reference types.
            </param>
            <param name="index">
              The zero-based starting index of the search. <c>0</c> (zero) is valid in an empty list.
            </param>
            <returns>
              The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationList`1"/> that extends from <paramref name="index"/> to the last element, if
              found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the first occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/> that starts at the specified index and contains
              the specified number of elements.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationList`1"/>. The value can be <see langword="null"/> for
              reference types.
            </param>
            <param name="index">
              The zero-based starting index of the search. <c>0</c> (zero) is valid in an empty list.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <returns>
              The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationList`1"/> that starts at <paramref name="index"/> and contains
              <paramref name="count"/> number of elements, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes of the <see cref="T:Kvasir.Relations.RelationList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Inserts the elements of a collection into the <see cref="T:Kvasir.Relations.RelationList`1"/> at the specified index.
            </summary>
            <param name="index">
              The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
              The collection whose elements should be inserted into the <see cref="T:Kvasir.Relations.RelationList`1"/>. The collection
              itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/> if
              type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> is greater than <see cref="P:Kvasir.Relations.RelationList`1.Count"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.LastIndexOf(`0)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationList`1"/>. The value can be <see langword="null"/> for
              reference types.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the entire
              <see cref="T:Kvasir.Relations.RelationList`1"/>, if found; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.LastIndexOf(`0,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/> that extends from the first element to the
              specified index.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationList`1"/>. The value can be <see langword="null"/> for
              reference types.
            </param>
            <param name="index">
              The zero-based starting index of the backward search.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationList`1"/> that extends from the first element to <paramref name="index"/>, if
              found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/> that contains the specified number of elements and
              ends at the specified index.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationList`1"/>. The value can be <see langword="null"/> for
              reference types.
            </param>
            <param name="index">
              The zero-based starting index of the backward search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationList`1"/> that contains <paramref name="count"/> number of elements and ends at
              <paramref name="index"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Kvasir.Relations.RelationList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.RemoveAll(System.Predicate{`0})">
            <summary>
              Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.
            </param>
            <returns>
              The number of elements removed from the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
              Removes a range of elements from the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <param name="index">
              The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
              The number of elements to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Reverse">
            <summary>
              Reverses the order of the elements in the entire <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Reverse(System.Int32,System.Int32)">
            <summary>
              Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">
              The zero-based staring index of the range to reverse.
            </param>
            <param name="count">
              The number of elements in the range to reverse.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Sort">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationList`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              if the default comparer <see cref="F:System.Collections.Comparer.Default"/> cannot find an implementation of the
              <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type
              <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Sort(System.Comparison{`0})">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationList`1"/> using the specified
              <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
              The <see cref="T:System.Comparison`1"/> to use when comparing elements.
            </param>
            <exception cref="T:System.ArgumentException">
              The implementation of <paramref name="comparison"/> caused an error during the sort. For example,
              <paramref name="comparison"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if the implementation of <paramref name="comparer"/> caused an error during the sort. For example,
              <paramref name="comparer"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
              Sorts the elements in a range of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/> using the specified
              comparer.
            </summary>
            <param name="index">
              The zero-based starting index of the range to sort.
            </param>
            <param name="count">
              The length of the range to sort.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid range in the
              <see cref="T:Kvasir.Relations.RelationList`1"/>
                --or--
              if the implementation of <paramref name="comparer"/> caused an error during the sort. For example,
              <paramref name="comparer"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.ToArray">
            <summary>
              Copies the elements of the <see cref="T:Kvasir.Relations.RelationList`1"/> to a new array.
            </summary>
            <returns>
              An array containing copies of the elements of the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.TrimExcess">
            <summary>
              Sets the capacity to the actual number of elements in the <see cref="T:Kvasir.Relations.RelationList`1"/>, if that number
              is less than a threshold value.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.TrueForAll(System.Predicate{`0})">
            <summary>
              Determines whether every element in the <see cref="T:Kvasir.Relations.RelationList`1"/> matches the conditions defined by
              the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.
            </param>
            <returns>
              <see langword="true"/> if every element in the <see cref="T:Kvasir.Relations.RelationList`1"/> matches the conditions
              defined by the specified predicate; otherwise, <see langword="false"/>. If the list contains no elements,
              the return value is <see langword="true"/>.
            </returns>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Kvasir#Relations#IRelation#Canonicalize">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Kvasir#Relations#IRelation#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.Kvasir#Relations#IRelation#Repopulate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.BookkeepAddition(`0)">
            <summary>
              Removes an item from the deletions of the current <see cref="T:Kvasir.Relations.RelationList`1"/> if it's there, and
              determines the status of a to-be-added item.
            </summary>
            <remarks>
              Note that this method does <i>NOT</i> add put the item into the collection. This method is viable for any
              form of addition: insertions, overwrites, and appends. If the deletions contains multiple copies of the
              item, only one instance is removed.
            </remarks>
            <param name="addition">
              The item that is being added to the <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </param>
            <returns>
              The <see cref="T:Kvasir.Relations.Status"/> of the item being added: either <see cref="F:Kvasir.Relations.Status.New"/> if the item was not
              deleted from the <see cref="T:Kvasir.Relations.RelationList`1"/> since the last canonicalization, or
              <see cref="F:Kvasir.Relations.Status.Deleted"/> if the item is currently marked for deletion.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationList`1.BookkeepRemoval(System.Int32)">
            <summary>
              Updates the internal set of deletions with the item at a particular index if the item at that index is
              currently in the <see cref="F:Kvasir.Relations.Status.Saved"/> state. Otherwise, this method has no impact.
            </summary>
            <param name="removalIndex">
              The index of the item in the <see cref="T:Kvasir.Relations.RelationList`1"/> to be removed.
            </param>
        </member>
        <member name="T:Kvasir.Relations.IReadOnlyRelationList`1">
            <summary>
              An interface denoting a read-only view over a <see cref="T:Kvasir.Relations.RelationList`1"/>.
            </summary>
            <remarks>
              This interface is intended to allow class authors to expose a relation through a read-only property while
              controlling mutating operations on the underlying relation via member functions. Users would call, e.g., an
              insertion function that essentially "intercepts" the call to the underlying collection's mutator, permitting
              validation or ordering or logging or any other custom behavior.
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
        </member>
        <member name="P:Kvasir.Relations.IReadOnlyRelationList`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.RelationMap`2">
            <summary>
              A collection that tracks the state of its key-value mappings for interaction with a back-end database.
            </summary>
            <remarks>
              <para>
                A <see cref="T:Kvasir.Relations.RelationMap`2"/> implements the same interfaces as and behaves identically to a
                standard <see cref="T:System.Collections.Generic.Dictionary`2"/> collection. Operations that mutate the collection are used
                to track changes that can then be reflected in a back-end database, while view- or read-only operations
                have no additional side effects. Converting a <see cref="T:Kvasir.Relations.RelationMap`2"/> into another
                collection, such as through a member API or LINQ, drops the change tracking capabilities.
              </para>
              <para>
                Every key-value pair in a <see cref="T:Kvasir.Relations.RelationMap`2"/> is in one of three states: <c>NEW</c>,
                <c>SAVED</c>, or <c>DELETED</c>. Each state corresponds to the action or actions that should be taken with
                respect to that item to synchronize the back-end database table corresponding to the relation. An item
                enters the <c>NEW</c> state when it is first added; when the collection is canonicalized, each <c>NEW</c>
                item transitions to the <c>SAVED</c> state, indicating that it does not need to be written to the database
                on the next write. When a <c>SAVED</c> item is removed from the collection, it transitions to the
                <c>DELETED</c> state; <c>NEW</c> items do not transition to <c>DELETED</c>. Note that if a <c>SAVED</c>
                item is deleted and then re-added, it will be re-added in the <c>SAVED</c> state.
              </para>
              <para>
                The <see cref="T:Kvasir.Relations.RelationMap`2"/> does not support the <c>MODIFIED</c> state; instead, each
                key-value pair is treated as its own unit. This means that changing the value mapped to by an existing key
                results in two separate operations in the back-end database: first a removal of the old key-value pair,
                then an insertion of the new one. This behavior <i>may</i> change in the future, so clients should not rely
                on it. The guarantee, however, is that Kvasir will properly respond to an overwrite by ensuring that the
                resulting back-end database contains only the new key-value pair.
              </para>
              <para>
                Items used for the value in a <see cref="T:Kvasir.Relations.RelationMap`2"/> should be immutable: structs,
                <see cref="T:System.String"/>, etc. This is because read access is <i>not</i> tracked: when using mutable values,
                it is possible for the user to access an item (e.g. through <c>operator[]</c>) and mutate that value
                without the collection knowing, preventing the change from being reflected in the back-end database. This
                also means that actions that convert the collection into another form will <i>copy</i> the elements,
                ensuring that the tracing data remains up-to-date.
              </para>
              <para>
                A <see cref="T:Kvasir.Relations.RelationMap`2"/> does not permit duplicate keys, but it does support duplicate
                values.
              </para>
            </remarks>
            <typeparam name="TKey">
              The type of the key of the collection's key-value pairs.
            </typeparam>
            <typeparam name="TValue">
              The type of the value of the collection's key-value pairs.
            </typeparam>
            <seealso cref="T:Kvasir.Relations.RelationList`1"/>
            <seealso cref="T:Kvasir.Relations.RelationSet`1"/>
            <seealso cref="T:Kvasir.Relations.RelationOrderedList`1"/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Comparer">
            <summary>
              Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality of keys for the
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <value>
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality of keys for the
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </value>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Keys">
            <summary>
              Gets a collection containing the keys in the <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <value>
              A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> containing the keys in the
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </value>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Values">
            <summary>
              Gets a collection containing the keys in the <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <value>
              A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> containing the values in the
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </value>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that is empty, has the
              default initial capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that is empty, has the
              default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that contains elements
              copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and use the default equality comparer
              for the key type.
            </summary>
            <param name="dictionary">
              The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </param>
            <exception cref="T:System.ArgumentException">
              if <paramref name="dictionary"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that contains elements
              copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified
              <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="dictionary">
              The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new
              <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentException">
              if <paramref name="dictionary"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that contains elements
              copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="collection">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </param>
            <exception cref="T:System.ArgumentException">
              if <paramref name="collection"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that contains elements
              copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> and uses the specified
              <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="collection">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new
              <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentException">
              if <paramref name="collection"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that is empty, has the
              specified initial capacity, and uses the default equality comparer for the key type.
            </summary>
            <param name="capacity">
              The initial number of elements that the <see cref="T:Kvasir.Relations.RelationMap`2"/> can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="capacity"/> is less than <c>0</c>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationMap`2"/> class that is empty, has the
              specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">
              The initial number of elements that the <see cref="T:Kvasir.Relations.RelationMap`2"/> can contain.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.ContainsValue(`1)">
            <summary>
              Determines whether the <see cref="T:Kvasir.Relations.RelationMap`2"/> contains a specific value.
            </summary>
            <param name="value">
              The value to locate in the <see cref="T:Kvasir.Relations.RelationMap`2"/>. The value can be
              <see langword="null"/> for nullable reference types.
            </param>
            <returns>
              <see langword="true"/> if the <see cref="T:Kvasir.Relations.RelationMap`2"/> contains an element with the
              specified value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> object for the <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Remove(`0,`1@)">
            <summary>
              Removes the value with the specified key from the <see cref="T:Kvasir.Relations.RelationMap`2"/>, and copies
              the element to the <paramref name="value"/> parameter.
            </summary>
            <param name="key">
              The key of the element to remove.
            </param>
            <param name="value">
              The removed element.
            </param>
            <returns>
              <see langword="true"/> if the element is successfully found and removed; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.TrimExcess">
            <summary>
              Sets the capacity of this <see cref="T:Kvasir.Relations.RelationMap`2"/> to what it would be if it had
              originally been initialized with all its entries.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.TrimExcess(System.Int32)">
            <summary>
              Sets the capacity of this <see cref="T:Kvasir.Relations.RelationMap`2"/> to hold up to a specified number of
              entries without further expansion of its backing storage.
            </summary>
            <param name="capacity">
              The new capacity.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="capacity"/> is less than the size of the <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.TryAdd(`0,`1)">
            <summary>
              Attempts to add the specific key and value to the <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <param name="key">
              The key of the element to add.
            </param>
            <param name="value">
              The value of the element to add. It can be <see langword="null"/> for nullable reference types.
            </param>
            <returns>
              <see langword="true"/> if the key/value pair was added to the <see cref="T:Kvasir.Relations.RelationMap`2"/>;
              otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.TryGetValue(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            <param name="key">
              The key of the value to get.
            </param>
            <param name="value">
              When this method returns, contains the value associated with the specified key, if the key is found;
              otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is
              passed uninitialized.
            </param>
            <returns>
              <see langword="true"/> if the <see cref="T:Kvasir.Relations.RelationMap`2"/> contains an element with the
              specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Values">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationMap`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Kvasir#Relations#IRelation#Canonicalize">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Kvasir#Relations#IRelation#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationMap`2.Kvasir#Relations#IRelation#Repopulate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.IReadOnlyRelationMap`2">
            <summary>
              An interface denoting a read-only view over a <see cref="T:Kvasir.Relations.RelationMap`2"/>.
            </summary>
            <remarks>
              This interface is intended to allow class authors to expose a relation through a read-only property while
              controlling mutating operations on the underlying relation via member functions. Users would call, e.g., an
              insertion function that essentially "intercepts" the call to the underlying collection's mutator, permitting
              validation or ordering or logging or any other custom behavior.
            </remarks>
            <typeparam name="TKey">
              The type of the key of the collection's key-value pairs.
            </typeparam>
            <typeparam name="TValue">
              The type of the value of the collection's key-value pairs.
            </typeparam>
        </member>
        <member name="P:Kvasir.Relations.IReadOnlyRelationMap`2.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.RelationOrderedList`1">
            <summary>
              An ordered collection that tracks the state of its elements, including positional movements, for interaction
              with a back-end database.
            </summary>
            <remarks>
              <para>
                A <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> implements the same interfaces and behave identically to a standard
                <see cref="T:System.Collections.Generic.List`1"/> collection. Operations that mutate the collection are used to track change that can
                then be reflected in a back-end database, while view- or read-only operations have no additional side
                effects. Converting a <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> into another collection type, such as through a
                member API (e.g. <see cref="M:Kvasir.Relations.RelationOrderedList`1.CopyTo(`0[])"/> or LINQ, drops the change tracking capabilities.
              </para>
              <para>
                Every item in a <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> is one of four states: <c>NEW</c>, <c>SAVED</c>,
                <c>MODIFIED</c>, or <c>DELETED</c>. Each state corresponds to the action or actions that should be taken
                with respect to that item to synchronize the back-end database table corresponding to the relation. Items in
                a <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> are identified by their positional index, unlike in a
                <see cref="T:Kvasir.Relations.RelationList`1"/> where the items are self-identified. An item enters the <c>NEW</c> state when
                it is first added (i.e. at a brand new position); when the collection is canonicalized, each <c>NEW</c> item
                transitions to the <c>SAVED</c> state, indicating that it does not need to be written to the database on the
                next write. When a <c>SAVED</c> item is changed, the item transitions to the <c>MODIFIED</c> state, which
                goes through the same transitions on write. When a <c>SAVED</c> or <c>MODIFIED</c> item is removed from the
                collection, it causes everything at larger indices to shift downward, forcing them all into the
                <c>MODIFIED</c> state; items for indices that are vacated then transition to the <c>DELETED</c> state.
                (<c>NEW</c> items never transition to <c>MODIFIED</c> or to <c>DELETED</c>.) Note that if a <c>SAVED</c>
                item is changed and then changed back, it will revert to the <c>SAVED</c> state; the same goes if a
                <c>SAVED</c> item is deleted and then re-added at the same index.
              </para>
              <para>
                Items used in a <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> should be immutable: structs, <see cref="T:System.String"/>,
                etc. This is because read access is <i>not</i> tracked: when using mutable elements it is possible for the
                user to access an item (e.g. through <c>[]</c>) and mutate that element without the collection knowing,
                preventing that change from being reflected in the back-end database. This also means that actions that
                convert the collection into another form will <c>copy</c> the elements, ensuring that the tracking data
                remains up-to-date.
              </para>
              <para>
                A <see cref="T:Kvasir.Relations.IReadOnlyRelationOrderedList`1"/> allows duplicate values, since items are uniquely identified
                by their index, which cannot be occupied by more than one element.
              </para>
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
            <seealso cref="T:Kvasir.Relations.RelationList`1"/>
            <seealso cref="T:Kvasir.Relations.RelationSet`1"/>
            <seealso cref="T:Kvasir.Relations.RelationMap`2"/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.Capacity">
            <summary>
              Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <value>
              The number of elements that the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> can contain before resizing is
              required.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <see cref="P:Kvasir.Relations.RelationOrderedList`1.Capacity"/> is set to a value that is less than <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
              if there is not enough memory available on the system.
            </exception>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> class that is empty and has the
              default initial capacity.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> class that contains elements copied
              from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">
              The element whose names are copied to the new list.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> class that is empty and has the
              specified initial capacity.
            </summary>
            <param name="capacity">
              The number of elements that the new list can initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Adds the elements of the specified collection to the end of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="collection">
              The collection whose elements should be added to the end of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The
              collection itself cannot be <see langword="null"/>, but it can contain elements that are
              <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.AsReadOnly">
            <summary>
              Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the current collection.
            </summary>
            <returns>
              An object that acts as a read-only wrapper around the current <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.BinarySearch(`0)">
            <summary>
              Searches the entire sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> for an element using the default comparer
              and returns the zero-based index of the element.
            </summary>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the new element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              if the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the
              <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type
              <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.BinarySearch(`0,System.Collections.Generic.Comparer{`0})">
            <summary>
              Searches the entire sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> for an element using the specified
              comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements; or, <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the next element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for the type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.Comparer{`0})">
            <summary>
              Searches a range of elements in the sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> for an element using the
              specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">
              The zero-based starting index of the range to search.
            </param>
            <param name="count">
              The length of the range to search.
            </param>
            <param name="item">
              The object to locate. The value can be <see langword="null"/> for reference types.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
              The zero-based index of <paramref name="item"/> in the sorted <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>, if
              <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the
              index of the next element that is larger than <paramref name="item"/> or, if there is no larger element,
              the bitwise complement of <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="item"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
              Converts the elements in the current <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> to another type, and returns a
              list containing the converted elements.
            </summary>
            <typeparam name="TOutput">
              The type of the elements of the target array.
            </typeparam>
            <param name="converter">
              A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another
              type.
            </param>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted elements from the current
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.CopyTo(`0[])">
            <summary>
              Copies the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> to a compatible one-dimensional array, starting at
              the beginning of the target array.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentException">
              if the number of elements in the source <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> is greater than the number of
              elements that the destination <paramref name="array"/> can contain.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
              Copies a range of elements from the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> to a compatible one-dimensional
              array, starting at the specified index of the target array.
            </summary>
            <param name="index">
              The zero-based index in the source <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> at which copying begins.
            </param>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">
              The number of elements to copy.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="arrayIndex"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> is equal to or greater than the <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/> of the source
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                --or--
              if the number of elements from <paramref name="index"/> to the end of the source
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> is greater than the available space from
              <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Exists(System.Predicate{`0})">
            <summary>
              Determines whether the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> contains elements that match the conditions
              defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              <see langword="true"/> if the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> contains one or more elements that
              match the conditions defined by the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Find(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              first occurrence within the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The first element that matches the condition defined by the specified predicate, if found; otherwise, the
              default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindAll(System.Predicate{`0})">
            <summary>
              Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified
              predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindIndex(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns> 
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               if <paramref name="startIndex"/> is outside the range of valid indexes for the
               <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the first occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that starts at the specified index and contains the specified number
              of elements.
            </summary>
            <param name="startIndex">
               The zero-based starting index of the search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.
            </param>
            <returns>
              The zero-based index of the first occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               if <paramref name="startIndex"/> is outside the range of valid indexes for the
               <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                 --or--
               if <paramref name="count"/> is less than <c>0</c>
                 --or--
               if <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the
               <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindLast(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              last occurrence within the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The last element that matches the conditions defined by the specified predicate, if found; otherwise, the
              default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="startIndex"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
              Searches for an element that matches the conditions defined by the specified predicate, and returns the
              zero-based index of the last occurrence within the range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that contains the specified number of elements and ends at the
              specified index.
            </summary>
            <param name="startIndex">
              The zero-based starting index of the backward search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.
            </param>
            <returns>
              The zero-based index of the last occurrence of an element that matches the conditions defined by
              <paramref name="match"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="startIndex"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.ForEach(System.Action{`0})">
            <summary>
              Performs the specified action on each element of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="action">
              The <see cref="T:System.Action`1"/> delegate to perform on each element of the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              if an element in the collection has been modified.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.GetRange(System.Int32,System.Int32)">
            <summary>
              Creates a shallow copy of a range of elements in the source <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="index">
              The zero-based <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> index at which the range stats.
            </param>
            <param name="count">
              The number of elements in the range.
            </param>
            <returns>
              A shallow copy of a range of elements in the source <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.IndexOf(`0,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the first occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from the specified index to the
              last element.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The value can be <see langword="null"/>
              for reference types.
            </param>
            <param name="index">
              The zero-based starting index of the search. <c>0</c> (zero) is valid in an empty list.
            </param>
            <returns>
              The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from <paramref name="index"/> to the last element,
              if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the first occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that starts at the specified index and
              contains the specified number of elements.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The value can be <see langword="null"/>
              for reference types.
            </param>
            <param name="index">
              The zero-based starting index of the search. <c>0</c> (zero) is valid in an empty list.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <returns>
              The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that starts at <paramref name="index"/> and contains
              <paramref name="count"/> number of elements, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes of the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Inserts the elements of a collection into the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> at the specified index.
            </summary>
            <param name="index">
              The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
              The collection whose elements should be inserted into the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The
              collection itself cannot be <see langword="null"/>, but it can contain elements that are
              <see langword="null"/> if type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> is greater than <see cref="P:Kvasir.Relations.RelationOrderedList`1.Count"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.LastIndexOf(`0)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The value can be <see langword="null"/>
              for reference types.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the entire
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>, if found; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.LastIndexOf(`0,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from the first element to the
              specified index.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The value can be <see langword="null"/>
              for reference types.
            </param>
            <param name="index">
              The zero-based starting index of the backward search.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that extends from the first element to <paramref name="index"/>,
              if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
              Searches for the specified object and returns the zero-based index of the last occurrence within the
              range of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that contains the specified number of
              elements and ends at the specified index.
            </summary>
            <param name="item">
              The object to locate in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>. The value can be <see langword="null"/>
              for reference types.
            </param>
            <param name="index">
              The zero-based starting index of the backward search.
            </param>
            <param name="count">
              The number of elements in the section to search.
            </param>
            <returns>
              The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in
              the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> that contains <paramref name="count"/> number of elements and
              ends at <paramref name="index"/>, if found; otherwise, <c>-1</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is outside the range of valid indexes for the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                --or--
              if <paramref name="count"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
              Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.
            </param>
            <returns>
              The number of elements removed from the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
              Removes a range of elements from the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <param name="index">
              The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
              The number of elements to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Reverse">
            <summary>
              Reverses the order of the elements in the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Reverse(System.Int32,System.Int32)">
            <summary>
              Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">
              The zero-based staring index of the range to reverse.
            </param>
            <param name="count">
              The number of elements in the range to reverse.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Sort">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              if the default comparer <see cref="F:System.Collections.Comparer.Default"/> cannot find an implementation of the
              <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type
              <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Sort(System.Comparison{`0})">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> using the specified
              <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
              The <see cref="T:System.Comparison`1"/> to use when comparing elements.
            </param>
            <exception cref="T:System.ArgumentException">
              The implementation of <paramref name="comparison"/> caused an error during the sort. For example,
              <paramref name="comparison"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
              Sorts the elements in the entire <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if the implementation of <paramref name="comparer"/> caused an error during the sort. For example,
              <paramref name="comparer"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
              Sorts the elements in a range of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> using the specified
              comparer.
            </summary>
            <param name="index">
              The zero-based starting index of the range to sort.
            </param>
            <param name="count">
              The length of the range to sort.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
              to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="index"/> and <paramref name="count"/> do not specify a valid range in the
              <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>
                --or--
              if the implementation of <paramref name="comparer"/> caused an error during the sort. For example,
              <paramref name="comparer"/> might not return <c>0</c> when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="comparer"/> is <see langword="null"/>, and the default comparer
              <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
              generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.ToArray">
            <summary>
              Copies the elements of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> to a new array.
            </summary>
            <returns>
              An array containing copies of the elements of the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.TrimExcess">
            <summary>
              Sets the capacity to the actual number of elements in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>, if that
              number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.TrueForAll(System.Predicate{`0})">
            <summary>
              Determines whether every element in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> matches the conditions
              defined by the specified predicate.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.
            </param>
            <returns>
              <see langword="true"/> if every element in the <see cref="T:Kvasir.Relations.RelationOrderedList`1"/> matches the conditions
              defined by the specified predicate; otherwise, <see langword="false"/>. If the list contains no elements,
              the return value is <see langword="true"/>.
            </returns>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Kvasir#Relations#IRelation#Canonicalize">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Kvasir#Relations#IRelation#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.Kvasir#Relations#IRelation#Repopulate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationOrderedList`1.StatusOf(System.Int32)">
            <summary>
              Determine the <see cref="T:Kvasir.Relations.Status"/> of the element at a given index.
            </summary>
            <param name="index">
              The target index.
            </param>
            <returns>
              The <see cref="T:Kvasir.Relations.Status"/> of the element at position <paramref name="index"/>, which is guaranteed to be
              one of <see cref="F:Kvasir.Relations.Status.New"><c>NEW</c></see>, <see cref="F:Kvasir.Relations.Status.Saved"><c>SAVED</c></see>, or
              <see cref="F:Kvasir.Relations.Status.Modified"><c>MODIIFED</c></see>.
            </returns>
        </member>
        <member name="T:Kvasir.Relations.IReadOnlyRelationOrderedList`1">
            <summary>
              An interface denoting a read-only view over a <see cref="T:Kvasir.Relations.RelationOrderedList`1"/>.
            </summary>
            <remarks>
              This interface is intended to allow class authors to expose a relation through a read-only property while
              controlling mutating operations on the underlying relation via member functions. Users would call, e.g., an
              insertion function that essentially "intercepts" the call to the underlying collection's mutator, permitting
              validation or ordering or logging or any other custom behavior.
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
        </member>
        <member name="P:Kvasir.Relations.IReadOnlyRelationOrderedList`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.RelationSet`1">
            <summary>
              An unordered collection that tracks the state of its unique elements for interaction with a back-end
              database.
            </summary>
            <remarks>
              <para>
                A <see cref="T:Kvasir.Relations.RelationSet`1"/> implements the same interfaces and behaves identically to a standard
                <see cref="T:System.Collections.Generic.HashSet`1"/> collection. Operations that mutate the collection are used to track changes that
                can then be reflected in a back-end database, while view- or read-only operations have no additional side
                effect. Converting a <see cref="T:Kvasir.Relations.RelationSet`1"/> into another collection type, such as through a member
                API (e.g. <see cref="M:Kvasir.Relations.RelationSet`1.CopyTo(`0[])"/> or LINQ, drops the change tracking capabilities.
              </para>
              <para>
                Every item in a <see cref="T:Kvasir.Relations.RelationSet`1"/> is in one of three states: <c>NEW</c>, <c>SAVED</c>, or
                <c>DELETED</c>. Each state corresponds to the action or actions that should be taken with respect to that
                item to synchronize the back-end database table corresponding to the relation. An item enters the
                <c>NEW</c> state when it is first added; when the collection is canonicalized, each <c>NEW</c> item
                transitions to the <c>SAVED</c> state, indicating that it does not need to be written to the database on
                the next write. When a <c>SAVED</c> item is removed from the collection, it transitions to the
                <c>DELETED</c> state; <c>NEW</c> items do not transition to <c>DELETED</c>. Note that if a <c>SAVED</c>
                item is deleted and then re-added, it will be re-added in the <c>SAVED</c> state.
              </para>
              <para>
                Items used in a <see cref="T:Kvasir.Relations.RelationSet`1"/> should be immutable: structs, <see cref="T:System.String"/>, etc. This
                is because read access is <i>not</i> tracked: when using mutable elements, it is possible for the user to
                access an item (e.g. through <c>TryGetValue</c>) and mutate that element without the collection knowing,
                preventing that change from being reflected in the back-end database. This also means that actions that
                convert the collection into another form will <i>copy</i> the elements, ensuring that the tracking data
                remains up-to-date.
              </para>
              <para>
                A <see cref="T:Kvasir.Relations.RelationSet`1"/> does not permit duplicate elements.
              </para>
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
            <seealso cref="T:Kvasir.Relations.RelationList`1"/>
            <seealso cref="T:Kvasir.Relations.RelationMap`2"/>
            <seealso cref="T:Kvasir.Relations.RelationOrderedList`1"/>
        </member>
        <member name="P:Kvasir.Relations.RelationSet`1.Comparer">
            <summary>
              Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality for the values in
              the set.
            </summary>
            <value>
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality for the values in the
              set.
            </value>
        </member>
        <member name="P:Kvasir.Relations.RelationSet`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that is empty and uses the default
              equality comparer for the set type.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that is empty, but has reserved
              space for <paramref name="capacity"/> items and uses the default equality comparer for the set type.
            </summary>
            <param name="capacity">
              The initial size of the <see cref="T:Kvasir.Relations.RelationSet`1"/>.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that uses the default equality
              comparer for the set type, contains elements copied from the specified collection, and has sufficient
              capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">
              The collection whose elements are copied to the new set.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that is empty and uses the specified
              equality comparer for the set <typeparamref name="T"/>.
            </summary>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set
              type.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that uses the specified equality
              comparer for the set type, and has sufficient capacity to accommodate <paramref name="capacity"/>
              elements.
            </summary>
            <param name="capacity">
              The initial size of the <see cref="T:Kvasir.Relations.RelationSet`1"/>.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation for the set
              type.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Kvasir.Relations.RelationSet`1"/> class that uses the specified equality
              comparer for the set type, contains elements copied for the specified collection, and has sufficient
              capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">
              The collection whose elements are copied to the new set.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or
              <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set
              type.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.CopyTo(`0[])">
            <summary>
              Copies the elements of a <see cref="T:Kvasir.Relations.RelationSet`1"/> object to an array.
            </summary>
            <param name="array">
              The one-dimensional array that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationSet`1"/> object. The array must have zero-based indexing.
            </param>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
              Copies the specified number of elements of a <see cref="T:Kvasir.Relations.RelationSet`1"/> object to an array, starting at
              the specified array index.
            </summary>
            <param name="array">
              The one-dimensional array that is the destination of the elements copied from the
              <see cref="T:Kvasir.Relations.RelationSet`1"/> object. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">
              The number of elements to copy to <paramref name="array"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex"/> is less than <c>0</c>
                --or--
              <paramref name="count"/> is less than <c>0</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="arrayIndex"/> is greater than the length of the destination <paramref name="array"/>
                --or--
              <paramref name="count"/> is greater than the available space from the <paramref name="arrayIndex"/> to
              the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a <see cref="T:Kvasir.Relations.RelationSet`1"/> object.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.HashSet`1.Enumerator"/> object for the <see cref="T:Kvasir.Relations.RelationSet`1"/> object.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
              Removes all elements that match the conditions defined by the specified predicate from a
              <see cref="T:Kvasir.Relations.RelationSet`1"/> collection.
            </summary>
            <param name="match">
              The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.
            </param>
            <returns>
              The number of elements that were removed from the <see cref="T:Kvasir.Relations.RelationSet`1"/> collection.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.TrimExcess">
            <summary>
              Sets the capacity of the <see cref="T:Kvasir.Relations.RelationSet`1"/> object to the actual number of elements it
              contains, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.TryGetValue(`0,`0@)">
            <summary>
              Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">
              The value to search for.
            </param>
            <param name="actualValue">
              The value from the set that the search found, or the default value of <typeparamref name="T"/> when the
              search yielded no match.
            </param>
            <returns>
              A value indicating whether the search was successful.
            </returns>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationSet`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Relations.RelationSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Kvasir#Relations#IRelation#Canonicalize">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Kvasir#Relations#IRelation#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Relations.RelationSet`1.Kvasir#Relations#IRelation#Repopulate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.IReadOnlyRelationSet`1">
            <summary>
              An interface denoting a read-only view over a <see cref="T:Kvasir.Relations.RelationSet`1"/>.
            </summary>
            <remarks>
              This interface is intended to allow class authors to expose a relation through a read-only property while
              controlling mutating operations on the underlying relation via member functions. Users would call, e.g., an
              insertion function that essentially "intercepts" the call to the underlying collection's mutator, permitting
              validation or ordering or logging or any other custom behavior.
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the collection.
            </typeparam>
        </member>
        <member name="P:Kvasir.Relations.IReadOnlyRelationSet`1.Kvasir#Relations#IRelation#ConnectionType">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Relations.Status">
            <summary>
              An enumeration indicating the state of an entry in a relational collection relative to the back-end database.
            </summary>
        </member>
        <member name="F:Kvasir.Relations.Status.New">
            <summary>The relation connection has yet to be written to the back-end database.</summary>
        </member>
        <member name="F:Kvasir.Relations.Status.Saved">
            <summary>The relation connection is already in the back-end database.</summary>
        </member>
        <member name="F:Kvasir.Relations.Status.Deleted">
            <summary>The relation connection needs to be deleted from the back-end database.</summary>
        </member>
        <member name="F:Kvasir.Relations.Status.Modified">
            <summary>The relation connection has been modified relative to the entry in the back-end database.</summary>
            <remarks>This status is generally useful only for ordered collections, to indicate a reordering.</remarks>
        </member>
        <member name="T:Kvasir.Schema.BasicField">
            <summary>
              A Field whose data type has no intrinsic constraints beyond those imposed by the back-end storage.
            </summary>
            <remarks>
              <para>
                The value of a Field can be restricted either intrinsically or extrinsically. An intrinsic restriction is
                one imposed by the data type and nullability of the Field; this restriction is imposed by the actual
                storage mechanism in the back-end provider. Intrinsic restrictions are common to all Fields of a particular
                data type, e.g. the maximum range of allowable integer values for a Field of type <see cref="P:Kvasir.Schema.DBType.Int8"/>
                is the same regardless of what Table the Field belongs to. Extrinsic restrictions, conversely, are those
                that are further imposed on a Field-by-Field basis and can therefore differ inter- and intra-Table. While
                most intrinsic constraints are abstracted behind the <see cref="T:Kvasir.Schema.DBType"/> class, most extrinsic
                restrictions must be manually imposed by a <see cref="T:Kvasir.Schema.CheckConstraint"/> on the Table to which the Field
                belongs. However, some extrinsic restrictions are modeled directly by the Schema Layer of Kvasir.
              </para>
              <para>
                The <see cref="T:Kvasir.Schema.BasicField"/> class models a Field that does not have any such extrinsic restrictions.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.BasicField.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.BasicField.DataType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.BasicField.Nullability">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.BasicField.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.BasicField.#ctor(Kvasir.Schema.FieldName,Kvasir.Schema.DBType,Kvasir.Schema.IsNullable,Optional.Option{Kvasir.Schema.DBValue})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.BasicField"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.BasicField.Name">name</see> of the new <see cref="T:Kvasir.Schema.BasicField"/>.
            </param>
            <param name="dataType">
              The <see cref="P:Kvasir.Schema.BasicField.DataType">data type</see> of the new <see cref="T:Kvasir.Schema.BasicField"/>.
            </param>
            <param name="nullability">
              The <see cref="P:Kvasir.Schema.BasicField.Nullability">nullability</see> of the new <see cref="T:Kvasir.Schema.BasicField"/>.
            </param>
            <param name="defaultValue">
              The <see cref="P:Kvasir.Schema.BasicField.DefaultValue">default value</see> of the new <see cref="T:Kvasir.Schema.BasicField"/>.
            </param>
            <pre>
              The arguments provided to the constructor must, collectively, define a valid Field. In addition to
              requiring that all arguments be non-<see langword="null"/>, this means that the
              <paramref name="defaultValue">default value</paramref>, if present, is compatible with the Field's
              <paramref name="dataType">data type</paramref>. Furthermore, that compatible default value can
              only be <see cref="P:Kvasir.Schema.DBValue.NULL"/> if the <paramref name="nullability"/> of the Field is
              <see cref="F:Kvasir.Schema.IsNullable.Yes"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.BasicField.Kvasir#Schema#IField#GenerateDeclaration``1(Kvasir.Transcription.IFieldDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.CandidateKey">
            <summary>
              A collection of Fields that must be tuple-wise unique for each row in a Table of a relational database.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CandidateKey.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.CandidateKey.Fields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.CandidateKey.#ctor(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CandidateKey"/> with no name.
            </summary>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.CandidateKey.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.CandidateKey.#ctor(Kvasir.Schema.KeyName,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CandidateKey"/> with no name.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.CandidateKey.Name"/> of the new <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.CandidateKey.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.CandidateKey.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.CandidateKey.#ctor(Optional.Option{Kvasir.Schema.KeyName},System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CandidateKey"/> with no name.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.CandidateKey.Name">name</see> of the new <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.CandidateKey.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.CandidateKey.Kvasir#Schema#IKey#GenerateDeclaration``1(Kvasir.Transcription.IKeyDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.AndClause">
            <summary>
              A compound <see cref="T:Kvasir.Schema.Clause"/> representing an conjunction between two logical expressions.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.AndClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.AndClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.AndClause.RHS">right-hand operand</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.AndClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.AndClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.AndClause.LHS">left-hand operand</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.AndClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.AndClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.AndClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.AndClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.AndClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.AndClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.AndClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.AndClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.AndClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.AndClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause,System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.AndClause"/> that may be negated.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.AndClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.AndClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.AndClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.AndClause"/>.
            </param>
            <param name="negated">
              Whether or not the new <see cref="T:Kvasir.Schema.XorClause"/> should be treated as negated.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="T:Kvasir.Schema.Clause">
            <summary>
              A piece of a conditional expression.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.Clause.Negation">
            <summary>
              Produces a new <see cref="T:Kvasir.Schema.Clause"/> that represents the negation of this one.
            </summary>
            <returns>
              A new <see cref="T:Kvasir.Schema.Clause"/> whose evaluation, logically, yields <c>true</c> if and only if the evaluation
              of this one yields <c>false</c>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.And(Kvasir.Schema.Clause)">
            <summary>
              Creates a conjunctive <see cref="T:Kvasir.Schema.Clause"/> involving this <see cref="T:Kvasir.Schema.Clause"/> and another. This
              <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand.
            </summary>
            <param name="rhs">
              The right-hand operand of the new conjunctive <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A new conjunctive clause where this <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand and
              <paramref name="rhs"/> is the right-hand operand.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.Or(Kvasir.Schema.Clause)">
            <summary>
              Creates a disjunctive <see cref="T:Kvasir.Schema.Clause"/> involving this <see cref="T:Kvasir.Schema.Clause"/> and another. This
              <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand.
            </summary>
            <param name="rhs">
              The right-hand operand of the new disjunctive <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A new disjunctive clause where this <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand and
              <paramref name="rhs"/> is the right-hand operand.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.Xor(Kvasir.Schema.Clause)">
            <summary>
              Creates an exclusively disjunctive <see cref="T:Kvasir.Schema.Clause"/> involving this <see cref="T:Kvasir.Schema.Clause"/> and another.
              This <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand.
            </summary>
            <param name="rhs">
              The right-hand operand of the new exclusively disjunctive <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A new exclusively disjunctive clause where this <see cref="T:Kvasir.Schema.Clause"/> is the left-hand operand and
              <paramref name="rhs"/> is the right-hand operand.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.GetDependentFields">
            <summary>
              Produces the Fields on whose values this <see cref="T:Kvasir.Schema.Clause"/> is dependent in an undefined order.
              If a Field's value is involved in multiple pieces of this <see cref="T:Kvasir.Schema.Clause"/>, that Field will appear
              multiple times.
            </summary>
            <returns>
              A list of the Fields on whose values this <see cref="T:Kvasir.Schema.Clause"/> is dependent.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <summary>
              Adds this <see cref="T:Kvasir.Schema.Clause"/> to an ongoing declaration.
            </summary>
            <typeparam name="TDecl">
              [deduced] The type of declaration produced by <paramref name="builder"/>.
            </typeparam>
            <param name="builder">
              The <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/> to which to add the declaration of this
              <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="builder"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.Clause.IfThen(Kvasir.Schema.Clause,Kvasir.Schema.Clause)">
            <summary>
              Creates a new <see cref="T:Kvasir.Schema.Clause"/> that represents a unidirectional implication, i.e. an <c>if-then</c>
              relation.
            </summary>
            <param name="predicate">
              The predicate of the new implication <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <param name="consequent">
              The consequent of the new implication <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="predicate"/> is not <see langword="null"/>
                --and--
              <paramref name="consequent"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A new <see cref="T:Kvasir.Schema.Clause"/> that represents the logical expression "if <paramref name="predicate"/> then
              <paramref name="consequent"/>."
            </returns>
        </member>
        <member name="M:Kvasir.Schema.Clause.Iff(Kvasir.Schema.Clause,Kvasir.Schema.Clause)">
            <summary>
              Creates a new <see cref="T:Kvasir.Schema.Clause"/> that represents a bidirectional implication, i.e. an<c>if and only
              if</c> relation.
            </summary>
            <param name="lhs">
              The left-hand operand of the new implication <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <param name="rhs">
              The right-hand operand of the new implication <see cref="T:Kvasir.Schema.Clause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A new <see cref="T:Kvasir.Schema.Clause"/> that represents the logical expression "<paramref name="lhs"/> if and only if
              <paramref name="rhs"/>."
            </returns>
        </member>
        <member name="T:Kvasir.Schema.ConstantClause">
            <summary>
              A simple <see cref="T:Kvasir.Schema.Clause"/> that evaluates the value of an expression on the value of a Field relative to a
              single constant value.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ConstantClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.ConstantClause"/>, which is an expression on the value of a
              Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ConstantClause.Operator">
            <summary>
              The operator of this <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ConstantClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.ConstantClause"/>, which is a single value.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.ConstantClause.#ctor(Kvasir.Schema.FieldExpression,Kvasir.Schema.ComparisonOperator,Kvasir.Schema.DBValue)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.ConstantClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </param>
            <param name="op">
              The <see cref="P:Kvasir.Schema.ConstantClause.Operator">operator</see> of the new <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.ConstantClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see cref="P:Kvasir.Schema.DBValue.NULL"/>
                --and--
              <paramref name="rhs"/> is compatible with the <see cref="P:Kvasir.Schema.FieldExpression.DataType">data type</see> of
              <paramref name="lhs"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.ConstantClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.ConstantClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.ConstantClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.CrossFieldClause">
            <summary>
              A simple <see cref="T:Kvasir.Schema.Clause"/> that evaluates the value of an expression on the value of a Field relative to
              another such expression.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CrossFieldClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.CrossFieldClause"/>, which is an expression on the value of a
              Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CrossFieldClause.Operator">
            <summary>
              The operator of this <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CrossFieldClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.CrossFieldClause"/>, which is an expression on the value of a
              Field.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.CrossFieldClause.#ctor(Kvasir.Schema.FieldExpression,Kvasir.Schema.ComparisonOperator,Kvasir.Schema.FieldExpression)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CrossFieldClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.CrossFieldClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.CrossFieldClause"/>.
            </param>
            <param name="op">
              The <see cref="P:Kvasir.Schema.CrossFieldClause.Operator">operator</see> of the new <see cref="T:Kvasir.Schema.CrossFieldClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.CrossFieldClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.CrossFieldClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>
                --and--
              the <see cref="P:Kvasir.Schema.FieldExpression.DataType">data type</see> of <paramref name="lhs"/> is the same as that of
              <paramref name="rhs"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.CrossFieldClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.CrossFieldClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.CrossFieldClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.ClauseExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend types involved
              in creating concrete <see cref="T:Kvasir.Schema.Clause">Clauses</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.ClauseExtensions.Negation(Kvasir.Schema.ComparisonOperator)">
            <summary>
              Produces the <see cref="T:Kvasir.Schema.ComparisonOperator"/> that is logically opposite another.
            </summary>
            <param name="self">
              The <see cref="T:Kvasir.Schema.ComparisonOperator"/> on which the extension method is invoked.
            </param>
            <returns>
              The logical opposite of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.ClauseExtensions.Negation(Kvasir.Schema.InclusionOperator)">
            <summary>
              Produces the <see cref="T:Kvasir.Schema.InclusionOperator"/> that is logically opposite another.
            </summary>
            <param name="self">
              The <see cref="T:Kvasir.Schema.InclusionOperator"/> on which the extension method is invoked.
            </param>
            <returns>
              The logical opposite of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.ClauseExtensions.Negation(Kvasir.Schema.NullityOperator)">
            <summary>
              Produces the <see cref="T:Kvasir.Schema.NullityOperator"/> that is logically opposite another.
            </summary>
            <param name="self">
              The <see cref="T:Kvasir.Schema.NullityOperator"/> on which the extension method is invoked.
            </param>
            <returns>
              The logical opposite of <paramref name="self"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Schema.FieldExpression">
            <summary>
              An expression over the value of a Field that can be used as part of a conditional <see cref="T:Kvasir.Schema.Clause"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.FieldExpression.Function">
            <summary>
              The function applied to the value of the <see cref="P:Kvasir.Schema.FieldExpression.Field">Field</see> in this
              <see cref="T:Kvasir.Schema.FieldExpression"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.FieldExpression.Field">
            <summary>
              The Field whose value is the subject of this <see cref="T:Kvasir.Schema.FieldExpression"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.FieldExpression.DataType">
            <summary>
              The data type of the result of this <see cref="T:Kvasir.Schema.FieldExpression"/>, accounting for the
              <see cref="P:Kvasir.Schema.FieldExpression.Function">function applied</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.FieldExpression.#ctor(Kvasir.Schema.IField)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.FieldExpression"/> with no applied function.
            </summary>
            <param name="field">
              The <see cref="P:Kvasir.Schema.FieldExpression.Field">subject Field</see> of the new <see cref="T:Kvasir.Schema.FieldExpression"/>.
            </param>
            <pre>
              <paramref name="field"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.FieldExpression.#ctor(Kvasir.Schema.FieldFunction,Kvasir.Schema.IField)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.FieldExpression"/> with an applied function.
            </summary>
            <param name="function">
              The <see cref="P:Kvasir.Schema.FieldExpression.Function">applied function</see>.
            </param>
            <param name="field">
              The <see cref="P:Kvasir.Schema.FieldExpression.Field">subject Field</see> of the new <see cref="T:Kvasir.Schema.FieldExpression"/>.
            </param>
            <pre>
              <paramref name="field"/> is not <see langword="null"/>
                --and--
              if <paramref name="function"/> is <see cref="F:Kvasir.Schema.FieldFunction.LengthOf"/>, then the
              <see cref="P:Kvasir.Schema.IField.DataType">data type</see> of <paramref name="field"/> is <see cref="P:Kvasir.Schema.DBType.Text"/>.
            </pre>
        </member>
        <member name="T:Kvasir.Schema.FieldFunction">
            <summary>
              An enumeration representing the functions that can be applied to the value of a Field.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.FieldFunction.LengthOf">
            <summary>
              The function that takes the length of a value. This function is only valid for string-like fields, which
              does not include enumerations.
            </summary>
        </member>
        <member name="T:Kvasir.Schema.InclusionClause">
            <summary>
              A simple <see cref="T:Kvasir.Schema.Clause"/> that evaluates the value of an expression on the value of a Field relative to a
              discrete list of values.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.InclusionClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.InclusionClause"/>, which is an expression on the value of a
              Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.InclusionClause.Operator">
            <summary>
              The operator of this <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.InclusionClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.InclusionClause"/>, which is a non-empty list of values.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.InclusionClause.#ctor(Kvasir.Schema.FieldExpression,Kvasir.Schema.InclusionOperator,System.Collections.Generic.IEnumerable{Kvasir.Schema.DBValue})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.InclusionClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </param>
            <param name="op">
              The <see cref="P:Kvasir.Schema.InclusionClause.Operator">operator</see> of the new <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.InclusionClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is neither <see langword="null"/> nor empty
                --and--
              each element of <paramref name="rhs"/> is compatible with the
              <see cref="P:Kvasir.Schema.FieldExpression.DataType">data type</see> of <paramref name="lhs"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.InclusionClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.InclusionClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.InclusionClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.NullityClause">
            <summary>
              A simple <see cref="T:Kvasir.Schema.Clause"/> that evaluates the nullity of a Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.NullityClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.NullityClause"/>, which is the expression being evaluated for
              nullity. This is guaranteed to be an direct expression, i.e. one without an evaluation function.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.NullityClause.Operator">
            <summary>
              The operator of this <see cref="T:Kvasir.Schema.NullityClause"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.NullityClause.#ctor(Kvasir.Schema.IField,Kvasir.Schema.NullityOperator)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.NullityClause"/>.
            </summary>
            <param name="field">
              The Field being evaluated for <c>NULL</c> in the new <see cref="T:Kvasir.Schema.NullityClause"/>.
            </param>
            <param name="op">
              The <see cref="P:Kvasir.Schema.NullityClause.Operator">operator</see> of the new <see cref="T:Kvasir.Schema.NullityClause"/>.
            </param>
            <pre>
              <paramref name="field"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.NullityClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.NullityClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.NullityClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.ComparisonOperator">
            <summary>
              An enumeration representing the logical binary comparison operators.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.EQ">
            <summary>The equality operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.NE">
            <summary>The non-equality operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.LT">
            <summary>The strictly less than operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.GT">
            <summary>The strictly greater than operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.LTE">
            <summary>The less than or equal to operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.ComparisonOperator.GTE">
            <summary>The greater than or equal to operator.</summary>
        </member>
        <member name="T:Kvasir.Schema.InclusionOperator">
            <summary>
              An enumeration representing the logical inclusion operators, i.e. checking whether or not a particular item
              appears in a list.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.InclusionOperator.In">
            <summary>The does-include operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.InclusionOperator.NotIn">
            <summary>The does-not-include operator.</summary>
        </member>
        <member name="T:Kvasir.Schema.NullityOperator">
            <summary>
              An enumeration representing the logical <c>NULL</c>-check operators.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.NullityOperator.IsNull">
            <summary>The is-<c>NULL</c> operator.</summary>
        </member>
        <member name="F:Kvasir.Schema.NullityOperator.IsNotNull">
            <summary>The is-not-<c>NULL</c> operator.</summary>
        </member>
        <member name="T:Kvasir.Schema.OrClause">
            <summary>
              A compound <see cref="T:Kvasir.Schema.Clause"/> representing an disjunction between two logical expressions.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.OrClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.OrClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.OrClause.RHS">right-hand operand</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.OrClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.OrClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.OrClause.LHS">left-hand operand</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.OrClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.AndClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.OrClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.OrClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.OrClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.OrClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.OrClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.OrClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.OrClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.OrClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause,System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.AndClause"/> that may be negated.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.OrClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.OrClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.OrClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.OrClause"/>.
            </param>
            <param name="negated">
              Whether or not the new <see cref="T:Kvasir.Schema.XorClause"/> should be treated as negated.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="T:Kvasir.Schema.XorClause">
            <summary>
              A compound <see cref="T:Kvasir.Schema.Clause"/> representing an exclusive disjunction between two logical expressions.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.XorClause.LHS">
            <summary>
              The left-hand operand of this <see cref="T:Kvasir.Schema.XorClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.XorClause.RHS">right-hand operand</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.XorClause.RHS">
            <summary>
              The right-hand operand of this <see cref="T:Kvasir.Schema.XorClause"/>. It is logically interchangeable with the
              <see cref="P:Kvasir.Schema.XorClause.LHS">left-hand operand</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.XorClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.XorClause"/>.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.XorClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.XorClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.XorClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.XorClause"/>.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.XorClause.Negation">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.XorClause.GetDependentFields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.XorClause.AddDeclarationTo``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.XorClause.#ctor(Kvasir.Schema.Clause,Kvasir.Schema.Clause,System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.XorClause"/> that may be negated.
            </summary>
            <param name="lhs">
              The <see cref="P:Kvasir.Schema.XorClause.LHS">left-hand operand</see> of the new <see cref="T:Kvasir.Schema.XorClause"/>.
            </param>
            <param name="rhs">
              The <see cref="P:Kvasir.Schema.XorClause.RHS">right-hand operand</see> of the new <see cref="T:Kvasir.Schema.XorClause"/>.
            </param>
            <param name="negated">
              Whether or not the new <see cref="T:Kvasir.Schema.XorClause"/> should be treated as negated.
            </param>
            <pre>
              <paramref name="lhs"/> is not <see langword="null"/>
                --and--
              <paramref name="rhs"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="T:Kvasir.Schema.CheckConstraint">
            <summary>
              An arbitrary logical restriction on the value of one or more Fields in a row of a Table in a relational
              database.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CheckConstraint.Name">
            <summary>
              The name of this <c>CHECK</c> constraint.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.CheckConstraint.Condition">
            <summary>
              The logical condition that is enforced by this <c>CHECK</c> constraint.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.CheckConstraint.#ctor(Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CheckConstraint"/> with no name.
            </summary>
            <param name="condition">
              The <see cref="P:Kvasir.Schema.CheckConstraint.Condition">condition</see> imposed by the new <see cref="T:Kvasir.Schema.CheckConstraint"/>
            </param>
        </member>
        <member name="M:Kvasir.Schema.CheckConstraint.#ctor(Kvasir.Schema.CheckName,Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CheckConstraint"/> with no name.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.CheckConstraint.Name">name</see> of the new <see cref="T:Kvasir.Schema.CheckConstraint"/>.
            </param>
            <param name="condition">
              The <see cref="P:Kvasir.Schema.CheckConstraint.Condition">condition</see> imposed by the new <see cref="T:Kvasir.Schema.CheckConstraint"/>
            </param>
        </member>
        <member name="M:Kvasir.Schema.CheckConstraint.GenerateDeclaration``1(Kvasir.Transcription.IConstraintDeclBuilder{``0})">
            <summary>
              Produces a declaration that, when used as part of a larger Table-creating declaration, defines this
              <c>CHECK</c> constraint as applying to the subject Table.
            </summary>
            <typeparam name="TDecl">
              [deduced] The type of declaration produced by <paramref name="builder"/>.
            </typeparam>
            <param name="builder">
              The <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/> to use to create the declaration.
            </param>
            <pre>
              <paramref name="builder"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> that declares this <c>CHECK</c> constraint.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.CheckConstraint.#ctor(Optional.Option{Kvasir.Schema.CheckName},Kvasir.Schema.Clause)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CheckConstraint"/> with no name.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.CheckConstraint.Name">name</see> of the new <see cref="T:Kvasir.Schema.CheckConstraint"/>.
            </param>
            <param name="condition">
              The <see cref="P:Kvasir.Schema.CheckConstraint.Condition">condition</see> imposed by the new <see cref="T:Kvasir.Schema.CheckConstraint"/>
            </param>
        </member>
        <member name="T:Kvasir.Schema.CheckName">
            <summary>
              A strongly typed <see cref="T:System.String"/> representing the name of a <c>CHECK</c> constraint.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.CheckName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.CheckName"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace will be discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.ComponentName`1">
            <summary>
              A strongly typed <see cref="T:System.String"/> that represents the name of a Schema component.
            </summary>
            <typeparam name="TComponent">
              The tag used to differentiate a <see cref="T:Kvasir.Schema.ComponentName`1"/> for one Schema component from one for
              another. Two <see cref="T:Kvasir.Schema.ComponentName`1"/> types instantiated with different
              <typeparamref name="TComponent"/> types are not interoperable.
            </typeparam>
        </member>
        <member name="M:Kvasir.Schema.ComponentName`1.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.ComponentName`1"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace are discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.DBType">
            <summary>
              The semantic data type for a Field.
            </summary>
            <remarks>
              <para>
                The <see cref="T:Kvasir.Schema.DBType"/> is strictly a semantic specification, incorporating nothing about the actual
                mechanism by which the type is represented in a back-end database. Different RDBMS providers realize
                semantic types differently; for example, SQL Server does not distinguish between signed and unsigned
                integers whereas MySQL does. <see cref="T:Kvasir.Schema.DBType"/> is intended to partition the data type space along these
                universal semantic fault lines, leaving the actual storage mechanics up to the back-end provider being
                used.
              </para>
              <para>
                Because of this abstract angle, certain aspects of a data type are not represented directly by the
                <see cref="T:Kvasir.Schema.DBType"/> class. This includes precisions for floating point types, ranges for all numeric and
                date-like types, encodings for text types, and others. This extends to enumeration types, where the
                discrete set of allowed values is specified at the Field level rather than by the <see cref="T:Kvasir.Schema.DBType"/>.
                This overall abstraction allows for a single Schema translation to be used for any back-end RDBMS.
              </para>
              <para>
                The various semantic type categories are represented as distinct <see cref="T:Kvasir.Schema.DBType"/> instances exposed as
                <see langword="static"/> pseudo-enumerators: it is not possible to create custom <see cref="T:Kvasir.Schema.DBType"/>
                instances.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.DBType.Boolean">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a Boolean value.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Character">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing a single UTF-16 character.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Int8">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing an <c>8</c>-bit signed integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Int16">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing a <c>16</c>-bit signed integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Int32">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing a <c>32</c>-bit signed integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Int64">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing a <c>64</c>-bit signed integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.UInt8">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing an <c>8</c>-bit unsigned integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.UInt16">
            <summary>
              The <see cref="T:Kvasir.Schema.DBValue"/> representing a <c>16</c>-bit unsigned integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.UInt32">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a <c>32</c>-bit unsigned integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.UInt64">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a <c>64</c>-bit unsigned integer.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Single">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a single-precision floating point number.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Double">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a double-precision floating point number.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Decimal">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a decimal number.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.DateTime">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a calendar date and time.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Text">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing freeform text.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Guid">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing a globally unique identifier.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBType.Enumeration">
            <summary>
              The <see cref="T:Kvasir.Schema.DBType"/> representing an enumeration.
            </summary>
            <remarks>
              Note that all flavors of enumeration are collapsed into this single <see cref="T:Kvasir.Schema.DBType"/>. The specifics
              of the enumeration--namely, what the discrete set of allowed values is--is specified at the Field level,
              as different back-end providers have different levels of native support for enumerations.
            </remarks>
        </member>
        <member name="M:Kvasir.Schema.DBType.IsSupported(System.Type)">
            <summary>
              Determines if a CLR <see cref="T:System.Type"/> is supported by Kvasir.
            </summary>
            <param name="clrType">
              The CLR <see cref="T:System.Type"/> for which to check for support.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="clrType"/> is supported by Kvasir; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.Lookup(System.Type)">
            <summary>
              Looks up the <see cref="T:Kvasir.Schema.DBType"/> instance that corresponds to a CLR <see cref="T:System.Type"/>.
            </summary>
            <remarks>
              The mapping of CLR <see cref="T:System.Type"/> to <see cref="T:Kvasir.Schema.DBType"/> instance is not bijective. Specifically,
              all <see cref="T:System.Enum"/> types are mapped to the same value (<see cref="P:Kvasir.Schema.DBType.Enumeration"/>) and the generic
              argument is used when the <see cref="T:System.Type"/> is an instantiation of the <see cref="T:System.Nullable`1"/>
              generic.
            </remarks>
            <param name="clrType">
              The CLR <see cref="T:System.Type"/> for which to look up the corresponding <see cref="T:Kvasir.Schema.DBType"/> instance.
            </param>
            <returns>
              The <see cref="T:Kvasir.Schema.DBType"/> instance that corresponds to <paramref name="clrType"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              if <paramref name="clrType"/> is not supported by Kvasir, and therefore has no corresponding
              <see cref="T:Kvasir.Schema.DBType"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Schema.DBType.Equals(Kvasir.Schema.DBType)">
            <summary>
              Determines if this <see cref="T:Kvasir.Schema.DBType"/> is equal to another.
            </summary>
            <param name="rhs">
              The <see cref="T:Kvasir.Schema.DBType"/> against which to compare this one.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is equal to this <see cref="T:Kvasir.Schema.DBType"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.Equals(System.Object)">
            <summary>
              Determines if this <see cref="T:Kvasir.Schema.DBType"/> is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="rhs">
              The <see cref="T:System.Object"/> against which to compare this <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is a non-<see langword="null"/> <see cref="T:Kvasir.Schema.DBType"/>
              that is equal to this one; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.GetHashCode">
            <summary>
              Produces the hash code for this <see cref="T:Kvasir.Schema.DBType"/>.
            </summary>
            <returns>
              The hash code for this <see cref="T:Kvasir.Schema.DBType"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.ToString">
            <summary>
              Produces a human-readable string representation of this <see cref="T:Kvasir.Schema.DBType"/>.
            </summary>
            <returns>
              A human-readable string representation of this <see cref="T:Kvasir.Schema.DBType"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.op_Equality(Kvasir.Schema.DBType,Kvasir.Schema.DBType)">
            <summary>
              Determines if one <see cref="T:Kvasir.Schema.DBType"/> is equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.op_Inequality(Kvasir.Schema.DBType,Kvasir.Schema.DBType)">
            <summary>
              Determines if one <see cref="T:Kvasir.Schema.DBType"/> is not equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is not equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBType.#cctor">
            <summary>
              Initializes the <see langword="static"/> state of the <see cref="T:Kvasir.Schema.DBType"/> struct.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.DBType.#ctor(System.Byte)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBType"/>.
            </summary>
            <param name="id">
              The ID of the new <see cref="T:Kvasir.Schema.DBType"/>. This also serves as the indexer for the various traits of the new
              instance, including its string representation.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBType.Normalize(System.Type)">
            <summary>
              Normalizes a CLR <see cref="T:System.Type"/> by stripping any <see cref="T:System.Nullable`1"/> wrapper and collapsing all
              <see cref="T:System.Enum"/> types into a single sentinel.
            </summary>
            <param name="clrType">
              The CLR <see cref="T:System.Type"/> to normalize.
            </param>
            <returns>
              The normalization of <paramref name="clrType"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Schema.DBValue">
            <summary>
              A thin, type-controlled wrapper around a CLR object that can be stored in a back-end relational database.
            </summary>
            <remarks>
              <para>
                The <see cref="T:Kvasir.Schema.DBValue"/> struct is intended to provide an abstraction over the generalized CLR
                <see cref="T:System.Object"/> for use in contexts where compile-time type information is not available. The
                advantage in using a <see cref="T:Kvasir.Schema.DBValue"/> over raw a <see cref="T:System.Object"/> is that the former is guaranteed
                to only ever hold an object that can actually be stored in a back-end RDBMS, whereas the latter could
                feasibly hold anything. Additionally, a <see cref="T:Kvasir.Schema.DBValue"/> never actually wraps a <see langword="null"/>
                value directly: a sentinel is used such that accessing the raw value is always valid.
              </para>
              <para>
                The strong typing afforded by a CLR <see cref="T:System.Enum">enum</see> is lost when the enumerator values are
                stored in a back-end relational database. Some providers afford value checking, either through an explicit
                <c>enum</c> data type or via <c>CHECK</c> constraints; however, even in these cases, the actual storage is
                generally either an integer or a string. For this reason, a <see cref="T:Kvasir.Schema.DBValue"/> cannot wrap a CLR
                enumerator: is the client's responsibility to convert the CLR enumerator into the corresponding database
                object, be it an integer or another supported type.
              </para>
              <para>
                The same general logic applies to conversions from other CLR types, including between CLR types that are
                otherwise supported by Kvasir. The <see cref="T:Kvasir.Schema.DBValue"/> struct is intended to wrap exactly the value that
                is to be stored in the database, with the burden of performing any transforms falling on the client.
              </para>
              <para>
                Because a <see cref="T:Kvasir.Schema.DBValue"/> might hold the <c>NULL</c> sentinel value, which is valid for any data
                type, it is not strictly possible to determine the <see cref="T:Kvasir.Schema.DBType"/> of a particular
                <see cref="T:Kvasir.Schema.DBValue"/>. To check if a particular <see cref="T:Kvasir.Schema.DBValue"/> instance can be safely used for a
                Field of a particular <see cref="T:Kvasir.Schema.DBType"/>, use the <see cref="M:Kvasir.Schema.DBValue.IsInstanceOf(Kvasir.Schema.DBType)">dedicated API</see>.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.DBValue.Datum">
            <summary>
              The raw value of this <see cref="T:Kvasir.Schema.DBValue"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.DBValue.NULL">
            <summary>
              The sentinel <see cref="T:Kvasir.Schema.DBValue"/> representing <c>NULL</c>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Boolean)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Boolean"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Byte)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Byte"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.SByte)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.SByte"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.UInt16)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.UInt16"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Int16)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Int16"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.UInt32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.UInt32"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Int32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Int32"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.UInt64)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.UInt64"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Int64)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Int64"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Single)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Single"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Double)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Double"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Decimal)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Decimal"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.DateTime)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.DateTime"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Char)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Char"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Char"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.String"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.String"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.Guid)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> from a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">
              The <see cref="T:System.Guid"/> value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.DBValue.Create(System.Object)">
            <summary>
              Creates a new <see cref="T:Kvasir.Schema.DBValue"/> from an arbitrary value.
            </summary>
            <param name="value">
              The value of the new <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <exception cref="T:System.ArgumentException">
              if <paramref name="value"/> is non-<see langword="null"/> and of a type that is not supported by Kvasir.
            </exception>
        </member>
        <member name="M:Kvasir.Schema.DBValue.IsInstanceOf(Kvasir.Schema.DBType)">
            <summary>
              Determines if the current <see cref="T:Kvasir.Schema.DBValue"/> would be valid for a Field with a specific data type,
              considering only the data type and not the actual value.
            </summary>
            <param name="type">
              The target <see cref="T:Kvasir.Schema.DBType"/>.
            </param>
            <returns>
              <see langword="true"/> if this is <see cref="P:Kvasir.Schema.DBValue.NULL"/> or if the type of this <see cref="T:Kvasir.Schema.DBValue"/> is
              compatible with <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.Equals(Kvasir.Schema.DBValue)">
            <summary>
              Determines if this <see cref="T:Kvasir.Schema.DBValue"/> is equal to another.
            </summary>
            <param name="rhs">
              The <see cref="T:Kvasir.Schema.DBValue"/> against which to compare this one.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is equal to this <see cref="T:Kvasir.Schema.DBValue"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.Equals(System.Object)">
            <summary>
              Determines if this <see cref="T:Kvasir.Schema.DBValue"/> is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="rhs">
              The <see cref="T:System.Object"/> against which to compare this <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is a non-<see langword="null"/> <see cref="T:Kvasir.Schema.DBValue"/>
              that is equal to this one; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.GetHashCode">
            <summary>
              Produces the hash code for this <see cref="T:Kvasir.Schema.DBValue"/>.
            </summary>
            <returns>
              The hash code for this <see cref="T:Kvasir.Schema.DBValue"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.ToString">
            <summary>
              Produces a human-readable string representation of this <see cref="T:Kvasir.Schema.DBValue"/>.
            </summary>
            <returns>
              A human-readable string representation of this <see cref="T:Kvasir.Schema.DBValue"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.op_Equality(Kvasir.Schema.DBValue,Kvasir.Schema.DBValue)">
            <summary>
              Determines if one <see cref="T:Kvasir.Schema.DBValue"/> is equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.op_Inequality(Kvasir.Schema.DBValue,Kvasir.Schema.DBValue)">
            <summary>
              Determines if one <see cref="T:Kvasir.Schema.DBValue"/> is not equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Kvasir.Schema.DBValue"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is not equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#cctor">
            <summary>
              Initializes the <see langword="static"/> state of the <see cref="T:Kvasir.Schema.DBValue"/> struct.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.DBValue.#ctor(System.DBNull)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.DBValue"/> that represents <c>NULL</c>.
            </summary>
        </member>
        <member name="T:Kvasir.Schema.EnumField">
            <summary>
              A Field whose data type has an intrinsic constraint limiting the allowed values to a discrete set of strings.
            </summary>
            <remarks>
              <para>
                The value of a Field can be restricted either intrinsically or extrinsically. An intrinsic restriction is
                one imposed by the data type and nullability of the Field; this restriction is imposed by the actual
                storage mechanism in the back-end provider. Intrinsic restrictions are common to all Fields of a particular
                data type, e.g. the maximum range of allowable integer values for a Field of type <see cref="P:Kvasir.Schema.DBType.Int8"/>
                is the same regardless of what Table the Field belongs to. Extrinsic restrictions, conversely, are those
                that are further imposed on a Field-by-Field basis and can therefore differ inter- and intra-Table. While
                most intrinsic constraints are abstracted behind the <see cref="T:Kvasir.Schema.DBType"/> class, most extrinsic
                restrictions must be manually imposed by a <see cref="T:Kvasir.Schema.CheckConstraint"/> on the Table to which the Field
                belongs. However, some extrinsic restrictions are modeled directly by the Schema Layer of Kvasir.
              </para>
              <para>
                The <see cref="T:Kvasir.Schema.EnumField"/> class models a Field to which is applied an extrinsic enumeration restriction.
                Such a Field is necessarily treated as a string by users, but the allowed values are discrete rather than
                infinite. Some back-end RDBMS providers (such as MySQL) actually offer an optimized storage mechanism for
                such Fields, where the data is <i>stored</i> as an integer but <i>read and written</i> as a string. Similar
                restrictions on non-text data types require a <see cref="T:Kvasir.Schema.CheckConstraint"/> with a condition based around
                an <see cref="T:Kvasir.Schema.InclusionClause"/>.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.EnumField.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.EnumField.DataType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.EnumField.Nullability">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.EnumField.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.EnumField.Enumerators">
            <summary>
              The list of values that are allowed for this <see cref="T:Kvasir.Schema.EnumField"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.EnumField.#ctor(Kvasir.Schema.FieldName,Kvasir.Schema.IsNullable,Optional.Option{Kvasir.Schema.DBValue},System.Collections.Generic.IEnumerable{Kvasir.Schema.DBValue})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.EnumField"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.EnumField.Name">name</see> of the new <see cref="T:Kvasir.Schema.EnumField"/>.
            </param>
            <param name="nullability">
              The <see cref="P:Kvasir.Schema.EnumField.Nullability">nullability</see> of the new <see cref="T:Kvasir.Schema.EnumField"/>.
            </param>
            <param name="defaultValue">
              The <see cref="P:Kvasir.Schema.EnumField.DefaultValue">default value</see> of the new <see cref="T:Kvasir.Schema.EnumField"/>.
            </param>
            <param name="enumerators">
              The <see cref="P:Kvasir.Schema.EnumField.Enumerators">restricted enumerator values</see> of the new <see cref="T:Kvasir.Schema.EnumField"/>.
            </param>
            <pre>
              The arguments provided to the constructor must, collectively, define a valid Field. In addition to
              requiring that all arguments be non-<see langword="null"/>, this means that the
              <paramref name="defaultValue">default value</paramref>, if present, is compatible with the Field's
              <see cref="P:Kvasir.Schema.DBType.Enumeration"/> data type. Furthermore, that compatible default value can only be
              <see cref="P:Kvasir.Schema.DBValue.NULL"/> if the <paramref name="nullability"/> of the Field is
              <see cref="F:Kvasir.Schema.IsNullable.Yes"/>. Finally, there must be at least one
              <paramref name="enumerators">allowed value</paramref>, and all such values must be something other than
              <see cref="P:Kvasir.Schema.DBValue.NULL"/> while maintaining compatibility with the <see cref="P:Kvasir.Schema.DBType.Enumeration"/> data
              type.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.EnumField.Kvasir#Schema#IField#GenerateDeclaration``1(Kvasir.Transcription.IFieldDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.ForeignKey">
            <summary>
              A referential integrity constraint on a Table in a relational database, requiring the value of some tuple of
              rows to match that of the primary key of some row in another Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ForeignKey.Name">
            <summary>
              The name of this Foreign Key.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ForeignKey.ReferencingFields">
            <summary>
              The Fields that make up this Foreign Key, in the order that corresponds to the Primary Key of the
              <see cref="P:Kvasir.Schema.ForeignKey.ReferencedTable">referenced Table</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ForeignKey.ReferencedTable">
            <summary>
              The Table being referenced by this Foreign Key.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ForeignKey.OnDelete">
            <summary>
              The <c>ON DELETE</c> behavior of this Foreign Key.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ForeignKey.OnUpdate">
            <summary>
              The <c>ON UPDATE</c> behavior of this Foreign Key.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.ForeignKey.#ctor(Kvasir.Schema.ITable,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},Kvasir.Schema.OnDelete,Kvasir.Schema.OnUpdate)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.ForeignKey"/>.
            </summary>
            <param name="reference">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencedTable">Table being referenced</see> by the new Foreign Key.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencingFields">Fields</see> that make up the new Foreign Key.
            </param>
            <param name="onDelete">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnDelete"><c>ON DELETE</c> behavior</see> of the new Foreign Key.
            </param>
            <param name="onUpdate">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnUpdate"><c>ON UPDATE</c> behavior</see> of the new Foreign Key.
            </param>
        </member>
        <member name="M:Kvasir.Schema.ForeignKey.#ctor(Kvasir.Schema.FKName,Kvasir.Schema.ITable,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},Kvasir.Schema.OnDelete,Kvasir.Schema.OnUpdate)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.ForeignKey"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.ForeignKey.Name">name</see> of the new Foreign Key.
            </param>
            <param name="reference">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencedTable">Table being referenced</see> by the new Foreign Key.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencingFields">Fields</see> that make up the new Foreign Key.
            </param>
            <param name="onDelete">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnDelete"><c>ON DELETE</c> behavior</see> of the new Foreign Key.
            </param>
            <param name="onUpdate">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnUpdate"><c>ON UPDATE</c> behavior</see> of the new Foreign Key.
            </param>
        </member>
        <member name="M:Kvasir.Schema.ForeignKey.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the Fields in this Foreign Key. The contents of those Fields
              cannot be modified by the iteration.
            </summary>
            <remarks>
              The <see cref="T:Kvasir.Schema.ForeignKey"/> class does not implement the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface,
              preventing Foreign Keys from interoperating with LINQ. The <see cref="M:Kvasir.Schema.ForeignKey.GetEnumerator"/> method exists to
              allow iteration with a <c>foreach</c> loop, which the compiler implicitly converts into an enumerator
              expression.
            </remarks>
            <returns>
              An enumerator that iterates over the Fields in this Foreign Key.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.ForeignKey.GenerateDeclaration``1(Kvasir.Transcription.IForeignKeyDeclBuilder{``0})">
            <summary>
              Produces a declaration that, when used as part of a larger Table-creating declaration, defines this
              Foreign Key as applying to the subject Table.
            </summary>
            <typeparam name="TDecl">
              [deduced] The type of declaration produced by <paramref name="builder"/>.
            </typeparam>
            <param name="builder">
              The <see cref="T:Kvasir.Transcription.IForeignKeyDeclBuilder`1"/> to use to create the declaration.
            </param>
            <pre>
              <paramref name="builder"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> that declares this Foreign Key.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.ForeignKey.#ctor(Optional.Option{Kvasir.Schema.FKName},Kvasir.Schema.ITable,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},Kvasir.Schema.OnDelete,Kvasir.Schema.OnUpdate)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.ForeignKey"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.ForeignKey.Name">name</see> of the new Foreign Key.
            </param>
            <param name="reference">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencedTable">Table being referenced</see> by the new Foreign Key.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.ForeignKey.ReferencingFields">Fields</see> that make up the new Foreign Key.
            </param>
            <param name="onDelete">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnDelete"><c>ON DELETE</c> behavior</see> of the new Foreign Key.
            </param>
            <param name="onUpdate">
              The <see cref="P:Kvasir.Schema.ForeignKey.OnUpdate"><c>ON UPDATE</c> behavior</see> of the new Foreign Key.
            </param>
            <pre>
              The arguments provided to the constructor must, collectively, define a valid Foreign Key. In addition to
              requiring that all arguments be non-<see langword="null"/>, this means that there be at least one
              <paramref name="fields">constituent Field</paramref>, that the number of <paramref name="fields"/> is
              the same as the number of fields in the Primary Key of <paramref name="reference"/>, and that Fields in
              <paramref name="fields"/> have the same data type as the corresponding referenced Field.
            </pre>
        </member>
        <member name="T:Kvasir.Schema.FKName">
            <summary>
              A strongly typed <see cref="T:System.String"/> representing the name of a Foreign Key.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.FKName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.FKName"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace will be discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.IField">
            <summary>
              The interface for a single Field in a Table of a relational database.
            </summary>
            <remarks>
              <para>
                Fields in a relational database are analogous to columns in the two-dimensional matrix that is a Table.
                Each Field has, at a minimum, a name, data type, and nullability; collectively, this metadata controls how
                the Field is referenced by other Tables and SQL statements/expressions and what values are allowed for the
                Field. Additionally, a Field can have a default value that is used when the Field is omitted from an
                <c>INSERT</c> statement.
              </para>
              <para>
                The representation of Fields at the Schema Layer of Kvasir is an abstraction over the actual realization of
                the Field in a back-end RDBMS. Specifically, the data type of a Field is specified in a storage-agnostic
                manner that makes no guarantees as to the actual back-end storage mechanisms. For example, the data type of
                a Field does not manage the precision of floating-point values or the master domain of integers. These
                aspects of the data type can differ from provider to provider; the abstract representation of the Field
                therefore allows a single Schema translation to be used for any back-end RDBMS provider.
              </para>
              <para>
                This interface is closed: it can only be implemented by types in the Kvasir assembly. It is guaranteed that
                at least on type in the Kvasir assembly implements this interface, though the upper bound is unspecified.
                External assemblies can reference, use, and extend the interface to add cursory functionality and enrich
                their own APIs if desired.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.IField.Name">
            <summary>
              The name of this Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.IField.DataType">
            <summary>
              The data type of this Field.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.IField.Nullability">
            <summary>
              The nullability of this Field.
            </summary>
            <remarks>
              Nullability refers to whether or not the value of a Field can be <c>NULL</c>. This status restricts
              several facets of a Schema, such as the <see cref="P:Kvasir.Schema.IField.DefaultValue">default value</see> that a Field can
              take on and the reactionary behaviors of a Foreign Key that includes the Field. The nullability of a
              Field does not depend on the Field's <see cref="P:Kvasir.Schema.IField.DataType">data type</see>.
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.IField.DefaultValue">
            <summary>
              The default value of this Field.
            </summary>
            <remarks>
              A Field is not required to have a default value, and the default value may be <see cref="P:Kvasir.Schema.DBValue.NULL"/>
              if the Field is <see cref="P:Kvasir.Schema.IField.Nullability">nullable</see>. A <c>SOME</c> instance indicates the presence of a
              default value, with that value being wrapped by the <see cref="T:Optional.Option`1"/>. Conversely, a
              <c>NONE</c> instance indicates the absence of a default value.
            </remarks>
        </member>
        <member name="M:Kvasir.Schema.IField.GenerateDeclaration``1(Kvasir.Transcription.IFieldDeclBuilder{``0})">
            <summary>
              Produces a declaration that, when used as part of a larger Table-creating declaration, defines this
              Field as a member of the subject Table.
            </summary>
            <typeparam name="TDecl">
              [deduced] The type of declaration produced by <paramref name="builder"/>.
            </typeparam>
            <param name="builder">
              The <see cref="T:Kvasir.Transcription.IFieldDeclBuilder`1"/> to use to create the declaration.
            </param>
            <pre>
              <paramref name="builder"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> that declares this Table.
            </returns>
        </member>
        <member name="T:Kvasir.Schema.FieldName">
            <summary>
              A strongly typed <see cref="T:System.String"/> representing the name of a Field.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.FieldName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.FieldName"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace will be discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.IKey">
            <summary>
              The interface for a single internal Key on a Table of a relational database.
            </summary>
            <remarks>
              <para>
                In a relational database, a Key is a non-empty, possibly proper subset of a Table's Fields that are
                required to form a unique tuple for each row in that Table. Keys often reflect real-world domain identity
                relations, such as social security numbers, client usernames, or any of various IDs. Key uniqueness is
                imposed by the database provider, rejecting <c>INSERT</c> and <c>UPDATE</c> statements that would create
                multiple rows with the same tuple of values.
              </para>
              <para>
                This interface is closed: it can only be implemented by types in the Kvasir assembly. It is guaranteed that
                at least on type in the Kvasir assembly implements this interface, though the upper bound is unspecified.
                External assemblies can reference, use, and extend the interface to add cursory functionality and enrich
                their own APIs if desired.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.IKey.Name">
            <summary>
              The name of this Key.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.IKey.Fields">
            <summary>
              The Fields that make up this Key.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.IKey.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the Fields in this Key. The contents of those Fields cannot be
              modified by the iteration.
            </summary>
            <remarks>
              The <see cref="T:Kvasir.Schema.IKey"/> interface does not implement the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface,
              preventing Keys from interoperating with LINQ. The <see cref="M:Kvasir.Schema.IKey.GetEnumerator"/> method exists to allow
              iteration with a <c>foreach</c> loop, which the compiler implicitly converts into an enumerator
              expression.
            </remarks>
            <returns>
              An enumerator that iterates over the Fields in this Key.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.IKey.GenerateDeclaration``1(Kvasir.Transcription.IKeyDeclBuilder{``0})">
            <summary>
              Produces a declaration that, when used as part of a larger Table-creating declaration, defines this
              Key as applying to the subject Table.
            </summary>
            <typeparam name="TDecl">
              [deduced] The type of declaration produced by <paramref name="builder"/>.
            </typeparam>
            <param name="builder">
              The <see cref="T:Kvasir.Transcription.IKeyDeclBuilder`1"/> to use to create the declaration.
            </param>
            <pre>
              <paramref name="builder"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> that declares this Key.
            </returns>
        </member>
        <member name="T:Kvasir.Schema.KeyName">
            <summary>
              A strongly typed <see cref="T:System.String"/> representing the name of a Key.
            </summary>
            <remarks>
              Note: <see cref="T:Kvasir.Schema.KeyName"/> is not suitable for representing the name of a Foreign Key.
            </remarks>
            <seealso cref="T:Kvasir.Schema.FKName"/>
        </member>
        <member name="M:Kvasir.Schema.KeyName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.KeyName"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace will be discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.IsNullable">
            <summary>
              An enumeration that specifies whether or not <c>NULL</c> is an acceptable value, particularly for a Field.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.IsNullable.Yes">
            <summary>
              <c>NULL</c> <i>is</i> an acceptable value.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.IsNullable.No">
            <summary>
              <c>NULL</c> is <i>not</i> an acceptable value.
            </summary>
        </member>
        <member name="T:Kvasir.Schema.ITable">
            <summary>
              The interface for a single Table in a relational database.
            </summary>
            <remarks>
              <para>
                A Table is the primary unit of organization in a relational database. Each Table can be thought of as a
                two-dimensional matrix of data, where the columns are Fields and the rows are data entries. A Table is
                principally defined by its name and the collection of constituent Fields; additionally, every Table must
                have exactly one Primary Key - a tuple of Fields that must be unique for all member rows. Tables can
                also have Candidate Keys, which are tuples that <i>could</i> be a Primary Key but just aren't.
              </para>
              <para>
                The structure of a Table can also impose restrictions on the values of its Fields, on top of the implicit
                and/or explicit restrictions imposed by the data type of the Fields themselves. The first form of
                constraint is the Foreign Key constraint, which requires that the values of a tuple of Fields match the
                values of a Primary Key for some data entry row in another Table; this constraint imposes referential
                integrity. The second form of constraint is the <c>CHECK</c> constraint, which allows the specification of
                arbitrary conditional logic on the values of the Fields in a row of data. A Table can have any number of
                either type of constraint, including none at all.
              </para>
              <para>
                This interface is closed: it can only be implemented by types in the Kvasir assembly. It is guaranteed that
                at least on type in the Kvasir assembly implements this interface, though the upper bound is unspecified.
                External assemblies can reference, use, and extend the interface to add cursory functionality and enrich
                their own APIs if desired.
              </para>
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.ITable.Name">
            <summary>
              The name of this Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ITable.Dimension">
            <summary>
              The number of Fields that make up this Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ITable.Item(Kvasir.Schema.FieldName)">
            <summary>
              Gets the Field in this Table with a specific name.
            </summary>
            <param name="name">
              The name of the Field to find.
            </param>
            <exception cref="T:System.ArgumentException">
              if this Table does not have a Field with name <paramref name="name"/>
            </exception>
        </member>
        <member name="P:Kvasir.Schema.ITable.Fields">
            <summary>
              The Fields that make up this Table, in columnar order.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ITable.PrimaryKey">
            <summary>
              The Primary Key of this Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ITable.CandidateKeys">
            <summary>
              The Candidate Keys of this Table.
            </summary>
            <remarks>
              Although it would be redundant, it is possible for a Candidate Key to be identical to be non-disjoint
              with the Table's <see cref="P:Kvasir.Schema.ITable.PrimaryKey">Primary Key</see>. Likewise, it is possible for individual
              Candidate Keys to be non-disjoint with each other.
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.ITable.ForeignKeys">
            <summary>
              The Foreign Keys of this Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.ITable.CheckConstraints">
            <summary>
              The <c>CHECK</c> constraints applied to this Table.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.ITable.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the Fields in this Table in columnar order. The contents of
              those Fields cannot be modified by the iteration.
            </summary>
            <remarks>
              The <see cref="T:Kvasir.Schema.ITable"/> interface does not implement the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface,
              preventing Tables from interoperating with LINQ. The <see cref="M:Kvasir.Schema.ITable.GetEnumerator"/> method exists to allow
              iteration with a <c>foreach</c> loop, which the compiler implicitly converts into an enumerator
              expression.
            </remarks>
            <returns>
              An enumerator that iterates over the Fields in this Table in columnar order.
            </returns>
        </member>
        <member name="M:Kvasir.Schema.ITable.GenerateDeclaration``5(Kvasir.Transcription.IBuilderFactory{``0,``1,``2,``3,``4})">
            <summary>
              Produces a declaration that defines this Table.
            </summary>
            <param name="builderFactory">
              The <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/> with which to
              create the various Builders needed to compose the declaration that defines this Table.
            </param>
            <pre>
              <paramref name="builderFactory"/> is not <see langword="null"/>.
            </pre>
            <returns>
              A <typeparamref name="TTableDecl"/> that declares this Table.
            </returns>
        </member>
        <member name="T:Kvasir.Schema.TableName">
            <summary>
              A strongly typed <see cref="T:System.String"/> representing the name of a Table.
            </summary>
        </member>
        <member name="M:Kvasir.Schema.TableName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.TableName"/>.
            </summary>
            <param name="name">
              The name. Leading and trailing whitespace will be discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="name"/> is zero-length
                --or--
              if <paramref name="name"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Schema.OnDelete">
            <summary>
              An enumeration representing the various <c>ON DELETE</c> behaviors that can be applied to a Foreign Key.
            </summary>
            <remarks>
              Foreign Keys are intended to enforce data integrity across multiple Tables, ensuring that a value (or tuple
              of values) in one Table references a row in another. <c>DELETE</c> operations can therefore disrupt the
              validity of Foreign Keys, as the row(s) being deleted can feasibly be one referenced by a Foreign Key in
              another Table. When this happens, the behavior is controlled by the <c>ON DELETE</c> behavior of the Foreign
              Key that references the to-be-deleted row(s). If multiple Foreign Keys reference the targeted row(s) with
              different <c>ON DELETE</c> behavior, the result depends on the back-end RDBMS provider being used.
            </remarks>
        </member>
        <member name="F:Kvasir.Schema.OnDelete.Prevent">
            <summary>
              Prevent the deletion of a row that is referenced by a row in another Table via a Foreign Key. This
              behavior requires that the <i>referencing</i> data be modified or removed prior to removal of the
              <i>referenced</i> data. This is the strictest behavior.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnDelete.Cascade">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is deleted, also delete the
              referencing row(s). This behavior turns a single <c>DELETE</c> statement targeting a single Table into a
              collection of <c>DELETE</c> statements targeting multiple Tables, as the referencing row(s) being deleted
              can themselves be <i>referenced</i> rows in another Foreign Key.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnDelete.SetNull">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is deleted, set the values of
              any referencing Fields to <c>NULL</c>. For obvious reasons, this behavior can only be applied to a
              Foreign Key where all the constituent Fields are nullable.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnDelete.SetDefault">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is deleted, set the values of
              any referencing Fields to their default value. For obvious reasons, this behavior can only be applied to
              a Foreign Key where all the constituent Fields have explicitly specified default values.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnDelete.NoAction">
            <summary>
              Take no action when a row being deleted is referenced by a row in another Table via a Foreign Key. This
              behavior can lead to data integrity issues, as the referencing row no longer refers to an extant target.
              This is the weakest behavior. Some back-end RDBMS providers will raise errors or exceptions when such
              data integrity violations arise.
            </summary>
        </member>
        <member name="T:Kvasir.Schema.OnUpdate">
            <summary>
              An enumeration representing the various <c>ON UPDATE</c> behaviors that can be applied to a Foreign Key.
            </summary>
            <remarks>
              Foreign Keys are intended to enforce data integrity across multiple Tables, ensuring that a value (or tuple
              of values) in one Table references a row in another. <c>UPDATE</c> operations can therefore disrupt the
              validity of Foreign Keys, as the row(s) being updated can feasibly be one referenced by a Foreign Key in
              another Table. When this happens, the behavior is controlled by the <c>ON UPDATE</c> behavior of the Foreign
              Key that references the to-be-updated row(s). If multiple Foreign Keys reference the targeted row(s) with
              different <c>ON UPDATE</c> behavior, the result depends on the back-end RDBMS provider being used.
            </remarks>
        </member>
        <member name="F:Kvasir.Schema.OnUpdate.Prevent">
            <summary>
              Prevent the updating of a row that is referenced by a row in another Table via a Foreign Key. This
              behavior effectively disables updating <i>referenced</i> data unless the <i>referencing</i> data is first
              deleted or updated itself to refer to a different, still-valid target.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnUpdate.Cascade">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is updated, also update the
              referencing row(s). This behavior turns a single <c>UPDATE</c> statement targeting a single Table into a
              collection of <c>UPDATE</c> statements targeting multiple Tables, as the referencing row(s) being updated
              can themselves be <i>referenced</i> rows in another Foreign Key.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnUpdate.SetNull">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is updated, set the values of
              any referencing Fields to <c>NULL</c>. For obvious reasons, this behavior can only be applied to a
              Foreign Key where all the constituent Fields are nullable.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnUpdate.SetDefault">
            <summary>
              When a row that is referenced by a row in another Table via a Foreign Key is updated, set the values of
              any referencing Fields to their default value. For obvious reasons, this behavior can only be applied to
              a Foreign Key where all the constituent Fields have explicitly specified default values.
            </summary>
        </member>
        <member name="F:Kvasir.Schema.OnUpdate.NoAction">
            <summary>
              Take no action when a row being updated is referenced by a row in another Table via a Foreign Key. This
              behavior can lead to data integrity issues, as the referencing row no longer refers to an extant target.
              This is the weakest behavior. Some back-end RDBMS providers will raise errors or exceptions when such
              data integrity violations arise.
            </summary>
        </member>
        <member name="T:Kvasir.Schema.PrimaryKey">
            <summary>
              A collection of Fields that uniquely identifies a row in a Table of a relational database and can be
              referenced by Foreign Keys in another Table.
            </summary>
        </member>
        <member name="P:Kvasir.Schema.PrimaryKey.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.PrimaryKey.Fields">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.PrimaryKey.#ctor(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.PrimaryKey"/> with no name.
            </summary>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.PrimaryKey.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.PrimaryKey"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.PrimaryKey.#ctor(Kvasir.Schema.KeyName,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.PrimaryKey"/> with no name.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.PrimaryKey.Name">name</see> of the new <see cref="T:Kvasir.Schema.PrimaryKey"/>.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.PrimaryKey.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.PrimaryKey"/>.
            </param>
        </member>
        <member name="M:Kvasir.Schema.PrimaryKey.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.PrimaryKey.Kvasir#Schema#IKey#GenerateDeclaration``1(Kvasir.Transcription.IKeyDeclBuilder{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Schema.Table">
            <summary>
              A single Table in a back-end relational database.
            </summary>
            <remarks>
              At present, there is only one implementation of the <see cref="T:Kvasir.Schema.ITable"/> interface in Kvasir. The
              <see cref="T:Kvasir.Schema.Table"/> class is used to represent entity Tables, list Tables, and relation Tables.
            </remarks>
        </member>
        <member name="P:Kvasir.Schema.Table.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.Item(Kvasir.Schema.FieldName)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.Fields">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.PrimaryKey">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.CandidateKeys">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.ForeignKeys">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Schema.Table.CheckConstraints">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.Table.#ctor(Kvasir.Schema.TableName,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},Kvasir.Schema.PrimaryKey,System.Collections.Generic.IEnumerable{Kvasir.Schema.CandidateKey},System.Collections.Generic.IEnumerable{Kvasir.Schema.ForeignKey},System.Collections.Generic.IEnumerable{Kvasir.Schema.CheckConstraint})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Schema.Table"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Schema.Table.Name">name</see> of the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <param name="fields">
              The <see cref="P:Kvasir.Schema.Table.Fields">Fields</see> that make up the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <param name="primaryKey">
              The <see cref="P:Kvasir.Schema.Table.PrimaryKey">Primary Key</see> of the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <param name="candidateKeys">
              The <see cref="P:Kvasir.Schema.Table.CandidateKeys">Candidate Keys</see> of the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <param name="foreignKeys">
              The <see cref="P:Kvasir.Schema.Table.ForeignKeys">Foreign Keys</see> of the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <param name="checkConstraints">
              The <see cref="P:Kvasir.Schema.Table.CheckConstraints"><c>CHECK</c> constraints</see> applied to the new <see cref="T:Kvasir.Schema.Table"/>.
            </param>
            <pre>
              The arguments provided to the constructor must, collectively, define a valid Table. In addition to
              requiring that all arguments be non-<see langword="null"/>, this means that there are at least two 
              <paramref name="fields">Fields</paramref> that all lateral Field references (i.e. from the 
              <paramref name="primaryKey">Primary Key</paramref>, all
              <paramref name="candidateKeys">Candidate Keys</paramref>, all
              <paramref name="foreignKeys">Foreign Keys</paramref>, and all
              <paramref name="checkConstraints"><c>CHECK</c> constraints</paramref> are to Fields that are present in
              the Table. Additionally, all Fields must have a unique <see cref="P:Kvasir.Schema.IField.Name">name</see>.
            </pre>
        </member>
        <member name="M:Kvasir.Schema.Table.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Schema.Table.Kvasir#Schema#ITable#GenerateDeclaration``5(Kvasir.Transcription.IBuilderFactory{``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Transaction.ICommands">
            <summary>
              The interface describing the selection and CRUD commands for a single <see cref="T:Kvasir.Schema.ITable">Table</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Transaction.ICommands.CreateTableCommand">
            <summary>
              The command that creates the target <see cref="T:Kvasir.Schema.Table"/> in the back-end database.
            </summary>
        </member>
        <member name="P:Kvasir.Transaction.ICommands.SelectAllQuery">
            <summary>
              The command that selects all data from the target <see cref="T:Kvasir.Schema.Table"/>. The rows should be returned in
              key-sorted order, which for Relation Tables guarantees that the rows are grouped by "owning Entity."
            </summary>
        </member>
        <member name="M:Kvasir.Transaction.ICommands.InsertCommand(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}})">
            <summary>
              Produce a command that, when executed against a back-end database and committed, inserts one or more rows
              of data into the target <see cref="T:Kvasir.Schema.Table"/>.
            </summary>
            <param name="rows">
              The rows of data to be inserted.
            </param>
        </member>
        <member name="M:Kvasir.Transaction.ICommands.UpdateCommand(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}})">
            <summary>
              Produce a command that, when executed against a back-end database and committed, updates the values of one
              or more rows that already exist in the target <see cref="T:Kvasir.Schema.Table"/>.
            </summary>
            <remarks>
              Kvasir itself does not do any mutation tracking outside of Relations, and even then its tracking is
              somewhat rudimentary. <see cref="T:Kvasir.Transaction.ICommands"/> implementations are free to implement their own state
              tracking, such that an update request does nothing if no state has actually changes. This is not required
              however: implementations may unconditionally perform an update, even if the result is no net difference.
              It is always safe to assume that the values that make up a particular Entity's primary key do not change.
            </remarks>
            <param name="rows">
              The full rows of data that should exist in the back-end database after the update.
            </param>
        </member>
        <member name="M:Kvasir.Transaction.ICommands.DeleteCommand(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{Kvasir.Schema.DBValue}})">
            <summary>
              Produce a command that, when executed against a back-end database and committed, deleted one or more rows
              from the target <see cref="T:Kvasir.Schema.Table"/>.
            </summary>
            <remarks>
              Deleting a row from a Principal Table may result in rows in various other tables (either other Entities'
              Principal Tables or Relation Tables) being invalid due to existing Foreign Keys. <see cref="T:Kvasir.Transaction.ICommands"/>
              implementations are encouraged to leverage <c>ON DELETE</c> behavior to account for these situations.
              Implementations may, however, handle such events manually (such as if <c>ON DELETE</c> behavior is not
              supported.)
            </remarks>
            <param name="rows">
              The rows of data that should be deleted. (Note that this is <b>not</b> just the rows' Primary Keys.)
            </param>
        </member>
        <member name="T:Kvasir.Transaction.ICommandsFactory">
            <summary>
              The interface describing how to create <see cref="T:Kvasir.Transaction.ICommands"/> instances.
            </summary>
            <remarks>
              The purpose of this interface is to provide a mechanism for the framework to create instances of the
              <see cref="T:Kvasir.Transaction.ICommands"/> interface for constituent without knowing anything about the particular
              implementation details. An implementation of the <see cref="T:Kvasir.Transaction.ICommandsFactory"/> interface should generally
              correspond to a particular back-end database provider (e.g. MySQL) and produce instances that can operate
              against that RDBMS.
            </remarks>
        </member>
        <member name="M:Kvasir.Transaction.ICommandsFactory.CreateCommands(Kvasir.Schema.ITable)">
            <summary>
              Get the <see cref="T:Kvasir.Transaction.ICommands"/> that defines database interactions against a particular
              <see cref="T:Kvasir.Schema.ITable">Table</see>.
            </summary>
            <param name="table">
              The <see cref="T:Kvasir.Schema.ITable">Table</see>.
            </param>
        </member>
        <member name="T:Kvasir.Transcription.IBuilderFactory`5">
            <summary>
              The interface for a factory that creates internally consistent declaration builders for generating
              Table-creating declarations.
            </summary>
            <remarks>
              <para>
                The <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/> interface is
                an abstract way to represent the rules of a particular back-end RDBMS provider. Implementations of the
                <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/> interface and the
                builders therefrom created are passed to the various components of the Schema Layer to generate
                Table-creating declarations once the schema structures have been synthesized. In this way, a single set of
                interfaces, defined by the builder factory, can be used to interface with any back-end RDBMS provider.
             </para>
             <para>
                Examples of rules that can vary from provider to provider may include, but are not limited to:
                <list type="bullet">
                  <item>Escaping the names of Fields, Tables, and Constraints</item>
                  <item>Specific data types</item>
                  <item>Realization of enumeration-type Fields</item>
                  <item>Spelling of logical comparison operators</item>
                </list>
             </para>
            </remarks>
        </member>
        <member name="M:Kvasir.Transcription.IBuilderFactory`5.NewConstraintDeclBuilder">
            <summary>
              Creates a new instance of the <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/> interface that produces
              declarations consistent with the rules of this
              <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/>.
            </summary>
            <returns>
              A new <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Transcription.IBuilderFactory`5.NewForeignKeyDeclBuilder">
            <summary>
              Creates a new instance of the <see cref="T:Kvasir.Transcription.IForeignKeyDeclBuilder`1"/> interface that produces
              declarations consistent with the rules of this
              <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IBuilderFactory`5.NewKeyDeclBuilder">
            <summary>
              Creates a new instance of the <see cref="T:Kvasir.Transcription.IKeyDeclBuilder`1"/> interface that produces declarations
              consistent with the rules of this
              <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IBuilderFactory`5.NewFieldDeclBuilder">
            <summary>
              Creates a new instance of the <see cref="T:Kvasir.Transcription.IFieldDeclBuilder`1"/> interface that produces declarations
              consistent with the rules of this
              <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IBuilderFactory`5.NewTableDeclBuilder">
            <summary>
              Creates a new instance of the
              <see cref="T:Kvasir.Transcription.ITableDeclBuilder`5"/> interface that
              produces declarations consistent with the rules of this
              <see cref="T:Kvasir.Transcription.IBuilderFactory`5"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Transcription.IConstraintDeclBuilder`1">
            <summary>
              The interface for a builder that produces declarations that define a single <c>CHECK</c>-style constraint
              within a larger Table-creating declaration.
            </summary>
            <typeparam name="TDecl">
              The type of declaration object produced by the builder.
            </typeparam>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.SetName(Kvasir.Schema.CheckName)">
            <summary>
              Sets the name of the <c>CHECK</c>-style constraint whose declaration is being built by this
              <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/>.
            </summary>
            <param name="name">
              The name.
            </param>
            <pre>
              <paramref name="name"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.StartClause">
            <summary>
              Begins a new compound clause in the <c>CHECK</c>-style constraint being defined by the current builder's
              declaration. This is the equivalent of placing an open parenthesis when writing the full condition from
              left-to-right.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.EndClause">
            <summary>
              Ends the most-recently-started compound clause in the <c>CHECK</c>-style constraint being defined by the
              current builder's declaration. This is the equivalent of placing a close parenthesis when writing the
              full condition from right-to-left.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.And">
            <summary>
              Places an <c>AND</c> operator into the <c>CHECK</c>-style constraint being defined by the current
              builder's declaration.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.Or">
            <summary>
              Places an <c>OR</c> operator into the <c>CHECK</c>-style constraint being defined by the current builder's
              declaration.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.ConstantClause)">
            <summary>
              Adds a new <see cref="T:Kvasir.Schema.ConstantClause"/> to the <c>CHECK</c>-style constraint being defined by the current
              builder's declaration.
            </summary>
            <param name="clause">
              The <see cref="T:Kvasir.Schema.ConstantClause"/>.
            </param>
            <pre>
              <paramref name="clause"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.CrossFieldClause)">
            <summary>
              Adds a new <see cref="T:Kvasir.Schema.CrossFieldClause"/> to the <c>CHECK</c>-style constraint being defined by the
              current builder's declaration.
            </summary>
            <param name="clause">
              The <see cref="T:Kvasir.Schema.CrossFieldClause"/>.
            </param>
            <pre>
              <paramref name="clause"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.InclusionClause)">
            <summary>
              Adds a new <see cref="T:Kvasir.Schema.InclusionClause"/> to the <c>CHECK</c>-style constraint being defined by the current
              builder's declaration.
            </summary>
            <param name="clause">
              The <see cref="T:Kvasir.Schema.InclusionClause"/>.
            </param>
            <pre>
              <paramref name="clause"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.NullityClause)">
            <summary>
              Adds a new <see cref="T:Kvasir.Schema.NullityClause"/> to the <c>CHECK</c>-style constraint being defined by the current
              builder's declaration.
            </summary>
            <param name="clause">
              The <see cref="T:Kvasir.Schema.NullityClause"/>.
            </param>
            <pre>
              <paramref name="clause"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IConstraintDeclBuilder`1.Build">
            <summary>
              Produces the full declaration that has been built up by calls into other methods on this
              <see cref="T:Kvasir.Transcription.IConstraintDeclBuilder`1"/>.
            </summary>
            <pre>
              At least one of <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.ConstantClause)"/>, <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.CrossFieldClause)"/>,
              <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.InclusionClause)"/>, and <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.AddClause(Kvasir.Schema.NullityClause)"/> has been called at
              least once
                --and--
              <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.StartClause"/> has been called the same number of times as <see cref="M:Kvasir.Transcription.IConstraintDeclBuilder`1.EndClause"/>.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> declaring a single <c>CHECK</c>-style constraint.
            </returns>
        </member>
        <member name="T:Kvasir.Transcription.IFieldDeclBuilder`1">
            <summary>
              The interface for a builder that produces declarations that define a single Field within a larger
              Table-creating declaration.
            </summary>
            <typeparam name="TDecl">
              The type of declaration object produced by the builder.
            </typeparam>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetName(Kvasir.Schema.FieldName)">
            <summary>
              Sets the name of the Field being defined by the current builder's declaration.
            </summary>
            <param name="name">
              The name.
            </param>
            <pre>
              <paramref name="name"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetDataType(Kvasir.Schema.DBType)">
            <summary>
              Sets the data type of the Field being defined by the current builder's declaration.
            </summary>
            <param name="dataType">
              The data type.
            </param>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetNullability(Kvasir.Schema.IsNullable)">
            <summary>
              Sets the nullability of the Field being defined by the current builder's declaration.
            </summary>
            <param name="nullability">
              The nullability.
            </param>
            <pre>
              <paramref name="nullability"/> is valid.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetDefaultValue(Kvasir.Schema.DBValue)">
            <summary>
              Sets the default value of the Field being defined by the current builder's declaration.
            </summary>
            <param name="value">
              The default value.
            </param>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetAllowedValues(System.Collections.Generic.IEnumerable{Kvasir.Schema.DBValue})">
            <summary>
              Sets the list of allowed values for the Field being defined by the current builder's declaration.
            </summary>
            <param name="values">
              The allowed values.
            </param>
            <pre>
              <paramref name="values"/> is not <see langword="null"/>
                --and--
              <paramref name="values"/> contains at last one element.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IFieldDeclBuilder`1.Build">
            <summary>
              Produce the full declaration that has been built up by calls into other methods on this
              <see cref="T:Kvasir.Transcription.IFieldDeclBuilder`1"/>.
            </summary>
            <pre>
              <see cref="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetName(Kvasir.Schema.FieldName)"/> has been called at least once
                --and--
              <see cref="M:Kvasir.Transcription.IFieldDeclBuilder`1.SetDataType(Kvasir.Schema.DBType)"/> has been called at least once.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> declaring a single Field.
            </returns>
        </member>
        <member name="T:Kvasir.Transcription.IForeignKeyDeclBuilder`1">
            <summary>
              The interface for a builder that produces declarations that define a single Foreign Key within a larger
              Table-creating declaration.
            </summary>
            <typeparam name="TDecl">
              The type of declaration object produced by the builder.
            </typeparam>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetName(Kvasir.Schema.FKName)">
            <summary>
              Sets the name of the Foreign Key being defined by the current builder's declaration.
            </summary>
            <param name="name">
              The name.
            </param>
            <pre>
              <paramref name="name"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetOnDeleteBehavior(Kvasir.Schema.OnDelete)">
            <summary>
              Sets the <c>ON DELETE</c> behavior of the Foreign Key being defined by the current builder's declaration.
            </summary>
            <param name="behavior">
              The <c>ON DELETE</c> behavior.
            </param>
            <pre>
              <paramref name="behavior"/> is valid.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetOnUpdateBehavior(Kvasir.Schema.OnUpdate)">
            <summary>
              Sets the <c>ON UPDATE</c> behavior of the Foreign Key being defined by the current builder's declaration.
            </summary>
            <param name="behavior">
              The <c>ON UPDATE</c> behavior.
            </param>
            <pre>
              <paramref name="behavior"/> is valid.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetReferencedTable(Kvasir.Schema.ITable)">
            <summary>
              Sets the Table referenced by the Foreign Key being defined by the current builder's declaration.
            </summary>
            <param name="table">
              The Table.
            </param>
            <pre>
              <paramref name="table"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetFields(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Sets the collection of Fields that comprise the Foreign Key being defined by the current builder's
              declaration.
            </summary>
            <param name="fields">
              The Fields.
            </param>
            <pre>
              <paramref name="fields"/> is not <see langword="null"/>
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.Build">
            <summary>
              Produces the full declaration that has been built up by calls into other methods on this
              <see cref="T:Kvasir.Transcription.IForeignKeyDeclBuilder`1"/>.
            </summary>
            <pre>
              <see cref="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetReferencedTable(Kvasir.Schema.ITable)"/> has been called at least once
                --and--
              <see cref="M:Kvasir.Transcription.IForeignKeyDeclBuilder`1.SetFields(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})"/> has been called at least once.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> declaring a single Foreign Key.
            </returns>
        </member>
        <member name="T:Kvasir.Transcription.IKeyDeclBuilder`1">
            <summary>
              The interface for a builder that produces declarations that define a single Primary Key or a single Candidate
              Key within a larger Table-creating declaration.
            </summary>
            <typeparam name="TDecl">
              The type of declaration object produced by the builder.
            </typeparam>
        </member>
        <member name="M:Kvasir.Transcription.IKeyDeclBuilder`1.SetName(Kvasir.Schema.KeyName)">
            <summary>
              Sets the name of the Primary Key or Candidate Key being defined by the current builder's declaration.
            </summary>
            <param name="name">
              The name.
            </param>
            <pre>
              <paramref name="name"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IKeyDeclBuilder`1.SetFields(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Sets the collection of Fields that comprise the Primary Key or Candidate Key being defined by the
              current builder's declaration.
            </summary>
            <param name="fields">
              The Fields.
            </param>
            <pre>
              <paramref name="fields"/> is not <see langword="null"/>
                --and--
              <paramref name="fields"/> contains at least one element.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.IKeyDeclBuilder`1.SetAsPrimaryKey">
            <summary>
              Marks the declaration being built as one for a Primary Key rather than a Candidate Key.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.IKeyDeclBuilder`1.Build">
            <summary>
              Produces the full declaration that has been built up by calls into other methods on this
              <see cref="T:Kvasir.Transcription.IKeyDeclBuilder`1"/>.
            </summary>
            <pre>
              <see cref="M:Kvasir.Transcription.IKeyDeclBuilder`1.SetFields(System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})"/> has been called at least once.
            </pre>
            <returns>
              A <typeparamref name="TDecl"/> declaring a single Primary Key or a single Candidate Key.
            </returns>
        </member>
        <member name="T:Kvasir.Transcription.ITableDeclBuilder`5">
            <summary>
              The interface for a builder that produces declarations that define a single Table.
            </summary>
            <typeparam name="TTableDecl">
              The type of declaration object produced by the builder.
            </typeparam>
            <typeparam name="TFieldDecl">
              The type of declaration object through which the builder will manage Fields.
            </typeparam>
            <typeparam name="TKeyDecl">
              The type of declaration object through which the builder will manage Primary Keys and Candidate Keys.
            </typeparam>
            <typeparam name="TConstraintDecl">
              The type of declaration object through which the builder will manage <c>CHECK</c>-style constraints.
            </typeparam>
            <typeparam name="TFKDecl">
              The type of declaration object through which the builder will manage Foreign Keys.
            </typeparam>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.SetName(Kvasir.Schema.TableName)">
            <summary>
              Sets the name of the Table being declared by the current builder's overall declaration.
            </summary>
            <param name="name">
              The name.
            </param>
            <pre>
              <paramref name="name"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.AddFieldDeclaration(`1)">
            <summary>
              Adds a Field to the Table being declared by the current builder's overall declaration.
            </summary>
            <param name="decl">
              The Field declaration.
            </param>
            <pre>
              <paramref name="decl"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.SetPrimaryKeyDeclaration(`2)">
            <summary>
              Sets the Primary Key of the Table being declared by the current builder's overall declaration.
            </summary>
            <param name="decl">
              The Primary Key declaration.
            </param>
            <pre>
              <paramref name="decl"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.AddCandidateKeyDeclaration(`2)">
            <summary>
              Adds the declaration of a Candidate Key to the Table being declared by the current builder's overall
              declaration.
            </summary>
            <param name="decl">
              The Candidate Key declaration.
            </param>
            <pre>
              <paramref name="decl"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.AddForeignKeyDeclaration(`4)">
            <summary>
              Adds a Foreign Key to the Table being declared by the current builder's overall declaration.
            </summary>
            <param name="decl">
              The Foreign Key declaration.
            </param>
            <pre>
              <paramref name="decl"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.AddCheckConstraintDeclaration(`3)">
            <summary>
              Adds a <c>CHECK</c>-style constraint to the Table being declared by the current builder's overall
              declaration.
            </summary>
            <param name="decl">
              The <c>CHECK</c>-style constraint declaration.
            </param>
            <pre>
              <paramref name="decl"/> is not <see langword="null"/>.
            </pre>
        </member>
        <member name="M:Kvasir.Transcription.ITableDeclBuilder`5.Build">
            <summary>
              Produces the full statement that has been built up by calls into the other methods on this
              <see cref="T:Kvasir.Transcription.ITableDeclBuilder`5"/>.
            </summary>
            <pre>
              <see cref="M:Kvasir.Transcription.ITableDeclBuilder`5.SetName(Kvasir.Schema.TableName)"/> has been called at least once
                --and--
              <see cref="M:Kvasir.Transcription.ITableDeclBuilder`5.AddFieldDeclaration(`1)"/> has been called at least twice
                --and--
              <see cref="M:Kvasir.Transcription.ITableDeclBuilder`5.SetPrimaryKeyDeclaration(`2)"/> has been called at least once.
            </pre>
            <returns>
              A <typeparamref name="TTableDecl"/> declaring a single Table.
            </returns>
        </member>
        <member name="T:Kvasir.Transcription.SqlSnippet">
            <summary>
              A strongly typed <see cref="T:System.String"/> that represents a full or partial SQL statement or query.
            </summary>
        </member>
        <member name="M:Kvasir.Transcription.SqlSnippet.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Transcription.SqlSnippet"/>.
            </summary>
            <param name="sql">
              The contents of the new <see cref="T:Kvasir.Transcription.SqlSnippet"/>. Leading and trailing whitespace are discarded.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="sql"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="sql"/> is zero-length
                --or--
              if <paramref name="sql"/> consists only of whitespace.
            </exception>
        </member>
        <member name="T:Kvasir.Translation.Translator">
            <summary>
              The Translator, which converts CLR Entity Types into schema models and data manipulation (e.g. extraction,
              reconstitution, repopulation) plans.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Translator.AssignColumns(Kvasir.Translation.Context,System.Collections.Generic.IReadOnlyList{Kvasir.Translation.FieldGroup})">
            <summary>
              Assign columns to a collection of <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see>, accounting for any
              <c>[Column]</c> annotations that have already been processed.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the type encapsulating <paramref name="groups"/> is being translated.
            </param>
            <param name="groups">
              The collection of <paramref name="groups"/>.  These groups will be <i>modified</i> in-place.
            </param>
            <exception cref="T:Kvasir.Translation.CannotAssignColumnsException">
              if any of the <paramref name="groups"/> are required to overlap
                --or--
              if the <paramref name="groups"/> cannot be assigned consecutive, non-overlapping column indices without
              leaving one or more gaps.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.TranslatePrincipalTable(Kvasir.Translation.Context,System.Type)">
            <summary>
              Translates only the Principal Table for an Entity Type, ignoring all Relations.
            </summary>
            <remarks>
              This method is invoked from two different evaluation streams. The first is when translating an Entity in
              full, such as when the <see cref="P:Kvasir.Translation.Translator.Item(System.Type)">index operator</see> is used. In this case, translation of
              the Principal Table will be immediately followed by translation of the Entity's Relations. The second is
              <i>during</i> the translation of a Principal Table or a Relation when a Reference property is encountered.
              In this case, we need to delay the translation of Relations until a later time, since Relations are
              allowed to contain reference cycles.
            </remarks>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> is being translated. This <b>should</b>
              include that type.
            </param>
            <param name="source">
              The Entity Type.
            </param>
            <returns>
              The <see cref="T:Kvasir.Translation.PrincipalTableDef"/> for <paramref name="source"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.InvalidEntityTypeException">
              if <paramref name="source"/> is not a valid Entity Type (e.g. it is an interface, or is a generic, or is
              <see langword="abstract"/>, etc.).
            </exception>
            <exception cref="T:Kvasir.Translation.NotEnoughFieldsException">
              if <paramref name="source"/> does not contribute at least 2 Fields to the data model for its Principal
              Table.
            </exception>
            <exception cref="T:Kvasir.Translation.DuplicateNameException">
              if 2 or more Fields in the data model of the Principal Table for <paramref name="source"/> have the same
              name
                --or--
              if the name of the Principal Table of <paramref name="source"/> is already taken by another Entity's
              Principal Table or by some Relation Table.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.TranslateRelationTables(System.Type)">
            <summary>
              Translates the Relation Tables "owned" by an Entity Type.
            </summary>
            <param name="source">
              The "owning" Entity Type.
            </param>
            <returns>
              A collection of <see cref="T:Kvasir.Translation.RelationTableDef">Table definitions</see>, in no particular order, for the
              Relation Tables "owned" by <paramref name="source"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.DuplicateNameException">
              if 2 or more Fields in the data model of any Relation Table "owned" by <paramref name="source"/> have the
              same name
                --or--
              if the name of any of the Relation Tables "owned" by <paramref name="source"/> is already taken by another
              Entity's Principal Table or by some other Relation Table (including another Relation Table "owned" by
              <paramref name="source"/>).
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.GetTableName(Kvasir.Translation.Context,System.Type)">
            <summary>
              Determines the name of the Principal Table for an Entity Type.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> is being translated.
            </param>
            <param name="source">
              The Entity Type.
            </param>
            <returns>
              The name of the Principal Table of <paramref name="source"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.InvalidNameException">
              if <paramref name="source"/> is annotated with a <see cref="T:Kvasir.Annotations.TableAttribute"><c>[Table]</c></see>
              annotation whose value is either <see langword="null"/> or the empty string.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.GetTableName(Kvasir.Translation.RelationTracker,System.Type)">
            <summary>
              Determines the name of a Relation Table defined by a property nested within an Entity Type.
            </summary>
            <param name="tracker">
              The <see cref="T:Kvasir.Translation.RelationTracker"/> contextualizing the translation of the Relation-type property.
            </param>
            <param name="source">
              The "owning" Entity Type.
            </param>
            <returns>
              The default name of the Relation Table for the property encapsulated by <paramref name="tracker"/>. Note
              that <see cref="T:Kvasir.Annotations.RelationTableAttribute">[RelationTable]</see> annotations are not considered.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Translator.GetTableConstraints(Kvasir.Translation.Context,System.Type,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldSchema},Kvasir.Core.Settings)">
            <summary>
              Identifies all of the custom <c>CHECK</c> constraints applied to a Entity's Principal Table.
            </summary>
            <exception cref="T:Kvasir.Translation.InvalidCustomConstraintException">
              if <paramref name="source"/> is annotated with at least one <c>[Check.Complex]</c> annotation that has a
              populated <see cref="P:Kvasir.Annotations.Check.ComplexAttribute.UserError">user error</see>
                --or--
              if <paramref name="source"/> is annotated with at least one <c>[Check.Complex]</c> annotation for which no
              Fields were provided.
            </exception>
            <exception cref="T:Kvasir.Translation.UnrecognizedFieldException">
              if <paramref name="source"/> is annotated with at least one <c>[Check.Complex]</c> annotation for which
              at least one of the provided Fields does not exist in <paramref name="schemas"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.KeyTranslator.ComputeKeys(Kvasir.Translation.Context,System.Type,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldSchema})">
            <summary>
              Determine the <see cref="T:Kvasir.Schema.PrimaryKey"/> and all <see cref="T:Kvasir.Schema.CandidateKey">Candidate Keys</see> of the
              Principal Table for an Entity Type.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the key determinations are being made.
            </param>
            <param name="source">
              The Entity Type.
            </param>
            <param name="schemas">
              The Field schemas for the Principal Table of <paramref name="source"/>.
            </param>
            <returns>
              An named tuple whose first element (<c>PrimaryKey</c>) is the Primary Key for the Principal Table of
              <paramref name="source"/> and whose second element (<c>CandidateKeys</c>) is an enumerable of all the
              table's Candidate Keys.
            </returns>
            <exception cref="T:Kvasir.Translation.ConflictingKeyNameException">
              if the <see cref="T:Kvasir.Schema.PrimaryKey"/> is supposed to be named, but the name is the same as a non-anonymous
              Candidate Key that was not deduced as the Primary Key.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.KeyTranslator.IsPreferable(Kvasir.Schema.CandidateKey,Kvasir.Schema.CandidateKey)">
            <summary>
              Determines if one <see cref="T:Kvasir.Schema.CandidateKey"/> is preferable to another, meaning that it should be kept
              in the final schema while the other should be discarded.
            </summary>
            <remarks>
              A <see cref="T:Kvasir.Schema.CandidateKey"/> is preferable to another if its Fields are a strict subset of the other's
              Fields, regardless of order. If the two keys are partially disjoint, then neither is preferable to the
              other. When two keys contain identical Fields, the "preferable" key is undefined, except that only one
              is preferable and the preference is consistent.
            </remarks>
            <param name="lhs">
              The left-hand operand.
            </param>
            <param name="rhs">
              The right-hand operand.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is preferable to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Translator.KeyTranslator.MakeCandidateKey(Kvasir.Schema.KeyName,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField})">
            <summary>
              Creates a named or unnamed <see cref="T:Kvasir.Schema.CandidateKey"/>.
            </summary>
            <param name="name">
              The name of the new Candidate Key. If this value begins with the reserved anonymous prefix, the
              ensuing Candidate Key will be unnamed.
            </param>
            <param name="fields">
              The Fields that comprise the new Candidate Key.
            </param>
            <returns>
              A new <see cref="T:Kvasir.Schema.CandidateKey"/> consisting of <paramref name="fields"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Translator.KeyTranslator.DeducePrimaryKey(Kvasir.Translation.Context,System.Type,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldSchema},System.Collections.Generic.IEnumerable{Kvasir.Schema.CandidateKey})">
            <summary>
              Deduces the Primary Key for a Principal Table.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the Primary Key is being deduced.
            </param>
            <param name="source">
              The Entity Type for whose Principal Table the Primary Key is being deduced.
            </param>
            <param name="schemas">
              The set of Field schemas that comprise the Principal Table for <paramref name="source"/>.
            </param>
            <param name="candidateKeys">
              The <see cref="T:Kvasir.Schema.CandidateKey">Candidate Keys</see> for the Principal Table of
              <paramref name="source"/>.
            </param>
            <returns>
              The <see cref="T:Kvasir.Schema.PrimaryKey"/> deduced for the Principal Table of <paramref name="source"/> based on
              <paramref name="schemas"/> and <paramref name="candidateKeys"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.CannotDeducePrimaryKeyException">
              if no Primary Key can be deduced.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidNameException">
              if <paramref name="source"/> is annotated with a
              <see cref="T:Kvasir.Annotations.NamedPrimaryKeyAttribute"><c>[NamedPrimaryKey]</c></see> annotation that carries an invalid
              key name.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.CreateForeignKeys(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Produces the <see cref="T:Kvasir.Schema.ForeignKey">ForeignKeys</see> referenced by a set of Fields.
            </summary>
            <param name="fields">
              The collection of Fields.
            </param>
            <returns>
              A collection of <see cref="T:Kvasir.Schema.ForeignKey">ForeignKeys</see> referenced by <paramref name="fields"/>, in no
              particular order.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Translator.TranslateType(Kvasir.Translation.Context,System.Type,System.Boolean)">
            <summary>
              Translates a single CLR type.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> is being translated. This should include
              <paramref name="source"/> already.
            </param>
            <param name="source">
              The CLR type to translate.
            </param>
            <param name="allowRelations">
              <see langword="true"/> if Relations should be allowed as valid (e.g. when translating a real Entity Type);
              <see langword="false"/> if Relations should be disallowed (e.g. when translating a Relation).
            </param>
            <returns>
              The unordered (but column-assigned) Fields that make up the data model for <paramref name="source"/>, with
              only the annotations available form <paramref name="source"/> applied. The returned groups can be mutated
              without affecting other translations.
            </returns>
            <exception cref="T:Kvasir.Translation.ConflictingAnnotationsException">
              if any property of <paramref name="source"/> is annotated with both
              <see cref="T:Kvasir.Annotations.IncludeInModelAttribute">[IncludeInModel]</see> and
              <see cref="T:Kvasir.Annotations.CodeOnlyAttribute">[CodeOnly]</see>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidPropertyInDataModelException">
              if a write-only property of <paramref name="source"/> is annotated with
              <see cref="T:Kvasir.Annotations.IncludeInModelAttribute">[IncludeInModel]</see>
                --or--
              if an indexer of <paramref name="source"/> is annotated with
              <see cref="T:Kvasir.Annotations.IncludeInModelAttribute">[IncludeInModel]</see>
                --or--
              if a property of <paramref name="source"/> whose type is not supported (e.g. is a delegate, comes from a
              different assembly, etc.) would be included in the data model
            </exception>
            <exception cref="T:Kvasir.Translation.NotEnoughFieldsException">
              if <paramref name="source"/> corresponds to an Aggregate that contributes fewer than 1 Field to the data
              model.
            </exception>
            <exception cref="T:Kvasir.Translation.NestedRelationException">
              if <paramref name="allowRelations"/> is <see langword="false"/> and <paramref name="source"/> has a
              Relation-type Field that would be included in the data model.
            </exception>
        </member>
        <member name="P:Kvasir.Translation.Translator.Item(System.Type)">
            <summary>
              Translates a CLR type, and any other type reference by it.
            </summary>
            <param name="source">
              The CLR <see cref="T:System.Type"/> to be translated.
            </param>
            <returns>
              [GET] The translation of <paramref name="source"/>.
            </returns>
            <exception cref="T:Kvasir.Exceptions.KvasirException">
              if <paramref name="source"/> cannot be translated (for example, it contains an invalid annotation or
              has a reference cycle); note that the translation error may occur on a different type that is being
              translated due to a reference from <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Translator.#ctor(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.Translator"/> that uses default <see cref="T:Kvasir.Core.Settings"/>.
            </summary>
            <param name="entityLookup">
              The function used to look up the collection of existing Entities for a given <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.Translator.#ctor(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}},Kvasir.Core.Settings)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.Translator"/> that uses custom <see cref="T:Kvasir.Core.Settings"/>.
            </summary>
            <param name="entityLookup">
              The function used to look up the collection of existing Entities for a given <see cref="T:System.Type"/>.
            </param>
            <param name="settings">
              The <see cref="T:Kvasir.Core.Settings"/> according to which to perform the translation.
            </param>
            <remarks>
              Note that the settings are not currently used for anything; in fact, there are no traits available in the
              <see cref="T:Kvasir.Core.Settings"/> class. Instead, the settings serve as a forward compatibility mechanism that allows
              us to provide customization of behaviors in the future without necessitating a significant redesign.
            </remarks>
        </member>
        <member name="T:Kvasir.Translation.Categorization">
            <summary>
              A collection of extension methods for categorizing various CLR components during translation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Categorization.TranslationCategory(System.Type)">
            <summary>
              Categorizes a <see cref="T:System.Type"/>.
            </summary>
            <param name="self">
              The <see cref="T:System.Type"/> on which this extension method was invoked.
            </param>
            <returns>
              The <see cref="T:Kvasir.Translation.TypeCategory"/> of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Categorization.TranslationCategory(System.Reflection.PropertyInfo)">
            <summary>
              Categories a <see cref="T:System.Reflection.PropertyInfo">property</see>.
            </summary>
            <param name="self">
              The <see cref="T:System.Reflection.PropertyInfo">property</see> on which the extension method was invoked.
            </param>
            <returns>
              The <see cref="T:Kvasir.Translation.PropertyCategory"/> of <paramref name="self"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.TypeCategory">
            <summary>
              A "smart enum" representing the broad categorization of a CLR <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.PropertyCategory">
            <summary>
              A "smart enum" representing the broad categorization of a CLR <see cref="T:System.Reflection.PropertyInfo">property</see>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.Context">
            <summary>
              A trace of the Translation process.
            </summary>
            <remarks>
              This type is intended to be used as a resource handle, being extended at the beginning of a particular scope
              and then unwounded automatically at the end of the scope. Its primary purpose is to detect impermissible
              reference cycles and to enable contextualized error messages.
            </remarks>
        </member>
        <member name="P:Kvasir.Translation.Context.TranslatingEntity">
            <summary>
              Whether or not the <see cref="T:Kvasir.Translation.Context"/> refers to the translation of an Entity, rather than an Aggregate.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Context.#ctor(System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.Context"/>.
            </summary>
            <param name="initial">
              The initial <see cref="T:System.Type"/> whose translation will be tracked by the new <see cref="T:Kvasir.Translation.Context"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.Context.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a frozen (i.e. immutable) copy of another <see cref="T:Kvasir.Translation.Context"/>.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.Context"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.Context.Freeze">
            <summary>
              Creates a frozen (i.e. immutable) copy of this <see cref="T:Kvasir.Translation.Context"/>.
            </summary>
            <returns>
              A deep copy of this <see cref="T:Kvasir.Translation.Context"/> that cannot be pushed onto or popped from.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Context.Push(System.Type)">
            <summary>
              Indicates that translation is proceeding on to a new <see cref="T:System.Type"/>.
            </summary>
            <param name="next">
              The new <see cref="T:System.Type"/> that is now being translated.
            </param>
            <returns>
              A resource handle whose disposal will unwind the <see cref="T:Kvasir.Translation.Context"/> by one stage, namely the stage
              corresponding to the translation of <paramref name="next"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.ReferenceCycleException">
              if <paramref name="next"/> is already in the backtrace of the <see cref="T:Kvasir.Translation.Context"/>, either as the initial
              translated <see cref="T:System.Type"/> or one that was <see cref="M:Kvasir.Translation.Context.Push(System.Type)">pushed on</see>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Context.Push(System.Reflection.PropertyInfo)">
            <summary>
              Indicates that translation is proceeding on to a new <see cref="T:System.Reflection.PropertyInfo">property</see>.
            </summary>
            <param name="next">
              The new <see cref="T:System.Reflection.PropertyInfo">property</see> that is now being translated.
            </param>
            <returns>
              A resource handle whose disposal will unwind the <see cref="T:Kvasir.Translation.Context"/> by one stage, namely the stage
              corresponding to the translation of <paramref name="next"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Context.Pop">
            <summary>
              Pop the most recent stage of the <see cref="T:Kvasir.Translation.Context"/>.
            </summary>
            <remarks>
              Unwinding a Context happens for one of two reasons: either we have finished translating a Type, or we have
              finished translating a Property. In the former case, we are necessarily returning to the translation of a
              Property, namely the Property whose own type is the Type we just finished translating. In the latter case,
              we are necessarily returning to the translation of a Type, namely the Type that owns the Property we just
              finished translating.
            </remarks>
        </member>
        <member name="M:Kvasir.Translation.Context.ToString">
            <summary>
              Produces a human-readable string representation of the <see cref="T:Kvasir.Translation.Context"/>.
            </summary>
            <returns>
              A representation of the <see cref="T:Kvasir.Translation.Context"/>, describing the initial <see cref="T:System.Type"/> and all
              subsequent stages.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Context.NameOf(System.Reflection.PropertyInfo)">
            <summary>
              Produces the native name of a property, accounting for explicit interface implementations and indexers.
            </summary>
            <param name="property">
              The property.
            </param>
            <returns>
              The name of <paramref name="property"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.EntityTranslation">
            <summary>
              A translation of a single CLR type.
            </summary>
            
            <param name="CLRSource">The CLR <see cref="T:System.Type"/> that produced this <see cref="T:Kvasir.Translation.EntityTranslation"/></param>
            <param name="Principal">The definition of the Principal Table</param>
            <param name="Relations">The definitions of any Relation Tables</param>
        </member>
        <member name="M:Kvasir.Translation.EntityTranslation.#ctor(System.Type,Kvasir.Translation.PrincipalTableDef,System.Collections.Generic.IReadOnlyList{Kvasir.Translation.RelationTableDef})">
            <summary>
              A translation of a single CLR type.
            </summary>
            
            <param name="CLRSource">The CLR <see cref="T:System.Type"/> that produced this <see cref="T:Kvasir.Translation.EntityTranslation"/></param>
            <param name="Principal">The definition of the Principal Table</param>
            <param name="Relations">The definitions of any Relation Tables</param>
        </member>
        <member name="P:Kvasir.Translation.EntityTranslation.CLRSource">
            <summary>The CLR <see cref="T:System.Type"/> that produced this <see cref="T:Kvasir.Translation.EntityTranslation"/></summary>
        </member>
        <member name="P:Kvasir.Translation.EntityTranslation.Principal">
            <summary>The definition of the Principal Table</summary>
        </member>
        <member name="P:Kvasir.Translation.EntityTranslation.Relations">
            <summary>The definitions of any Relation Tables</summary>
        </member>
        <member name="T:Kvasir.Translation.AmbiguousNullabilityException">
            <summary>
              An exception that is raised when the nullability of an Aggregate property causes an ambiguity.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.AmbiguousNullabilityException.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AmbiguousNullabilityException"/> caused by a natively nullable Aggregate
              property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the ambiguously nullable Aggregate was encountered.
            </param>
        </member>
        <member name="M:Kvasir.Translation.AmbiguousNullabilityException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.NullableAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AmbiguousNullabilityException"/> caused by an Aggregate property that is
              directly or indirectly marked with a <see cref="T:Kvasir.Annotations.NullableAttribute">[Nullable]</see> annotation.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the ambiguously nullable Aggregate was encountered.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
        </member>
        <member name="T:Kvasir.Translation.CannotAssignColumnsException">
            <summary>
              An exception that is raised when the Fields that comprise the data model of a type cannot be placed into
              consecutive, non-overlapping columns.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.CannotAssignColumnsException.#ctor(Kvasir.Translation.Context,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.CannotAssignColumnsException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the failed column assignment occurred.
            </param>
            <param name="reason">
              The reason for the failed column assignment.
            </param>
        </member>
        <member name="T:Kvasir.Translation.CannotDeducePrimaryKeyException">
            <summary>
              An exception that is raised when the Primary Key for a table cannot be determined.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.CannotDeducePrimaryKeyException.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.CannotDeducePrimaryKeyException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the failed deduction occurred.
            </param>
        </member>
        <member name="T:Kvasir.Translation.ConflictingAnnotationsException">
            <summary>
              An exception that is raised when two annotations that inherently contradictory are both applied to the same
              property.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.ConflictingAnnotationsException.#ctor(Kvasir.Translation.Context,System.Type,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ConflictingAnnotationsException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="first">
              The type of the first of the two conflicting annotations.
            </param>
            <param name="second">
              The type of the second of the two conflicting annotations.
            </param>
        </member>
        <member name="T:Kvasir.Translation.ConflictingKeyNameException">
            <summary>
              An exception that is raised when the name of a Primary Key for a table matches that of a Candidate Key.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.ConflictingKeyNameException.#ctor(Kvasir.Translation.Context,Kvasir.Schema.CandidateKey)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ConflictingKeyNameException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the name conflict was encountered.
            </param>
            <param name="conflict">
              The Candidate Key with the same name as the table's Primary Key.
            </param>
        </member>
        <member name="T:Kvasir.Translation.DuplicateAnnotationException">
            <summary>
              An exception that is raised when two or more of a single annotation are concurrently applied to the same
              property from the same translation scope.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.DuplicateAnnotationException.#ctor(Kvasir.Translation.Context,System.String,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.DuplicateAnnotationException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="path">
              The path to which the duplicated annotations are applied.
            </param>
            <param name="annotationType">
              The <see cref="T:System.Type"/> of the duplicated annotation.
            </param>
        </member>
        <member name="T:Kvasir.Translation.DuplicateNameException">
            <summary>
              An exception that is thrown when a name is duplicated.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.DuplicateNameException.#ctor(Kvasir.Translation.Context,Kvasir.Schema.FieldName)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.DuplicateNameException"/> caused by a Field name being duplicated on an
              Entity.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the duplicate Table name was encountered.
            </param>
            <param name="name">
              The duplicated Field name.
            </param>
        </member>
        <member name="M:Kvasir.Translation.DuplicateNameException.#ctor(Kvasir.Translation.Context,Kvasir.Schema.TableName,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.DuplicateNameException"/> caused by a Table name being duplicated when it is
              already in use by an Entity's Principal Table or by a Relation Table.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the duplicate Table name was encountered.
            </param>
            <param name="name">
              The duplicated Table name.
            </param>
            <param name="otherType">
              The Entity or Synthetic type that has already claimed <paramref name="name"/> for its Principal or
              Relation Table.
            </param>
        </member>
        <member name="T:Kvasir.Translation.FailedOperationException">
            <summary>
              An exception that is raised when an attempt to execute an operation that is at least partly user-defined
              fails.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.FailedOperationException.#ctor(Kvasir.Translation.Context,System.Object,System.Exception)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FailedOperationException"/> caused by an exception raised when performing a
              data conversion.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the failed data conversion occurred.
            </param>
            <param name="sourceValue">
              The value that could not be converted..
            </param>
            <param name="ex">
              The exception raised when attempting to convert <paramref name="sourceValue"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FailedOperationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.CheckAttribute,System.Exception)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FailedOperationException"/> caused by an exception raised when generating a
              custom simple <c>CHECK</c> constraint.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The problematic <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation.
            </param>
            <param name="ex">
              The exception raised when attempting to generate the custom <c>CHECK</c> constraint using the generator on
              <paramref name="annotation"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FailedOperationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComplexAttribute,System.Exception)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FailedOperationException"/> caused by an exception raised when generating a
              custom complex <c>CHECK</c> constraint.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.InapplicableAnnotationException">
            <summary>
              An exception that is raised when an annotation is placed on, or applies to, a property for which it is
              inapplicable.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,System.Type,System.Type,Kvasir.Translation.MultiKind)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a non-constraint annotation being
              placed on an Aggregate property, a Reference property, or a Relation property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable annotation was encountered.
            </param>
            <param name="annotationType">
              The type of the inapplicable annotation.
            </param>
            <param name="propertyType">
              The type of the property to which the inapplicable annotation was applied.
            </param>
            <param name="kind">
              The kind of property on which the annotation was erroneously placed.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation,System.Type,Kvasir.Translation.MultiKind)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a constraint annotation being
              placed on or applying to, an Aggregate property, a Reference property, or a Relation property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable constraint annotation was encountered.
            </param>
            <param name="annotation">
              The inapplicable constraint annotation.
            </param>
            <param name="propertyType">
              The type of the property to which <paramref name="annotation"/> was applied.
            </param>
            <param name="kind">
              The kind of property on which the annotation was erroneously placed.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a
              <see cref="T:Kvasir.Annotations.Check.ComparisonAttribute">comparison constraint annotation</see> being placed on, or applying
              to, a scalar property corresponding to a non-orderable Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable comparison constraint was encountered.
            </param>
            <param name="annotation">
              The inapplicable comparison constraint.
            </param>
            <param name="fieldType">
              The data type of the Field to which <paramref name="annotation"/> was applied, accounting for any data
              conversions.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a
              <see cref="T:Kvasir.Annotations.Check.SignednessAttribute">signedness constraint annotation</see> being placed on, or applying
              to, a scalar property corresponding to a non-numeric Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable signedness constraint was encountered.
            </param>
            <param name="annotation">
              The inapplicable signedness constraint.
            </param>
            <param name="fieldType">
              The data type of the Field to which <paramref name="annotation"/> was applied, accounting for any data
              conversions.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute,System.Type,Kvasir.Translation.UnsignedTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a
              <see cref="T:Kvasir.Annotations.Check.IsNegativeAttribute">[Check.IsNegative] annotation</see> being placed on, or applying to,
              a scalar property corresponding to an unsigned numeric Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable <c>[Check.IsNegative]</c> constraint was encountered.
            </param>
            <param name="annotation">
              The inapplicable <c>[Check.IsNegative]</c> constraint.
            </param>
            <param name="fieldType">
              The data type of the Field to which <paramref name="annotation"/> was applied, accounting for any data
              conversions.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
        </member>
        <member name="M:Kvasir.Translation.InapplicableAnnotationException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.StringLengthAttribute,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InapplicableAnnotationException"/> caused by a
              <see cref="T:Kvasir.Annotations.Check.StringLengthAttribute">string length constraint annotation</see> being placed on, or
              applying to, a scalar property corresponding to a non-string Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the inapplicable string length constraint was encountered.
            </param>
            <param name="annotation">
              The inapplicable string length constraint.
            </param>
            <param name="fieldType">
              The data type of the Field to which <paramref name="annotation"/> was applied, accounting for any data
              conversions.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidatedDefaultException">
            <summary>
              An exception that is raised when a constraint annotation is applied to a Field that causes its default value
              to no longer be valid.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidatedDefaultException.#ctor(Kvasir.Translation.Context,System.Object,Kvasir.Annotations.INestableAnnotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidatedDefaultException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="defaultValue">
              The default value that has been invalidated.
            </param>
            <param name="annotation">
              The constraint annotation that invalidated <paramref name="defaultValue"/>.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidColumnIndexException">
            <summary>
              An exception that is raised when the column index provided to a <see cref="T:Kvasir.Annotations.ColumnAttribute">[Column]</see>
              annotation is not valid.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidColumnIndexException.#ctor(Kvasir.Translation.Context,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidColumnIndexException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="index">
              The invalid column index.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidConstraintValueException">
            <summary>
              An exception that is raised when a value provided to a constraint annotation is not valid for the Field to
              which the constraint annotation applies.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidConstraintValueException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidConstraintValueException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid constraint annotation.
            </param>
            <param name="reason">
              An explanation as to why the default value is invalid.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidCustomConstraintException">
            <summary>
              An exception that is raised when a <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> or
              <see cref="T:Kvasir.Annotations.Check.ComplexAttribute">[Check.Complex]</see> annotation is invalid.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidCustomConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.CheckAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidCustomConstraintException"/> describing a "user error" on a
              <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation, such as if the type provided to the annotation is not
              actually an IConstraintGenerator.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation that carries a "user error."
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidCustomConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComplexAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidCustomConstraintException"/> describing a "user error" on a
              <see cref="T:Kvasir.Annotations.Check.ComplexAttribute">[Check.Complex]</see> annotation, such as if the type provided to the
              annotation is not actually an IConstraintGenerator.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.Check.ComplexAttribute">[Check.Complex]</see> annotation that carries a "user error."
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidCustomConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Translation.NoFields)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidCustomConstraintException"/> describing a
              <see cref="T:Kvasir.Annotations.Check.ComplexAttribute">[Check.Complex]</see> annotation for which no Fields were specified.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidDataConverterException">
            <summary>
              An exception that is raised when the contents of a <see cref="T:Kvasir.Annotations.DataConverterAttribute">[DataConverter]</see>
              annotation render it invalid for the property on which it is applied.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidDataConverterException.#ctor(Kvasir.Translation.Context,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidDataConverterException"/> describing a "user error," such as if the
              type provided to the annotation was not actually a Data Converter.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="userError">
              The user error string.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidDataConverterException.#ctor(Kvasir.Translation.Context,System.Type,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidDataConverterException"/> describing an annotation where the property's
              CLR type and the Data Converter's expected source type are not compatible.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="propertyType">
              The CLR type of the property on which the annotation was placed.
            </param>
            <param name="converterSourceType">
              The expected source type of the Data Converter.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidDataConverterException.#ctor(Kvasir.Translation.Context,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidDataConverterException"/> describing an annotation where the Data
              Converter's result type is not supported by Kvasir.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="unsupportedResultType">
              The unsupported result type of the Data Converter.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidDataConverterException.#ctor(Kvasir.Translation.Context,System.Type,System.Attribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidDataConverterException"/> describing an annotation placed on a
              non-enumeration-type property that affects a data conversion that requires an enumerator source.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="propertyType">
              The type of the property on which <paramref name="annotation"/> was placed.
            </param>
            <param name="annotation">
              The invalid annotation.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidDefaultException">
            <summary>
              An exception that is raised when the value provided to a <see cref="T:Kvasir.Annotations.DefaultAttribute">[Default]</see>
              annotation is not valid for the Field to which the annotation applies.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidDefaultException.#ctor(Kvasir.Translation.Context,System.String,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidDefaultException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="path">
              The path to which the problematic <see cref="T:Kvasir.Annotations.DefaultAttribute"/> applies.
            </param>
            <param name="reason">
              An explanation as to why the default value is invalid.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidEntityTypeException">
            <summary>
              An exception that is raised when an invalid type is identified as an Entity, either via a direct request for
              translation or because it is the backing type of a translated property.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidEntityTypeException.#ctor(Kvasir.Translation.Context,Kvasir.Translation.TypeCategory)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidEntityTypeException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid Entity type was encountered
            </param>
            <param name="category">
              The category into which the invalid Entity type falls.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidNameException">
            <summary>
              An exception that is raised when a user-provided name is invalid.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.NameAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Field name.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.NameAttribute">[Name]</see> annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.NamedPrimaryKeyAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Primary Key name.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.NamedPrimaryKeyAttribute">[NamedPrimaryKey]</see> annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.TableAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Principal Table name, as defined
              by a <see cref="T:Kvasir.Annotations.TableAttribute">[Table]</see> annotation.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.TableAttribute">[Table]</see> annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.ExcludeNamespaceFromNameAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Principal Table name resulting
              from the interplay between a <see cref="T:Kvasir.Annotations.TableAttribute">[Table]</see> annotation and an
              <see cref="T:Kvasir.Annotations.ExcludeNamespaceFromNameAttribute">[ExcludeNamespaceFromName]</see> annotation.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.ExcludeNamespaceFromNameAttribute">[ExcludeNamespaceFromName]</see> annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.RelationTableAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Relation Table name.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.RelationTableAttribute">[RelationTable]</see> annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidNameException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.UniqueAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidNameException"/> caused by an invalid Candidate Key name.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The invalid <see cref="T:Kvasir.Annotations.UniqueAttribute">[Unique]</see> annotation.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidPathException">
            <summary>
              An exception that is raised when the path of a nestable annotation is invalid, either because it is
              <see langword="null"/> or because the no property in the data model exists at that path.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidPathException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidPathException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the annotation with an invalid path was encountered.
            </param>
            <param name="annotation">
              The annotation with an invalid path.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidPrimaryKeyFieldException">
            <summary>
              An exception that is raised when a <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute">[PrimaryKey]</see> annotation is applied,
              directly or indirectly, to an invalid Field.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidPrimaryKeyFieldException.#ctor(Kvasir.Translation.Context,System.String,System.String,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidPrimaryKeyFieldException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="path">
              The path to which the invalid annotation was applied.
            </param>
            <param name="cascadePath">
              The path that the invalid annotation affects. This parameter should be used when the annotation is placed
              on an Aggregate or applies to an Aggregate via the <paramref name="path"/>, and that Aggregate itself
              contains a Field that cannot be in an Entity's primary key.
            </param>
            <param name="reason">
              The reason that the <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute">[PrimaryKey]</see> annotation is invalid.
            </param>
        </member>
        <member name="T:Kvasir.Translation.InvalidPropertyInDataModelException">
            <summary>
              An exception that is raised when a property that is part of the data model cannot be translated for some
              reason.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.InvalidPropertyInDataModelException.#ctor(Kvasir.Translation.Context,System.Type,Kvasir.Translation.TypeCategory)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidPropertyInDataModelException"/> caused by the property being backed by
              an unsupported type.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid property type was encountered
            </param>
            <param name="type">
              The invalid property type.
            </param>
            <param name="category">
              The category into which the invalid property type falls.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidPropertyInDataModelException.#ctor(Kvasir.Translation.Context,Kvasir.Translation.PropertyCategory)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidPropertyInDataModelException"/> caused the property being fundamentally
              un-translatable (e.g. a write-only property or an indexer).
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid property was encountered.
            </param>
            <param name="category">
              The category into which the invalid property falls.
            </param>
        </member>
        <member name="M:Kvasir.Translation.InvalidPropertyInDataModelException.#ctor(Kvasir.Translation.Context,System.Type,System.Reflection.Assembly)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.InvalidPropertyInDataModelException"/> caused by the property being backed by
              a type that is from the wrong assembly.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid property type was encountered.
            </param>
            <param name="type">
              The invalid property type.
            </param>
            <param name="expected">
              The assembly in which <paramref name="type"/> was expected to have been from.
            </param>
        </member>
        <member name="T:Kvasir.Translation.NestedRelationException">
            <summary>
              An exception that is raised when the element type of a Relation container is itself, or contains, another
              Relation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.NestedRelationException.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.NestedRelationException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the nested Relation was encountered.
            </param>
        </member>
        <member name="T:Kvasir.Translation.NotEnoughFieldsException">
            <summary>
              An exception that is raised when a type does not contribute enough Fields to the data model.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.NotEnoughFieldsException.#ctor(Kvasir.Translation.Context,System.Int32,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.NotEnoughFieldsException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the underpopulated type was encountered.
            </param>
            <param name="minExpected">
              The minimum number of Fields that were expected to be contributed to the data model.
            </param>
            <param name="actual">
              The actual number of Fields that were contributed to the data model.
            </param>
        </member>
        <member name="T:Kvasir.Translation.NotRelationException">
            <summary>
              An exception that is raised when an annotation that is only applicable to Relations is applied to a property
              that is not a Relation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.NotRelationException.#ctor(Kvasir.Translation.Context,System.Type,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.NotRelationException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the annotation applicable only to Relations was encountered.
            </param>
            <param name="propertyType">
              The type of the property to which the annotation was applied.
            </param>
            <param name="annotationType">
              The type of the improperly applied annotation.
            </param>
        </member>
        <member name="T:Kvasir.Translation.ReconstitutionNotPossibleException">
            <summary>
              An exception that is raised when a type cannot be Reconstituted.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionNotPossibleException.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReconstitutionNotPossibleException"/> caused by a type not having any viable
              constructors.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionNotPossibleException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.ReconstituteThroughAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReconstitutionNotPossibleException"/> cased by a
              <see cref="T:Kvasir.Annotations.ReconstituteThroughAttribute">[ReconstituteThrough] annotation</see> being placed on a
              non-viable constructor.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="annotation">
              A <see cref="T:Kvasir.Annotations.ReconstituteThroughAttribute">[ReconstituteThrough] annotation</see>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionNotPossibleException.#ctor(Kvasir.Translation.Context,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReconstitutionNotPossibleException"/> caused by two or more constructors all
              being viable and having equivalent highest precedence.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="numViableConstructors">
              The number of constructors that are equally the most viable.
            </param>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionNotPossibleException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.ReconstituteThroughAttribute,System.Int32)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReconstitutionNotPossibleException"/> caused by two or more constructors
              (viable or non-viable) being annotated with
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the invalid annotation was encountered.
            </param>
            <param name="annotation">
              A <see cref="T:Kvasir.Annotations.ReconstituteThroughAttribute">[ReconstituteThrough] annotation</see>.
            </param>
            <param name="numAnnotations">
              The number of constructors that are annotated.
            </param>
        </member>
        <member name="T:Kvasir.Translation.ReferenceCycleException">
            <summary>
              An exception that is raised when an impermissible referential cycle is detected.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.ReferenceCycleException.#ctor(Kvasir.Translation.Context)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReferenceCycleException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the reference cycle was detected, consisting of the full cycle.
            </param>
        </member>
        <member name="T:Kvasir.Translation.TranslationException">
            <summary>
              The base class for all exceptions that can arise during Translation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Problem)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="problem">
              The problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Problem,Kvasir.Translation.TranslationException.Annotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem caused by a single
              annotation.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="problem">
              The problem.
            </param>
            <param name="annotation">
              The annotation that caused the problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Path,Kvasir.Translation.TranslationException.Problem)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem caused by a multiple
              annotations that may apply to a nested property.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="path">
              The path to the nested property to which the annotations apply; if this is the empty string, then the
              annotation is understood to apply to the property described by <paramref name="loc"/> directly.
            </param>
            <param name="problem">
              The problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Path,Kvasir.Translation.TranslationException.Problem,Kvasir.Translation.TranslationException.Annotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem caused by a single
              annotation that may apply to a nested property.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="path">
              The path to the nested property to which <paramref name="annotation"/> applies; if this is the empty
              string, then the annotation is understood to apply to the property described by <paramref name="loc"/>
              directly.
            </param>
            <param name="problem">
              The problem.
            </param>
            <param name="annotation">
              The annotation that caused the problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Path,Kvasir.Translation.TranslationException.Cascade,Kvasir.Translation.TranslationException.Problem,Kvasir.Translation.TranslationException.Annotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem caused by a single
              annotation that may apply to a nested property and may affect a further nested property.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="path">
              The path to the nested property to which <paramref name="annotation"/> applies; if this is the empty
              string, then the annotation is understood to apply to the property described by <paramref name="loc"/>
              directly.
            </param>
            <param name="cascade">
              The path to the nested property that <paramref name="annotation"/> actually affects, relative to
              <paramref name="path"/>; if this is the empty string, then the annotation is understood to affect the
              property indicated by <paramref name="path"/>.
            </param>
            <param name="problem">
              The problem.
            </param>
            <param name="annotation">
              The annotation that caused the problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.#ctor(Kvasir.Translation.TranslationException.Location,Kvasir.Translation.TranslationException.Problem,Kvasir.Translation.TranslationException.Annotation,Kvasir.Translation.TranslationException.Annotation)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.TranslationException"/> that describes a problem caused by two annotations.
            </summary>
            <param name="loc">
              The location at which the problem arose.
            </param>
            <param name="problem">
              The problem.
            </param>
            <param name="first">
              The first of the two annotations that, collectively, caused the problem.
            </param>
            <param name="second">
              The second of the two annotations that, collectively, caused the problem.
            </param>
        </member>
        <member name="M:Kvasir.Translation.TranslationException.MakeMessage(System.String[])">
            <summary>
              Builds an error message for a <see cref="T:Kvasir.Translation.TranslationException"/> from one or more rows' information.
            </summary>
            <param name="msgs">
              The information that makes up the body of the error message.
            </param>
            <returns>
              A properly formatted error message based on <paramref name="msgs"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.UnrecognizedFieldException">
            <summary>
              An exception that is thrown when one of the Field names provided to a
              <see cref="T:Kvasir.Annotations.Check.ComplexAttribute"><c>[Check.Complex]</c></see> annotation cannot be matched to a Field on the
              Entity's Primary Table.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.UnrecognizedFieldException.#ctor(Kvasir.Translation.Context,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.UnrecognizedFieldException"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.Check.ComplexAttribute"><c>[Check.Complex]</c></see>
              annotation with the unrecognized Field was encountered.
            </param>
            <param name="fieldName">
              The unrecognized Field name.
            </param>
        </member>
        <member name="T:Kvasir.Translation.UnsatisfiableConstraintException">
            <summary>
              An exception that is raised when the combination of one or more constraints leaves no valid values for a
              Field.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.UnsatisfiableConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation)">
            <summary>
              Constructs a <see cref="T:Kvasir.Translation.UnsatisfiableConstraintException"/> that arises when a constraint causes each of
              the explicitly allowed values of a Field to be invalid.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The annotation that invalidated all of the explicitly allowed value.
            </param>
        </member>
        <member name="M:Kvasir.Translation.UnsatisfiableConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation,Kvasir.Translation.Interval)">
            <summary>
              Constructs a <see cref="T:Kvasir.Translation.UnsatisfiableConstraintException"/> that arises when a constraint produces an
              empty interval.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The annotation that produced <paramref name="interval"/>.
            </param>
            <param name="interval">
              The empty interval.
            </param>
        </member>
        <member name="M:Kvasir.Translation.UnsatisfiableConstraintException.#ctor(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation,System.String)">
            <summary>
              Constructs a <see cref="T:Kvasir.Translation.UnsatisfiableConstraintException"/> that arises for an arbitrary reason.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The annotation.
            </param>
            <param name="reason">
              The reason that <paramref name="annotation"/> is unsatisfiable.
            </param>
        </member>
        <member name="T:Kvasir.Translation.BooleanFieldDescriptor">
            <summary>
              The concrete base class for a <see cref="T:Kvasir.Translation.FieldDescriptor"/> whose data type is <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.CharFieldDescriptor">
            <summary>
              The concrete class for an <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.DateTimeFieldDescriptor">
            <summary>
              The concrete class for an <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.DecimalFieldDescriptor">
            <summary>
              The concrete base class for an <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is
              <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.EnumFieldDescriptor">
            <summary>
              The concrete class for a <see cref="T:Kvasir.Translation.FieldDescriptor"/> whose data type is an enumeration.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.FieldDescriptor">
            <summary>
              The base class for the data state that manages the translation of a single Field in a back-end database,
              derived from a single scalar (or enumeration) CLR property.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.CandidateKeyMemberships">
            <summary>
              The names of the Candidate Keys to which this Field belongs, in no particular order.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.Converter">
            <summary>
              The <see cref="T:Cybele.Core.DataConverter"/> that is applied to convert between CLR values for this Field and the
              values of the backing database.
            </summary>
            <remarks>
              If no Data Converter is specified via annotation, this will be an Identity Converter.
            </remarks>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.InPrimaryKey">
            <summary>
              <see langword="true"/> if the Field is currently marked as being in the Primary Key of the Table in which
              it resides; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.IsNullable">
            <summary>
              <see langword="true"/> if the Field is currently nullable, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.FieldType">
            <summary>
              The CLR type of the Field, accounting for any data conversions.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.UserValueType">
            <summary>
              The CLR type expected of any values provided by users in annotations
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldDescriptor.HasAllowedValues">
            <summary>
              Whether or not the Field has a <c>CHECK</c> constraint restricting its domain.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.CheckAttribute)">
            <summary>
              Applies a <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation to the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation was translated
              via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.CheckAttribute">[Check]</see> annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidCustomConstraintException">
              if <paramref name="annotation"/> has a populated <see cref="P:Kvasir.Annotations.CheckAttribute.UserError">user error</see>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)">
            <summary>
              Applies a <see cref="T:Kvasir.Annotations.Check.IsNotAttribute">[Check.IsNot]</see>,
              <see cref="T:Kvasir.Annotations.Check.IsLessThanAttribute">[Check.IsLessThan]</see>,
              <see cref="T:Kvasir.Annotations.Check.IsGreaterThanAttribute">[Check.IsGreaterThan]</see>,
              <see cref="T:Kvasir.Annotations.Check.IsLessOrEqualToAttribute">[Check.IsLessOrEqualTo]</see>, or
              <see cref="T:Kvasir.Annotations.Check.IsGreaterOrEqualToAttribute">[Check.IsGreaterOrEqualTo</see> constraint to the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the comparison constraint annotation was translated via reflection.
            </param>
            <param name="annotation">
              The comparison constraint annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InapplicableAnnotationException">
              if the Field's <see cref="P:Kvasir.Translation.FieldDescriptor.FieldType">type</see> is not orderable.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidConstraintValueException">
              if the anchor value of <paramref name="annotation"/> is invalid.
            </exception>
            <exception cref="T:Kvasir.Translation.UnsatisfiableConstraintException">
              if the Field has at least one discretely allowed value, and all such values are disallowed by
              <paramref name="annotation"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidatedDefaultException">
              if the Field has a default value that is disallowed by <paramref name="annotation"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.InclusionAttribute)">
            <summary>
              Applies a <see cref="T:Kvasir.Annotations.Check.IsOneOfAttribute">[Check.IsOneOf]</see> or
              <see cref="T:Kvasir.Annotations.Check.IsNotOneOfAttribute">[Check.IsNotOneOf]</see> constraint to the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the comparison constraint annotation was translated via reflection.
            </param>
            <param name="annotation">
              The comparison constraint annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidConstraintValueException">
              if any of the values of <paramref name="annotation"/> is invalid.
            </exception>
            <exception cref="T:Kvasir.Translation.UnsatisfiableConstraintException">
              if the Field has at least one discretely allowed value, and all such values are disallowed by
              <paramref name="annotation"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidatedDefaultException">
              if the Field has a default value that is disallowed by <paramref name="annotation"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)">
            <summary>
              Applies a <see cref="T:Kvasir.Annotations.Check.IsNonZeroAttribute">[Check.IsNonZero]</see>,
              <see cref="T:Kvasir.Annotations.Check.IsNegativeAttribute">[Check.IsNegative]</see>, or
              <see cref="T:Kvasir.Annotations.Check.IsPositiveAttribute">[Check.IsPositive]</see> constraint to the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the signedness constraint annotation was translated via reflection.
            </param>
            <param name="annotation">
              The signedness constraint annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InapplicableAnnotationException">
              if the Field's <see cref="P:Kvasir.Translation.FieldDescriptor.FieldType">type</see> is not numeric.
            </exception>
            <exception cref="T:Kvasir.Translation.UnsatisfiableConstraintException">
              if the Field has at least one discretely allowed value, and all such values are disallowed by
              <paramref name="annotation"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidatedDefaultException">
              if the Field has a default value that is disallowed by <paramref name="annotation"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.StringLengthAttribute)">
            <summary>
              Applies a <see cref="T:Kvasir.Annotations.Check.IsNonEmptyAttribute">[Check.IsNonEmpty]</see>,
              <see cref="T:Kvasir.Annotations.Check.LengthIsAtLeastAttribute">[Check.LengthIsAtLeast</see>,
              <see cref="T:Kvasir.Annotations.Check.LengthIsAtMostAttribute">[Check.LengthIsAtMost</see>, or
              <see cref="T:Kvasir.Annotations.Check.LengthIsBetweenAttribute"/> constraint to the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the string length constraint annotation was translated via reflection.
            </param>
            <param name="annotation">
              The string length constraint annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InapplicableAnnotationException">
              if the Field's <see cref="P:Kvasir.Translation.FieldDescriptor.FieldType">type</see> is not <see cref="T:System.String"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.UnsatisfiableConstraintException">
              if the Field has at least one discretely allowed value, and all such values are disallowed by
              <paramref name="annotation"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidatedDefaultException">
              if the Field has a default value that is disallowed by <paramref name="annotation"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.Reset">
            <summary>
              Clones this <see cref="T:Kvasir.Translation.FieldDescriptor"/> and resets any non-transferable metadata.
            </summary>
            <remarks>
              When a <see cref="T:Kvasir.Translation.FieldDescriptor"/> is cloned, the majority of the translation state is copied over to
              the new instance verbatim. However, when a Field becomes part of a Foreign Key, most of that state is
              considered "non-transferable" in that it does not propagate to the referencing Table. Specifically, the
              original default value, and <c>CHECK</c> constraints, and any key memberships are discarded as pertaining
              only to the original Fields; new values can then be specified on the Reference property. The nullability
              (which should be non-nullable) and the name <i>are</i> transferred.
            </remarks>
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.Clone">
            <summary>
              Clones this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </summary>
            <remarks>
              When a <see cref="T:Kvasir.Translation.FieldDescriptor"/> is cloned, the majority of the translation state is copied over to
              the new instance verbatim. However, some state is slightly altered to reflect the fact that cloning occurs
              when the scope of translation changes. In particular, the nullability of a <see cref="T:Kvasir.Translation.FieldDescriptor"/>
              will always be converted into the "native" equivalent of its current value if that value was imparted via
              an annotation. This is to allow [Nullable] and [NonNullable] annotations on aggregates that won't induce
              errors if there was already an annotation on the individual nested property
            </remarks>
            <returns>
              A deep copy of this <see cref="T:Kvasir.Translation.FieldDescriptor"/> as a brand new instance. Modifications to the returned
              value will not affect the source instance, and vice-versa.
            </returns>
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.MakeSchema(Kvasir.Core.Settings)">
            <summary>
              Produces the schema model translation of this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </summary>
            <param name="settings">
              The <see cref="T:Kvasir.Core.Settings"/> according to which the translation has been performed, which will be passed to
              any custom constraint generators attached to this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <returns>
              The <see cref="T:Kvasir.Schema.IField">Field</see> and <c>CHECK</c> constraint translations of this
              <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetDefault(Kvasir.Translation.Context,Kvasir.Annotations.DefaultAttribute)">
            <summary>
              Sets the default value for the Field.
            </summary>
            <remarks>
              If the Field already has a default value, it will be overwritten. This is only permissible if the original
              default value and the new default value come from different annotations at different translation scopes.
            </remarks>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.DefaultAttribute">[Default]</see> annotation was
              translated via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.DefaultAttribute">[Default]</see> annotation.
            </param>
            <exception cref="T:Kvasir.Translation.DuplicateAnnotationException">
              if this Field has already been annotated with a <see cref="T:Kvasir.Annotations.DefaultAttribute">[Default]</see> attribute  in
              the translation scope described by <paramref name="context"/>.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidDefaultException">
              if the value carried by <paramref name="annotation"/> is not valid for the current Field (e.g. it is
              <see langword="null"/> but the Field is not nullable, the value is not of the correct type, etc.).
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Annotations.UniqueAttribute)">
            <summary>
              Marks the Field as being part of a candidate key.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.UniqueAttribute">[Unique]</see> annotation was
              translated via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.UniqueAttribute">[Unique]</see> annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidNameException">
              if the name of <paramref name="annotation"/> is <see langword="null"/> or the empty string
                --or--
              if the name of <paramref name="annotation"/> begins with the prefix reserved by Kvasir for anonymous
              candidate keys, but <paramref name="annotation"/> is not itself anonymous.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Annotations.PrimaryKeyAttribute,System.String)">
            <summary>
              Marks the Field as being part of the primary key of the Entity that owns it.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute">[PrimaryKey]</see> annotation was
              translated via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.PrimaryKeyAttribute">[PrimaryKey]</see> annotation.
            </param>
            <param name="cascadePath">
              The access path in between the property to which <paramref name="annotation"/> applies, accounting for a
              possible <see cref="P:Kvasir.Annotations.PrimaryKeyAttribute.Path">nested path</see>, and the Field. This parameter defaults to
              the empty string and should be non-empty when <paramref name="annotation"/> applies to an Aggregate. This
              argument is only used for contextualizing error messages.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidPrimaryKeyFieldException">
              if the depth of <paramref name="context"/> is not <c>0</c>, indicating that the annotation was placed
              on a property nested within an Aggregate
                --or--
              if the Field is nullable
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetName(Kvasir.Translation.Context,Kvasir.Annotations.NameAttribute)">
            <summary>
              Sets the name of the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.NameAttribute">[Name]</see> annotation was translated
              via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.NameAttribute">[Name]</see> annotation.
            </param>
            <exception cref="T:Kvasir.Translation.DuplicateAnnotationException">
              if the name of the Field has already been set.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidNameException">
              if the name imparted by <paramref name="annotation"/> is either <see langword="null"/> or the empty
              string.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
              Sets the name prefix of the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="prefix"/> was determined. (This parameter is not used,
              but is kept for symmetry with other methods and as a forward compatibility mechanism.)
            </param>
            <param name="prefix">
              The suffix of the name's prefix.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetNullability(Kvasir.Translation.Context,System.Boolean)">
            <summary>
              Sets the nullability or non-nullability of the Field.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the <see cref="T:Kvasir.Annotations.NullableAttribute">[Nullable]</see> or
              <see cref="T:Kvasir.Annotations.NonNullableAttribute">[NonNullable]</see> annotation was translated via reflection. (This
              parameter is not used, but is kept for symmetry with other methods and as a forward compatibility
              mechanism.)
            </param>
            <param name="nullable">
              <see langword="true"/> to mark the Field as nullable, <see langword="false"/> to mark the Field as
              non-nullable.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.#ctor(Kvasir.Translation.FieldDescriptor)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldDescriptor"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.#ctor(Kvasir.Translation.FieldDescriptor,Kvasir.Translation.FieldDescriptor.ResetTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldDescriptor"/> that is largely identical to another, but with any
              non-transferable metadata reset.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldDescriptor"/> that has no Data Converter.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the new <see cref="T:Kvasir.Translation.FieldDescriptor"/> was created via translation.
            </param>
            <param name="source">
              The <see cref="T:System.Reflection.PropertyInfo">property</see> that underlies the new <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,Kvasir.Annotations.DataConverterAttribute)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldDescriptor"/> that has a Data Converter defined by a
              <c>[DataConverter]</c> annotation.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the new <see cref="T:Kvasir.Translation.FieldDescriptor"/> was created via translation.
            </param>
            <param name="source">
              The <see cref="T:System.Reflection.PropertyInfo">property</see> that underlies the new <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.DataConverterAttribute">[DataConverter]</see> annotation applied to
              <paramref name="source"/>.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidDataConverterException">
              if <paramref name="annotation"/> has a populated
              <see cref="P:Kvasir.Annotations.DataConverterAttribute.UserError">user error</see>
                --or--
              if the CLR type of <paramref name="source"/> is incompatible with the
              <see cref="P:Cybele.Core.DataConverter.SourceType">expected source type</see> of the Data Converter carried by
              <paramref name="annotation"/>
                --or--
              if the <see cref="P:Cybele.Core.DataConverter.ResultType">result type</see> of the Data Converter carried by
              <paramref name="annotation"/> is not supported by Kvasir
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,Cybele.Core.DataConverter)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldDescriptor"/> that has a Data Converter defined by something other than
              a <c>[DataConveter]</c> annotation.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the new <see cref="T:Kvasir.Translation.FieldDescriptor"/> was created via translation.
            </param>
            <param name="source">
              The <see cref="T:System.Reflection.PropertyInfo">property</see> that underlies the new <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <param name="converter">
              The <see cref="T:Cybele.Core.DataConverter"/> for the new <see cref="T:Kvasir.Translation.FieldDescriptor"/>. This must be a bidirectional
              Data Converter that converts from a type compatible with <paramref name="source"/> into a type supported
              by Kvasir.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.CoerceUserValue(System.Object)">
            <summary>
              Takes a user-provided value from an annotation (e.g. [Default]) and coerces it into a value that is
              consistent with the type of the Field.
            </summary>
            <remarks>
              Derived classes are encouraged to override this method to impose additional restrictions on user-provided
              values or to allow the source value to be a different type than the <see cref="P:Kvasir.Translation.FieldDescriptor.FieldType"/>, which the
              default implementation considers to be invalid.
            </remarks>
            <param name="raw">
              The raw value, as provided by the user.
            </param>
            <returns>
              If <paramref name="raw"/> is <see langword="null"/>, a <c>SOME</c> instance containing
              <see langword="null"/>
                --else--
              If <paramref name="raw"/> can be coerced into a valid value for a Field of type <see cref="P:Kvasir.Translation.FieldDescriptor.FieldType"/>,
              a <c>SOME</c> instance containing that coercion, which may or may not just be <paramref name="raw"/>
              directly
                --else--
              A <c>NONE</c> instance containing a string explaining why <paramref name="raw"/> could not be coerced
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)"/>
            <remarks>Intended to be overridden by derived classes for which the constraint is applicable.</remarks>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.InclusionAttribute)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.InclusionAttribute)"/>
            <remarks>Separated from the public API to enable translation of [Check.IsNot] constraints.</remarks>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)"/>
            <remarks>Intended to be overridden by derived classes for which the constraint is applicable.</remarks>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.StringLengthAttribute)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.StringLengthAttribute)"/>
            <remarks>Intended to be overridden by derived classes for which the constraint is applicable.</remarks>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplyNotEqualConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.DoApplySignednessConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)">
            <see cref="M:Kvasir.Translation.FieldDescriptor.DoApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.GetCheckConstraints(Kvasir.Schema.IField,Kvasir.Core.Settings)">
            <summary>
              Produces the collection of <c>CHECK</c> constraints that apply to this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </summary>
            <param name="field">
              The <see cref="T:Kvasir.Schema.IField"/> translation of this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <param name="settings">
              The <see cref="T:Kvasir.Core.Settings"/> according to which the translation has been performed, which will be passed to
              any custom constraint generators attached to this <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <returns>
              The collection, in no particular order, of comparison constraints, signedness constraints, string length
              constraints, inclusion constraints, and custom constraints that have been applied to this
              <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.IsValidValue(System.Object)">
            <summary>
              Determines if a user-provided value, guaranteed to be of the correct type, is a valid value for the Field,
              accounting for nullability and any active constraints.
            </summary>
            <param name="value">
              The proposed value.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="value"/> is a valid value for this Field; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.SetDomain(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Sets the restricted domain of the Field.
            </summary>
            <remarks>
              The restricted domain for a Field is tracked separately from the values allowed by a <c>CHECK</c>
              constraint, because the latter is additive. This means that is we were to track them in the same list, it
              would be possible to extend the former by way of the latter. What we really want is the former to act as a
              supreme source of truth, with the latter imposing further restrictions.
            </remarks>
            <param name="domain">
              The domain.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.MakeDBValue(System.Object)">
            <summary>
              Create a <see cref="T:Kvasir.Schema.DBValue"/> for this Field.
            </summary>
            <remarks>
              The primary responsibility of this function is to produce valid <see cref="T:Kvasir.Schema.DBValue">DBValues</see> when
              the Field's type is an enumeration. Enumerations cannot be stored directly in a <see cref="T:Kvasir.Schema.DBValue"/>, so
              they have to be converted to equivalent string forms.
            </remarks>
            <param name="value">
              The raw value.
            </param>
            <returns>
              A <see cref="T:Kvasir.Schema.DBValue"/> wrapping <paramref name="value"/> that is appropriate for this Field.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldDescriptor.PostProcessConstraint(Kvasir.Translation.Context,Kvasir.Annotations.INestableAnnotation)">
            <summary>
              Updates the allowed/disallowed value and performs additional consistency checking after a constraint has
              been applied.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the constraint annotation was translated via reflection.
            </param>
            <param name="annotation">
              The constraint annotation that was just applied.
            </param>
            <exception cref="T:Kvasir.Translation.UnsatisfiableConstraintException">
              if the Field currently has at least one discretely allowed value, and all such values are no longer valid.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidatedDefaultException">
              if the Field has a default value that is no longer valid.
            </exception>
        </member>
        <member name="T:Kvasir.Translation.GuidFieldDescriptor">
            <summary>
              The concrete class for a <see cref="T:Kvasir.Translation.FieldDescriptor"/> whose data type is <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.OrderableFieldDescriptor">
            <summary>
              The intermediate base class for a <see cref="T:Kvasir.Translation.FieldDescriptor"/> whose data type supports ordering.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.SignedFieldDescriptor">
            <summary>
              The concrete base class for a <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is a signed numeric (but
              is not <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.StringFieldDescriptor">
            <summary>
              The concrete base class for an <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.UnsignedFieldDescriptor">
            <summary>
              The concrete base class for an <see cref="T:Kvasir.Translation.OrderableFieldDescriptor"/> whose data type is an unsigned numeric.
            </summary>
        </member>
        <member name="T:Kvasir.Translation.AggregateFieldGroup">
            <summary>
              A <see cref="T:Kvasir.Translation.MultiFieldGroup"/> backed by an Aggregate property (i.e. one that is a struct).
            </summary>
        </member>
        <member name="P:Kvasir.Translation.AggregateFieldGroup.Kind">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup},System.Collections.Generic.IEnumerable{Kvasir.Translation.RelationTracker})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>.
            </param>
            <param name="fields">
              The collection of constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see> that comprise the new
              <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>. The order is irrelevant. The Fields should be in a position to be
              directly modified (i.e. already <see cref="M:Kvasir.Translation.FieldGroup.Clone">cloned</see>).
            </param>
            <param name="trackers">
              The collection of <see cref="T:Kvasir.Translation.RelationTracker">RelationTrackers</see> that represent the Relations nested
              within the new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>. These Trackers allow for "caching" of any annotations
              applied to the Aggregate property that, via their <c>Path</c>, actually resolve against a Relation;
              without the Trackers, such annotations would trigger an <see cref="T:Kvasir.Translation.InvalidPathException"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.#ctor(Kvasir.Translation.AggregateFieldGroup)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.AggregateFieldGroup.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.#ctor(Kvasir.Translation.AggregateFieldGroup,Kvasir.Translation.FieldGroup.ResetTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/> that is largely identical to another, but with each
              constituent Field reset.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
            <seealso cref="M:Kvasir.Translation.AggregateFieldGroup.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.#ctor(Kvasir.Translation.AggregateFieldGroup,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.AggregateFieldGroup"/> that is largely identical to another, but with a subset
              of the Fields.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.AggregateFieldGroup"/>.
            </param>
            <param name="fields">
              The constituent Fields, which should be a subset of those of <paramref name="source"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})"/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.AggregateFieldGroup.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.FieldGroup">
            <summary>
              The base class for the data state that manages the translation of one or more Fields in a back-end database,
              each derived from the same CLR property and those thereunder nested.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Size">
            <summary>
              The number of Fields in the <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.IsNativelyNullable">
            <summary>
              <see langword="true"/> if the property that backs the <see cref="T:Kvasir.Translation.FieldGroup"/> is nullable (accounting for
              any annotations); otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.AllNullable">
            <summary>
              <see langword="true"/> if all the Fields in the <see cref="T:Kvasir.Translation.FieldGroup"/> are nullable, otherwise
              <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Column">
            <summary>
              The starting column index of the <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Source">
            <summary>
              The property that backs the <see cref="T:Kvasir.Translation.FieldGroup"/>
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.ReconstitutionArgumentName">
            <summary>
              The (unnormalized) name of the constructor argument that would be a match for the <see cref="T:Kvasir.Translation.FieldGroup"/>
              when determining viability for Reconstitution.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Item(System.Int32)">
            <summary>
              The dot-separated access path of the single Field within the group at a given column index.
            </summary>
            <param name="column">
              The column index, which must be non-negative and strictly less than the <see cref="P:Kvasir.Translation.FieldGroup.Size"/> of the group.
            </param>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Extractor">
            <summary>
              The <see cref="T:Kvasir.Extraction.IMultiExtractor"/> for this group.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.FieldGroup.Creator">
            <summary>
              The <see cref="T:Kvasir.Reconstitution.ICreator"/> for this group. If the group represents a <c>[Calculated]</c> property, this
              value will be a <c>NONE</c> instance.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.Clone">
            <summary>
              Clones this <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
            <returns>
              A deep copy of this <see cref="T:Kvasir.Translation.FieldGroup"/> as a brand new instance. Modifications to the returned value
              will not affect the source instance, and vice-versa.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <summary>
              Filters this <see cref="T:Kvasir.Translation.FieldGroup"/> to include only a subset of Fields.
            </summary>
            <param name="constituents">
              The Fields to keep during the filter operation.
            </param>
            <returns>
              A <c>SOME</c> instance containing a deep copy of this <see cref="T:Kvasir.Translation.FieldGroup"/> where Fields not in
              <paramref name="constituents"/> have been discarded, if any such Fields exist; otherwise, a <c>NONE</c>
              instance.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.GetEnumerator">
            <summary>
              Ranged-based for loop enumerator accessor.
            </summary>
            <returns>
              An enumerator that iterates over the individual <see cref="T:Kvasir.Translation.FieldDescriptor">Fields</see> in this
              <see cref="T:Kvasir.Translation.FieldGroup"/> in column order.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.System#Collections#IEnumerable#GetEnumerator">
            <see cref="M:Kvasir.Translation.FieldGroup.GetEnumerator"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.References">
            <summary>
              Access the <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> that are constituent to this <see cref="T:Kvasir.Translation.FieldGroup"/>, which
              are the groups that comprise all the Foreign Keys.
            </summary>
            <returns>
              A flattened list of the <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> that make up this <see cref="T:Kvasir.Translation.FieldGroup"/>, in
              no particular order. If a <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> contains another such group (i.e. the Primary
              Key of one Entity is itself a (full or partial) Reference, only the outermost group will be returned.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.Reset">
            <summary>
              Resets this <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
            <returns>
              A deep copy of this <see cref="T:Kvasir.Translation.FieldGroup"/> as a brand new instance, with all constituent Fields reset
              themselves. Modifications to the returned value will not affect the source instance, and vice-versa.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.#ctor(System.Reflection.PropertyInfo)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
            <param name="source">
              The CLR property from which the new <see cref="T:Kvasir.Translation.FieldGroup"/> is derived.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.#ctor(Kvasir.Translation.FieldGroup)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldGroup"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.CheckAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.ComparisonAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.ComparisonAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.InclusionAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.InclusionAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.SignednessAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.SignednessAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.StringLengthAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Annotations.Check.StringLengthAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetColumn(Kvasir.Translation.Context,System.Int32)">
            <summary>
              Sets the column index for the group.
            </summary>
            <remarks>
              The Fields that make up a FieldGroup are guaranteed to be contiguous. The column index of a FieldGroup is
              therefore the index of the first of its Fields.
            </remarks>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the column for the group was determined, either by a
              <see cref="T:Kvasir.Annotations.ColumnAttribute">[Column]</see> annotation or an assignment process.
            </param>
            <param name="index">
              The column index.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidColumnIndexException">
              if <paramref name="index"/> is negative.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetDefault(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.DefaultAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetDefault(Kvasir.Translation.Context,Kvasir.Annotations.DefaultAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.UniqueAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Annotations.UniqueAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.PrimaryKeyAttribute},System.String)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Annotations.PrimaryKeyAttribute,System.String)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetName(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.NameAttribute})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetName(Kvasir.Translation.Context,Kvasir.Annotations.NameAttribute)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IEnumerable{System.String})">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IReadOnlyList{System.String})"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetNullability(Kvasir.Translation.Context,System.Boolean)">
            <seealso cref="M:Kvasir.Translation.FieldDescriptor.SetNullability(Kvasir.Translation.Context,System.Boolean)"/>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.SetRelationTableName(Kvasir.Translation.Context,Kvasir.Annotations.RelationTableAttribute)">
            <summary>
              Sets the name of the Relation Table defined by the Fields in this <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered via reflection.
            </param>
            <param name="annotation">
              The <see cref="T:Kvasir.Annotations.RelationTableAttribute">[RelationTable]</see> annotation.
            </param>
            <exception cref="T:Kvasir.Translation.NotRelationException">
              if this <see cref="T:Kvasir.Translation.FieldGroup"/> does not correspond to a Relation.
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidNameException">
              if the name carried by <paramref name="annotation"/> is <see langword="null"/> or is the empty string.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ProcessNativeNullability(Kvasir.Translation.Context)">
            <summary>
              Processes the native nullability of a property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the property backing the <see cref="T:Kvasir.Translation.FieldGroup"/> was accessed via
              reflection. This context should include that property.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldGroup.ProcessAnnotations(Kvasir.Translation.Context)">
            <summary>
              Processes all of the annotations applied to the property backing the <see cref="T:Kvasir.Translation.FieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the property backing the <see cref="T:Kvasir.Translation.FieldGroup"/> was accessed via
              reflection. This context should include that property.
            </param>
            <exception cref="T:Kvasir.Translation.InvalidPathException">
              if the path of a "nestable" annotation applied to the property backing the <see cref="T:Kvasir.Translation.FieldGroup"/> is
              <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Kvasir.Translation.MultiFieldGroup">
            <summary>
              The intermediate base class for a <see cref="T:Kvasir.Translation.FieldGroup"/> backed by an Aggregate, Reference, or Relation
              property, and therefore corresponding to one or more Fields.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.Size">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.AllNullable">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.IsNativelyNullable">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.ReconstitutionArgumentName">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.CLRType">
            <summary>
              The nullable-stripped CLR type of the <see cref="P:Kvasir.Translation.FieldGroup.Source">source</see> property.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.Extractor">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.Creator">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.Kind">
            <summary>
              The "kind" of the backing property (i.e. Aggregate vs. Reference vs. Relation).
            </summary>
        </member>
        <member name="P:Kvasir.Translation.MultiFieldGroup.IsCalculated">
            <summary>
              Whether of not the group is annotated as being <c>[Calculated]</c>.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.MultiFieldGroup"/> that has no nested Relations.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </param>
            <param name="fields">
              The collection of constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see> that comprise the new
              <see cref="T:Kvasir.Translation.MultiFieldGroup"/>. The order is irrelevant. The Fields should be in a position to be directly
              modified (i.e. already <see cref="M:Kvasir.Translation.FieldGroup.Clone">cloned</see>).
            </param>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup},System.Collections.Generic.IEnumerable{Kvasir.Translation.RelationTracker})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.MultiFieldGroup"/> that may, but does not necessarily, have at least one
              nested Relations.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </param>
            <param name="fields">
              The collection of constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see> that comprise the new
              <see cref="T:Kvasir.Translation.MultiFieldGroup"/>. The order is irrelevant. The Fields should be in a position to be directly
              modified (i.e. already <see cref="M:Kvasir.Translation.FieldGroup.Clone">cloned</see>).
            </param>
            <param name="trackers">
              The collection of <see cref="T:Kvasir.Translation.RelationTracker">RelationTrackers</see> that represent the Relations nested
              within the new <see cref="T:Kvasir.Translation.MultiFieldGroup"/>. These Trackers allow for "caching" of any annotations
              applied to the source property that, via their <c>Path</c>, actually resolve against a Relation; without
              the Trackers, such annotations would trigger an <see cref="T:Kvasir.Translation.InvalidPathException"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.#ctor(Kvasir.Translation.MultiFieldGroup)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.MultiFieldGroup"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.#ctor(Kvasir.Translation.MultiFieldGroup,Kvasir.Translation.FieldGroup.ResetTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.MultiFieldGroup"/> that is largely identical to another, but with each
              constituent Field reset.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.#ctor(Kvasir.Translation.MultiFieldGroup,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.MultiFieldGroup"/> that is largely identical to another, but with a subset of
              the Fields.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </param>
            <param name="fields">
              The constituent Fields, which should be a subset of those of <paramref name="source"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})"/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.CheckAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.ComparisonAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.InclusionAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.SignednessAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.StringLengthAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.FilterFields(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <summary>
              Produces a filtering of the Fields that comprise this <see cref="T:Kvasir.Translation.MultiFieldGroup"/>.
            </summary>
            <param name="constituents">
              The Fields that should be kept by the filter operation.
            </param>
            <returns>
              A collection of <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see>, in no particular order, where each is a
              constituent FieldGroup where only the members that are also in <paramref name="constituents"/> have been
              kept.
            </returns>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})"/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.References">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetDefault(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.DefaultAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.UniqueAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.PrimaryKeyAttribute},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetName(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.NameAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.SetNullability(Kvasir.Translation.Context,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ProcessNativeNullability(Kvasir.Translation.Context)">
            <summary>
              Sets the nullability of the FieldGroup based on the native nullability of the backing property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the backing property was translated via reflection.
            </param>
            <exception cref="T:Kvasir.Translation.AmbiguousNullabilityException">
              if the backing property is natively nullable, the FieldGroup was not annotated as non-nullable, and
              <see cref="P:Kvasir.Translation.MultiFieldGroup.AllNullable"/> are <see langword="true"/>.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.ProcessAnnotations(Kvasir.Translation.Context)">
            <inheritdoc/>
            <exception cref="T:Kvasir.Translation.InapplicableAnnotationException">
              if a <see cref="T:Kvasir.Annotations.DataConverterAttribute">[DataConverter]</see> annotation is encountered
            </exception>
            <exception cref="T:Kvasir.Translation.InvalidDataConverterException">
              if a <see cref="T:Kvasir.Annotations.AsStringAttribute">[AsString]</see> annotation or a
              <see cref="T:Kvasir.Annotations.NumericAttribute">[Numeric]</see> annotation is encountered.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.MultiFieldGroup.CreateExtractor(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Create a <see cref="P:Kvasir.Translation.MultiFieldGroup.Extractor"/> for the multi-field group.
            </summary>
            <param name="fields">
              The constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see>. These are not necessarily ordered.
            </param>
            <returns>
              A <see cref="T:Kvasir.Extraction.IMultiExtractor"/> that, when executed, produces the recursively nested value contained by
              the Fields represented by <paramref name="fields"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.ReferenceFieldGroup">
            <summary>
              A <see cref="T:Kvasir.Translation.MultiFieldGroup"/> backed by an Reference property (i.e. one that is an Entity).
            </summary>
        </member>
        <member name="P:Kvasir.Translation.ReferenceFieldGroup.Kind">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup},Kvasir.Reconstitution.KeyMatcher)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </param>
            <param name="fields">
              The collection of constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see> that comprise the new
              <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>. The order is irrelevant. The Fields should be in a position to be
              directly modified (i.e. already <see cref="M:Kvasir.Translation.FieldGroup.Reset">reset</see>).
            </param>
            <param name="keyMatcher">
              The <see cref="T:Kvasir.Reconstitution.KeyMatcher"/> to use when performing look-ups to Reconstitute data extracted from the new
              <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.#ctor(Kvasir.Translation.ReferenceFieldGroup)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.#ctor(Kvasir.Translation.ReferenceFieldGroup,Kvasir.Translation.FieldGroup.ResetTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> that is largely identical to another, but with each
              constituent Field reset.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
            <seealso cref="M:Kvasir.Translation.ReferenceFieldGroup.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.#ctor(Kvasir.Translation.ReferenceFieldGroup,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/> that is largely identical to another, but with a subset
              of the Fields.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.ReferenceFieldGroup"/>.
            </param>
            <param name="fields">
              The constituent Fields, which should be a subset of those of <paramref name="source"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})"/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.ReferenceFieldGroup.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.RelationFieldGroup">
            <summary>
              A <see cref="T:Kvasir.Translation.MultiFieldGroup"/> backed by an Relation property (i.e. one that is an implementation of the
              <see cref="T:Kvasir.Relations.IRelation"/> interface).
            </summary>
        </member>
        <member name="P:Kvasir.Translation.RelationFieldGroup.Kind">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.RelationFieldGroup.TableName">
            <summary>
              A <c>SOME</c> instance containing the name of the Relation for this group based on any applied
              <see cref="T:Kvasir.Annotations.RelationTableAttribute">[RelationTable]</see> annotation, if one exists; otherwise, a
              <c>NONE</c> instance.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.RelationFieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.RelationFieldGroup"/>.
            </param>
            <param name="fields">
              The collection of constituent <see cref="T:Kvasir.Translation.FieldGroup">FieldGroups</see> that comprise the new
              <see cref="T:Kvasir.Translation.RelationFieldGroup"/>. The order is irrelevant. The Fields should be in a position to be
              directly modified (i.e. already <see cref="M:Kvasir.Translation.FieldGroup.Clone">cloned</see>).
            </param>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetColumn(Kvasir.Translation.Context,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.UniqueAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.PrimaryKeyAttribute},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetNullability(Kvasir.Translation.Context,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.SetRelationTableName(Kvasir.Translation.Context,Kvasir.Annotations.RelationTableAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.ProcessNativeNullability(Kvasir.Translation.Context)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.RelationFieldGroup.CreateExtractor(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup})">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SingleFieldGroup">
            <summary>
              A <see cref="T:Kvasir.Translation.FieldGroup"/> backed by a scalar or enumeration CLR property, and therefore corresponding to
              exactly one Field.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.Size">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.AllNullable">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.IsNativelyNullable">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.ReconstitutionArgumentName">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.Extractor">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SingleFieldGroup.Creator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.#ctor(Kvasir.Translation.Context,System.Reflection.PropertyInfo)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SingleFieldGroup"/>.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property backing the new <see cref="T:Kvasir.Translation.SingleFieldGroup"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.#ctor(Kvasir.Translation.SingleFieldGroup)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SingleFieldGroup"/> that is largely identical to another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.SingleFieldGroup"/>.
            </param>
            <seealso cref="M:Kvasir.Translation.FieldGroup.Clone"/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.#ctor(Kvasir.Translation.SingleFieldGroup,Kvasir.Translation.FieldGroup.ResetTag)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SingleFieldGroup"/> that is largely identical to another, but with the
              constituent Field reset.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.SingleFieldGroup"/>.
            </param>
            <param name="_">
              <i>overload discriminator</i>
            </param>
            <seealso cref="M:Kvasir.Translation.SingleFieldGroup.Reset"/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.CheckAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.ComparisonAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.InclusionAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.SignednessAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ApplyConstraint(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.Check.StringLengthAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.Filter(System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldDescriptor})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.References">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetDefault(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.DefaultAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetInCandidateKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.UniqueAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetInPrimaryKey(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.PrimaryKeyAttribute},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetName(Kvasir.Translation.Context,Kvasir.Translation.Nested{Kvasir.Annotations.NameAttribute})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetNamePrefix(Kvasir.Translation.Context,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.SetNullability(Kvasir.Translation.Context,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.ProcessNativeNullability(Kvasir.Translation.Context)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SingleFieldGroup.MakeField(Kvasir.Translation.Context,System.Reflection.PropertyInfo)">
            <summary>
              Make a <see cref="T:Kvasir.Translation.FieldDescriptor"/> of the correct derived type from a property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="source"/> was accessed via reflection. This context
              should include that property.
            </param>
            <param name="source">
              The CLR property from which to create a <see cref="T:Kvasir.Translation.FieldDescriptor"/>.
            </param>
            <returns>
              A <see cref="T:Kvasir.Translation.FieldDescriptor"/> based on <paramref name="source"/>, accounting only for annotations that
              impart data conversions.
            </returns>
            <exception cref="T:Kvasir.Translation.InvalidDataConverterException">
              if <paramref name="source"/> is annotated with either <see cref="T:Kvasir.Annotations.AsStringAttribute">[AsString]</see> or
              <see cref="T:Kvasir.Annotations.NumericAttribute">[Numeric]</see> but is not of enumeration type.
            </exception>
            <exception cref="T:Kvasir.Translation.ConflictingAnnotationsException">
              if <paramref name="source"/> is annotated with at least 2 of
              <see cref="T:Kvasir.Annotations.AsStringAttribute">[AsString]</see>, <see cref="T:Kvasir.Annotations.DataConverterAttribute">[DataConverter]</see>,
              and <see cref="T:Kvasir.Annotations.NumericAttribute">[Numeric]</see>.
            </exception>
        </member>
        <member name="T:Kvasir.Translation.ReconstitutionHelper">
            <summary>
              A helper class for evaluating a type's constructors for usability in Reconstitution.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionHelper.MakeCreator(Kvasir.Translation.Context,System.Type,System.Collections.Generic.IEnumerable{Kvasir.Translation.FieldGroup},System.Boolean)">
            <summary>
              Create the <see cref="T:Kvasir.Reconstitution.ICreator"/> for a particular type, whose data model consists of a set of Fields.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the translation of <paramref name="source"/> is occurring.
            </param>
            <param name="source">
              The <see cref="T:System.Type"/> for which to make a <see cref="T:Kvasir.Reconstitution.ICreator"/> (based on its available constructors).
            </param>
            <param name="fields">
              The Fields that make up the data model of <paramref name="source"/>.
            </param>
            <param name="forNullableField">
              If <see langword="false"/>, then a new non-<see langword="null"/> CLR object will be constructed even if
              each of the <see cref="T:Kvasir.Schema.DBValue">database values</see> provided is <see cref="P:Kvasir.Schema.DBValue.NULL"/>. If
              <see langword="false"/>, then such a set of values will result in a <see langword="null"/> object.
            </param>
        </member>
        <member name="M:Kvasir.Translation.ReconstitutionHelper.AreCompatible(System.Reflection.ParameterInfo,Kvasir.Translation.FieldGroup)">
            <summary>
              Determines if a constructor parameter is a viable match for a property during Reconstitution.
            </summary>
            <param name="parameter">
              The constructor parameter.
            </param>
            <param name="argument">
              The <see cref="T:Kvasir.Translation.FieldGroup"/> representing the <see langword="property"/>.
            </param>
            <returns>
              <see langword="true"/> if the types of <paramref name="parameter"/> and <paramref name="argument"/> are
              same, or if the type of <paramref name="parameter"/> is the nullable version of
              <paramref name="argument"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.RelationTracker">
            <summary>
              A utility for tracking annotations applied to Aggregate-nested Relation-type properties.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.RelationTracker.Name">
            <summary>
              The name of the backing Relation-type property, accounting for any <see cref="T:Kvasir.Annotations.NameAttribute">[Name]</see>
              annotation that has been applied.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.RelationTracker.Path">
            <summary>
              The access path, relative to some arbitrary "current" location in the translation process, at which
              <see cref="P:Kvasir.Translation.RelationTracker.Property"/> resides.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.RelationTracker.Property">
            <summary>
              The <see cref="T:System.Reflection.PropertyInfo">property</see> defining the Relation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.RelationTracker.#ctor(System.Reflection.PropertyInfo)">
            <summary>
              Constructs a new empty <see cref="T:Kvasir.Translation.RelationTracker"/>.
            </summary>
            <param name="source">
              The source <see cref="P:Kvasir.Translation.RelationTracker.Property"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.RelationTracker.#ctor(Kvasir.Translation.RelationTracker,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.RelationTracker"/> that is identical to another but with a different
              <see cref="P:Kvasir.Translation.RelationTracker.Path"/>.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.RelationTracker"/>.
            </param>
            <param name="path">
              The new <see cref="P:Kvasir.Translation.RelationTracker.Path">access path</see>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.RelationTracker.AttachAnnotation``1(Kvasir.Translation.Context,Kvasir.Translation.Nested{``0})">
            <summary>
              Process an annotation that was applied to the backing Aggregate-nested property.
            </summary>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="annotation"/> was encountered.
            </param>
            <param name="annotation">
              The annotation.
            </param>
            <exception cref="T:Kvasir.Translation.InapplicableAnnotationException">
              if <paramref name="annotation"/> applies to the Relation itself and is not a
              <see cref="T:Kvasir.Annotations.NameAttribute">[Name]</see> annotation.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.RelationTracker.ExtendPath(System.String)">
            <summary>
              Prepend a segment to the <see cref="P:Kvasir.Translation.RelationTracker.Path"/>.
            </summary>
            <param name="path">
              The new path segment.
            </param>
            <returns>
              A new <see cref="T:Kvasir.Translation.RelationTracker"/> that is equivalent to this one but with <paramref name="path"/> (and a
              following <c>.</c>) prepended to the <see cref="P:Kvasir.Translation.RelationTracker.Path"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.RelationTracker.AnnotationsFor(System.String)">
            <summary>
              Produces all <see cref="M:Kvasir.Translation.RelationTracker.AttachAnnotation``1(Kvasir.Translation.Context,Kvasir.Translation.Nested{``0})">attached annotations</see> that apply to
              Fields encountered starting at a particular path.
            </summary>
            <param name="fieldPath">
              The starting path.
            </param>
            <returns>
              A collection of attached annotations, no particular order, where the path of the annotation at the time of
              application is exactly <paramref name="fieldPath"/> or is nested thereunder.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.SyntheticConstructorInfo">
            <summary>
              The reflection representation of the constructor of a <see cref="T:Kvasir.Translation.SyntheticType"/>, or of the default
              constructor present on all structs.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SyntheticConstructorInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticConstructorInfo.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticConstructorInfo.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.#ctor(System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/> representing the implicit default constructor for
              a struct.
            </summary>
            <param name="type">
              The <see cref="T:System.Type"/> of the struct.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.#ctor(Kvasir.Translation.SyntheticType,System.Collections.Generic.IEnumerable{Kvasir.Translation.SyntheticPropertyInfo})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/> for <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </summary>
            <param name="type">
              The <see cref="T:Kvasir.Translation.SyntheticType"/> for which the new <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/> serves.
            </param>
            <param name="properties">
              The properties of the <see cref="T:Kvasir.Translation.SyntheticType"/> for which the new <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/> is
              being defined. Each property corresponds to exactly one argument in the constructor.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticConstructorInfo.MethodHandle">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticConstructorInfo.Name">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.GetMethodImplementationFlags">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticConstructorInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SyntheticMethodInfo">
            <summary>
              The reflection representation of the <c>GET</c> method of a <see cref="T:Kvasir.Translation.SyntheticPropertyInfo">Synthetic
              Property</see>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.ReturnParameter">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.ReturnType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.#ctor(Kvasir.Translation.SyntheticPropertyInfo)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticMethodInfo"/>.
            </summary>
            <param name="source">
              The <see cref="T:Kvasir.Translation.SyntheticPropertyInfo">property</see> whose <c>GET</c> method is modeled by the new
              <see cref="T:Kvasir.Translation.SyntheticMethodInfo"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetBaseDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.MethodHandle">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticMethodInfo.ReturnTypeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetMethodImplementationFlags">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticMethodInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SyntheticParameterInfo">
            <summary>
              The reflection representation of an argument to a <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.SyntheticParameterInfo.#ctor(Kvasir.Translation.SyntheticConstructorInfo,System.String,System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticParameterInfo"/>.
            </summary>
            <param name="constructor">
              The <see cref="T:Kvasir.Translation.SyntheticConstructorInfo"/> in which the parameter exists.
            </param>
            <param name="name">
              The <see cref="P:System.Reflection.ParameterInfo.Name">name</see> of the new parameter.
            </param>
            <param name="type">
              The <see cref="P:System.Reflection.ParameterInfo.ParameterType">type</see> of the new parameter.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticParameterInfo.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SyntheticPropertyInfo">
            <summary>
              The reflection representation of a property on a <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.#ctor(System.String,Kvasir.Translation.SyntheticType,System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticPropertyInfo"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Translation.SyntheticPropertyInfo.Name"/> of the property.
            </param>
            <param name="source">
              The <see cref="T:Kvasir.Translation.SyntheticType"/> on which the property resides.
            </param>
            <param name="propertyType">
              The <see cref="P:Kvasir.Translation.SyntheticPropertyInfo.PropertyType">type</see> of the property.
            </param>
            <param name="annotations">
              The set of <see cref="T:System.Attribute">annotations</see> applied to the property, in any order.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetGetMethod(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetIndexParameters">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetSetMethod(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticPropertyInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetAccessors(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SyntheticReturnInfo">
            <summary>
              The reflection representation of the return value of a <see cref="T:Kvasir.Translation.SyntheticMethodInfo">Synthetic Method</see>.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.SyntheticReturnInfo.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.SyntheticType">
            <summary>
              The reflection representation that models the element of a Relation.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.ActualType">
            <summary>
              The <see cref="T:System.Type"/> that the <see cref="T:Kvasir.Translation.SyntheticType"/> is masquerading as.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.BaseType">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.Name">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.Namespace">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.UnderlyingSystemType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.#ctor(System.String,System.String,System.Reflection.Assembly,System.Func{Kvasir.Translation.SyntheticType,System.Collections.Generic.IEnumerable{Kvasir.Translation.SyntheticPropertyInfo}},System.Type)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </summary>
            <param name="name">
              The <see cref="P:Kvasir.Translation.SyntheticType.Name"/> of the type.
            </param>
            <param name="ns">
              The <see cref="P:Kvasir.Translation.SyntheticType.Namespace"/> of the type.
            </param>
            <param name="assmebly">
              The <see cref="P:Kvasir.Translation.SyntheticType.Assembly"/> of the type.
            </param>
            <param name="properties">
              A function that, when provided <c>this</c> as an argument, produces an enumerable of the type's
              properties. (This is a function because of the circular definition: the SyntheticType needs to know its
              properties, and each SyntheticProperty needs to know its owning SyntheticType.)
            </param>
            <param name="actualType">
              The <see cref="T:System.Type"/> that the new <see cref="T:Kvasir.Translation.SyntheticType"/> is a façade for.
            </param>
            <seealso cref="M:Kvasir.Translation.SyntheticType.MakeSyntheticType(System.Type,Kvasir.Translation.RelationTracker)"/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetConstructors(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.Equals(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsArrayImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsByRefImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsPointerImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.MakeSyntheticType(System.Type,Kvasir.Translation.RelationTracker)">
            <summary>
              Creates a new <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </summary>
            <param name="entity">
              The type of the owning Entity, which defines the first property on the new <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </param>
            <param name="tracker">
              The <see cref="T:Kvasir.Translation.RelationTracker"/> containing the metadata for the property that forms the rest of the
              <see cref="T:Kvasir.Translation.SyntheticType"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetInterfaces">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetProperties(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetAttributeFlagsImpl">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.AssemblyQualifiedName">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.GUID">
            <inheritdoc/>
        </member>
        <member name="P:Kvasir.Translation.SyntheticType.Module">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetElementType">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetEvent(System.String,System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetEvents(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetField(System.String,System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetFields(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetInterface(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetMembers(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetMethods(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetNestedType(System.String,System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetNestedTypes(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.HasElementTypeImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsCOMObjectImpl">
            <inheritdoc/>
        </member>
        <member name="M:Kvasir.Translation.SyntheticType.IsPrimitiveImpl">
            <inheritdoc/>
        </member>
        <member name="T:Kvasir.Translation.PrincipalTableDef">
            <summary>
              The definition of a Principal Table.
            </summary>
            
            <param name="Table">The schema model for the Principal Table.</param>
            <param name="Extractor">The plan that can extract a row of data to be stored into the Principal Table.</param>
            <param name="Reconstitutor">The plan that can recreate a CLR object from a row of data stored in the Principal Table.</param>
            <param name="KeyExtractor">The plan that can extract the subset of a row of data that constitute's the Primary Key in the Principal Table.</param>
        </member>
        <member name="M:Kvasir.Translation.PrincipalTableDef.#ctor(Kvasir.Schema.ITable,Kvasir.Extraction.DataExtractionPlan,Kvasir.Reconstitution.DataReconstitutionPlan,Kvasir.Extraction.DataExtractionPlan)">
            <summary>
              The definition of a Principal Table.
            </summary>
            
            <param name="Table">The schema model for the Principal Table.</param>
            <param name="Extractor">The plan that can extract a row of data to be stored into the Principal Table.</param>
            <param name="Reconstitutor">The plan that can recreate a CLR object from a row of data stored in the Principal Table.</param>
            <param name="KeyExtractor">The plan that can extract the subset of a row of data that constitute's the Primary Key in the Principal Table.</param>
        </member>
        <member name="P:Kvasir.Translation.PrincipalTableDef.Table">
            <summary>The schema model for the Principal Table.</summary>
        </member>
        <member name="P:Kvasir.Translation.PrincipalTableDef.Extractor">
            <summary>The plan that can extract a row of data to be stored into the Principal Table.</summary>
        </member>
        <member name="P:Kvasir.Translation.PrincipalTableDef.Reconstitutor">
            <summary>The plan that can recreate a CLR object from a row of data stored in the Principal Table.</summary>
        </member>
        <member name="P:Kvasir.Translation.PrincipalTableDef.KeyExtractor">
            <summary>The plan that can extract the subset of a row of data that constitute's the Primary Key in the Principal Table.</summary>
        </member>
        <member name="T:Kvasir.Translation.RelationTableDef">
            <summary>
              The definition of a Relation Table.
            </summary>
            
            <param name="Table">The schema model for the Relation Table.</param>
            <param name="Extractor">The plan that can extract the element-specific data to be stored in the Relation Table.</param>
            <param name="Repopulator">The plan that can populate elements into a CLR Relation from a row of data stored in the Relation Table.</param>
        </member>
        <member name="M:Kvasir.Translation.RelationTableDef.#ctor(Kvasir.Schema.ITable,Kvasir.Extraction.RelationExtractionPlan,Kvasir.Reconstitution.RelationRepopulationPlan)">
            <summary>
              The definition of a Relation Table.
            </summary>
            
            <param name="Table">The schema model for the Relation Table.</param>
            <param name="Extractor">The plan that can extract the element-specific data to be stored in the Relation Table.</param>
            <param name="Repopulator">The plan that can populate elements into a CLR Relation from a row of data stored in the Relation Table.</param>
        </member>
        <member name="P:Kvasir.Translation.RelationTableDef.Table">
            <summary>The schema model for the Relation Table.</summary>
        </member>
        <member name="P:Kvasir.Translation.RelationTableDef.Extractor">
            <summary>The plan that can extract the element-specific data to be stored in the Relation Table.</summary>
        </member>
        <member name="P:Kvasir.Translation.RelationTableDef.Repopulator">
            <summary>The plan that can populate elements into a CLR Relation from a row of data stored in the Relation Table.</summary>
        </member>
        <member name="T:Kvasir.Translation.Bound">
            <summary>
              A boundary, which forms an endpoint of an <see cref="T:Kvasir.Translation.Interval"/> that may be open or closed.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Bound.#ctor(System.Object,System.Boolean)">
            <summary>
              A boundary, which forms an endpoint of an <see cref="T:Kvasir.Translation.Interval"/> that may be open or closed.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Bound.ClampUpper(Kvasir.Translation.Bound,Kvasir.Translation.Bound)">
            <summary>
              Determines which of two <see cref="T:Kvasir.Translation.Bound">Bounds</see> subsumes the other, assuming both represent upper
              bounds.
            </summary>
            <remarks>
              The purpose of this method is to "clamp" two upper bounds that both apply to the more restrictive of the
              two. For example, if a range is both "no more than 100" and "no more than 50," then the "clamp" will
              produce the latter. If the endpoints are equal, the <see cref="T:Kvasir.Translation.Bound"/> that is exclusive will be chosen.
            </remarks>
            <param name="lhs">
              The first of the upper bounds.
            </param>
            <param name="rhs">
              The second of the upper bounds.
            </param>
            <returns>
              Whichever of <paramref name="lhs"/> and <paramref name="rhs"/> is a more restrictive upper bound.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Bound.ClampLower(Kvasir.Translation.Bound,Kvasir.Translation.Bound)">
            <summary>
              Determines which of two <see cref="T:Kvasir.Translation.Bound">Bounds</see> subsumes the other, assuming both represent lower
              bounds.
            </summary>
            <remarks>
              The purpose of this method is to "clamp" two lower bounds that both apply to the more restrictive of the
              two. For example, if a range is both "no less than 100" and "no less than 50," then the "clamp" will
              produce the former. If the endpoints are equal, the <see cref="T:Kvasir.Translation.Bound"/> that is exclusive will be chosen.
            </remarks>
            <param name="lhs">
              The first of the lower bounds.
            </param>
            <param name="rhs">
              The second of the lower bounds.
            </param>
            <returns>
              Whichever of <paramref name="lhs"/> and <paramref name="rhs"/> is a more restrictive lower bound.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.Display">
            <summary>
              A collection of utility functions for displaying content to users, generally in the context of error messages.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Display.AnnotationDisplayName(System.Type)">
            <summary>
              Produces the display name for an annotation type, enclosed in brackets, for use in error messages that
              convey a problem with a user-provided annotation.
            </summary>
            <param name="type">
              The annotation <see cref="T:System.Type"/>.
            </param>
            <returns>
              The name of <paramref name="type"/> to be used in error messages.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Display.DisplayName(System.Type)">
            <summary>
              Produces the display name for a type, enclosed in backticks, for use in error messages that communicate
              the type of a property or value.
            </summary>
            <param name="self">
              The <see cref="T:System.Type"/> on which the extension method is invoked.
            </param>
            <returns>
              The name of <paramref name="self"/> to be used in error messages.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.FieldName">
            <summary>
              The name of a Field or a Field Group, as tracked throughout the process of translating a property and the
              types that enclose it.
            </summary>
            <remarks>
              A Field's name consists of two parts: the "Name Part" and the "Prefix Part." By default the "Name Part" is the
              name of the CLR source property, but that can be changed by a <c>[Name]</c> annotation placed directly on the
              property or applying to the property via a path. The "Prefix Part" is the dot-separated names of the access
              path from a given scope to the property. When a <c>[Name]</c> annotation is applied to a non-scalar, it alters
              the value that particular property contributes to the "Prefix Part" of any nested Fields. When the "Name Part"
              is set via annotation, the "Prefix Part" is cleared out.
            </remarks>
        </member>
        <member name="P:Kvasir.Translation.FieldName.SchemaName">
            <summary>
              The <see cref="T:Kvasir.Translation.FieldName"/>, converted into a schema-applicable <see cref="T:Kvasir.Schema.FieldName"/>.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.FieldName.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.FieldName"/> with a given Name Part.
            </summary>
            <param name="name">
              The Name Part.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldName.#ctor(Kvasir.Translation.FieldName)">
            <summary>
              Constructs a <see cref="T:Kvasir.Translation.FieldName"/> that is a deep copy of another.
            </summary>
            <param name="source">
              The source <see cref="T:Kvasir.Translation.FieldName"/>.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldName.SetNamePart(System.String)">
            <summary>
              Sets the Name Part of the <see cref="T:Kvasir.Translation.FieldName"/>, overwriting whatever Name Part is currently set and
              clearing out the entirety of the Prefix Part.
            </summary>
            <param name="name">
              The new Name Part.
            </param>
        </member>
        <member name="M:Kvasir.Translation.FieldName.SetPrefixPart(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
              Sets the Prefix Part of the <see cref="T:Kvasir.Translation.FieldName"/>.
            </summary>
            <param name="prefix">
              The suffix of the new Prefix Part.
            </param>
        </member>
        <member name="T:Kvasir.Translation.FieldSchema">
            <summary>
              The translated schema components of a single Field.
            </summary>
            
            <param name="Descriptor">The <see cref="T:Kvasir.Translation.FieldDescriptor"/> that produced the schema.</param>
            <param name="Field">The <see cref="T:Kvasir.Schema.IField">Field</see> schema.</param>
            <param name="CHECKs">The <c>CHECK</c> constraint clauses that apply to <paramref name="Field"/>.</param>
        </member>
        <member name="M:Kvasir.Translation.FieldSchema.#ctor(Kvasir.Translation.FieldDescriptor,Kvasir.Schema.IField,System.Collections.Generic.IEnumerable{Kvasir.Schema.CheckConstraint})">
            <summary>
              The translated schema components of a single Field.
            </summary>
            
            <param name="Descriptor">The <see cref="T:Kvasir.Translation.FieldDescriptor"/> that produced the schema.</param>
            <param name="Field">The <see cref="T:Kvasir.Schema.IField">Field</see> schema.</param>
            <param name="CHECKs">The <c>CHECK</c> constraint clauses that apply to <paramref name="Field"/>.</param>
        </member>
        <member name="P:Kvasir.Translation.FieldSchema.Descriptor">
            <summary>The <see cref="T:Kvasir.Translation.FieldDescriptor"/> that produced the schema.</summary>
        </member>
        <member name="P:Kvasir.Translation.FieldSchema.Field">
            <summary>The <see cref="T:Kvasir.Schema.IField">Field</see> schema.</summary>
        </member>
        <member name="P:Kvasir.Translation.FieldSchema.CHECKs">
            <summary>The <c>CHECK</c> constraint clauses that apply to <paramref name="Field"/>.</summary>
        </member>
        <member name="T:Kvasir.Translation.Interval">
             <summary>
               An interval, which may infinite, one-sided, partially open, or closed.
             </summary>
            
             <param name="LowerBound">The endpoint that defines the lower boundary of the <see cref="T:Kvasir.Translation.Interval"/></param>
             <param name="UpperBound">The endpoint that defines the upper boundary of the <see cref="T:Kvasir.Translation.Interval"/></param>
        </member>
        <member name="M:Kvasir.Translation.Interval.#ctor(Optional.Option{Kvasir.Translation.Bound},Optional.Option{Kvasir.Translation.Bound})">
             <summary>
               An interval, which may infinite, one-sided, partially open, or closed.
             </summary>
            
             <param name="LowerBound">The endpoint that defines the lower boundary of the <see cref="T:Kvasir.Translation.Interval"/></param>
             <param name="UpperBound">The endpoint that defines the upper boundary of the <see cref="T:Kvasir.Translation.Interval"/></param>
        </member>
        <member name="P:Kvasir.Translation.Interval.LowerBound">
            <summary>The endpoint that defines the lower boundary of the <see cref="T:Kvasir.Translation.Interval"/></summary>
        </member>
        <member name="P:Kvasir.Translation.Interval.UpperBound">
            <summary>The endpoint that defines the upper boundary of the <see cref="T:Kvasir.Translation.Interval"/></summary>
        </member>
        <member name="M:Kvasir.Translation.Interval.Contains(System.Object)">
            <summary>
              Checks if a value is contained within the <see cref="T:Kvasir.Translation.Interval"/>.
            </summary>
            <param name="value">
              The probe value.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="value"/> is within the <see cref="T:Kvasir.Translation.Interval"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Interval.IsValid">
            <summary>
              Checks if the <see cref="T:Kvasir.Translation.Interval"/> is valid.
            </summary>
            <remarks>
              A valid Interval is one that is empty, assuming that there can be at least one value in between any two
              distinct values. An infinite Interval is always valid, as is a one-sided Interval. A partially open
              Interval and a closed Interval is valid if the Interval's lower boundary is less than its upper boundary.
              For example, the Interval [1, 10] is obviously valid, as are [1, 10), (1, 10], and (1, 10). The Interval
              [1, 1] is valid (it contains just a single value), but the Intervals [1, 1), (1, 1], and (1, 1) are all
              invalid. Perhaps counterintuitively, the Interval (1, 2) is valid, even though it is mathematically empty;
              this makes it so that we don't have to figure out epsilons, which don't exist for all orderable types
              (e.g. strings).
            </remarks>
            <returns>
              <see langword="true"/> if the <see cref="T:Kvasir.Translation.Interval"/> is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Interval.ToString">
            <summary>
              Produces a human-readable string representation of the <see cref="T:Kvasir.Translation.Interval"/>.
            </summary>
            <returns>
              A representation of the <see cref="T:Kvasir.Translation.Interval"/> in mathematical notation, with an absent endpoint being
              indicated by the infinity symbol.
            </returns>
        </member>
        <member name="T:Kvasir.Translation.Nested`1">
            <summary>
              A wrapper around a "nestable" annotation can track the applied-to path as translation descends.
            </summary>
            <remarks>
              The <see cref="T:Kvasir.Translation.Nested`1"/> serves as kind of façade over a "nestable" annotation. A "nestable"
              annotation carries with it a dot-separated path that describes the property to which it ultimately applies.
              Rather than attempt to resolve the entire path at once, it is easier (for both processing and error checking)
              to "step" one nested property at a time. The API of the <see cref="T:Kvasir.Translation.Nested`1"/> class allows for this
              pattern, exposing only the next portion of the overall application path.
            </remarks>
        </member>
        <member name="P:Kvasir.Translation.Nested`1.AppliesHere">
            <summary>
              Whether or not the annotation applies to the current scope.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.Nested`1.NextPath">
            <summary>
              The next path to which the annotation applies.
            </summary>
        </member>
        <member name="P:Kvasir.Translation.Nested`1.Annotation">
            <summary>
              The "nestable" annotation.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Nested`1.op_Implicit(`0)~Kvasir.Translation.Nested{`0}">
            <summary>
              Implicitly creates a <see cref="T:Kvasir.Translation.Nested`1"/> from a <typeparamref name="TAttribute"/>"/>.
            </summary>
            <param name="annotation">
              The "nestable" annotation.
            </param>
            <returns>
              A new <see cref="T:Kvasir.Translation.Nested`1"/> wrapping <paramref name="annotation"/>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Nested`1.Step">
            <summary>
              Advance the <see cref="T:Kvasir.Translation.Nested`1"/> to the next portion of its application path.
            </summary>
            <returns>
              A new <see cref="T:Kvasir.Translation.Nested`1"/> that has discarded its <see cref="P:Kvasir.Translation.Nested`1.NextPath">"next path"</see>.
            </returns>
        </member>
        <member name="M:Kvasir.Translation.Nested`1.#ctor(`0)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.Nested`1"/>.
            </summary>
            <param name="annotation">
              The "nestable" annotation.
            </param>
        </member>
        <member name="M:Kvasir.Translation.Nested`1.#ctor(`0,System.String)">
            <summary>
              Constructs a new <see cref="T:Kvasir.Translation.Nested`1"/>, which behaves as if the path on the "nestable"
              annotation it represents were a specific value.
            </summary>
            <param name="annotation">
              The "nestable" annotation.
            </param>
            <param name="path">
              The value to use as the <see cref="P:Kvasir.Annotations.INestableAnnotation.Path">path</see> of <paramref name="annotation"/>.
            </param>
        </member>
        <member name="T:Kvasir.Translation.Try">
            <summary>
              A collection of helper extension methods for attempting an operation and throwing a
              <see cref="T:Kvasir.Translation.FailedOperationException"/> in the event of an error.
            </summary>
        </member>
        <member name="M:Kvasir.Translation.Try.TryConvert(Cybele.Core.DataConverter,System.Object,Kvasir.Translation.Context)">
            <summary>
              Attempt to perform a data conversion.
            </summary>
            <param name="self">
              The <see cref="T:Cybele.Core.DataConverter"/> on which the extension method was invoked.
            </param>
            <param name="source">
              The possibly <see langword="null"/> object to convert.
            </param>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which the attempted conversion is occurring.
            </param>
            <returns>
              The conversion of <paramref name="source"/> using <paramref name="self"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.FailedOperationException">
              if attempting to convert <paramref name="source"/> using <paramref name="self"/> throws an exception.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Try.TryMakeClause(Kvasir.Annotations.CheckAttribute,Kvasir.Schema.IField,Cybele.Core.DataConverter,Kvasir.Core.Settings,Kvasir.Translation.Context)">
            <summary>
              Attempt to generate a custom simple <c>CHECK</c> constraint.
            </summary>
            <param name="self">
              The <see cref="T:Kvasir.Annotations.CheckAttribute"/> on which the extension method was invoked.
            </param>
            <param name="field">
              The <see cref="T:Kvasir.Schema.IField">Field</see> that is constituent to the constraint.
            </param>
            <param name="converter">
              The <see cref="T:Cybele.Core.DataConverter"/> that is constituent to the constraint.
            </param>
            <param name="settings">
              The <see cref="T:Kvasir.Core.Settings"/> to use.
            </param>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="self"/> was encountered.
            </param>
            <returns>
              The <c>CHECK</c> constraint clause generated from <paramref name="self"/> for <paramref name="field"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.FailedOperationException">
              if attempting to generate the custom <c>CHECK</c> constraint throws an exception.
            </exception>
        </member>
        <member name="M:Kvasir.Translation.Try.TryMakeClause(Kvasir.Annotations.Check.ComplexAttribute,System.Collections.Generic.IEnumerable{Kvasir.Schema.IField},System.Collections.Generic.IEnumerable{Cybele.Core.DataConverter},Kvasir.Core.Settings,Kvasir.Translation.Context)">
            <summary>
              Attempt to generate a custom complex <c>CHECK</c> constraint.
            </summary>
            <param name="self">
              The <see cref="T:Kvasir.Annotations.Check.ComplexAttribute"/> on which the extension method was invoked.
            </param>
            <param name="fields">
              The <see cref="T:Kvasir.Schema.IField">Fields</see> that are constituent to the constraint.
            </param>
            <param name="converters">
              The <see cref="T:Cybele.Core.DataConverter">DataConverters</see> that are constituent to the constraint.
            </param>
            <param name="settings">
              The <see cref="T:Kvasir.Core.Settings"/> to use.
            </param>
            <param name="context">
              The <see cref="T:Kvasir.Translation.Context"/> in which <paramref name="self"/> was encountered.
            </param>
            <returns>
              The <c>CHECK</c> constraint generated with <paramref name="self"/> from <paramref name="fields"/> and
              <paramref name="converters"/> via <paramref name="settings"/>.
            </returns>
            <exception cref="T:Kvasir.Translation.FailedOperationException">
              if attempting to generate the custom <c>CHECK</c> constraint throws an exception.
            </exception>
        </member>
    </members>
</doc>
