<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cybele</name>
    </assembly>
    <members>
        <member name="T:Cybele.Collections.StickyList`1">
            <summary>
              An indexable collection in which certain elements are "stuck" in specific slots while others may move from
              slot to slot.
            </summary>
            <remarks>
              <para>
                Elements in a <see cref="T:Cybele.Collections.StickyList`1"/> come in two flavors: sticky and non-sticky. A sticky element is
                inserted with a specific index and will not move from that slot. A non-sticky element is added to the
                collection in the first available slot, being appended on the end if there are no gaps; that element may
                move to a new slot if a gap arises later. Because of this, the order of elements within the collection is
                volatile and should not be relied on; only the positions of sticky elements is guaranteed.
              </para>
              <para>
                The nature of sticky elements means that performing operations on a <see cref="T:Cybele.Collections.StickyList`1"/> may lead to
                "gaps." For example, inserting a sticky element at index <c>3</c> into an empty list will produce a gap in
                slots <c>0</c>, <c>1</c>, and <c>2</c>. Attempting to access an element at this index for any reason will
                result in an exception, much like attempting to read beyond the end of the list. However, the
                <see cref="T:Cybele.Collections.StickyList`1"/> will do what it can to minimize gaps by rearranging non-sticky elements when
                gaps arise; if the gaps cannot be fully eliminated, they will be pushed as far to the back of the list as
                possible. On iteration, gaps are ignored.
              </para>
            </remarks>
            <typeparam name="T">
              The type of element to be stored in the StickyList.
            </typeparam>
        </member>
        <member name="P:Cybele.Collections.StickyList`1.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index in the <see cref="T:Cybele.Collections.StickyList`1"/>.
            </summary>
            <param name="index">
              [GET] The <c>0</c>-based index of the element to return.
              [SET] The <c>0</c>-based index at which to insert the new element.
            </param>
            <returns>
              [GET] The element at index <paramref name="index"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              [GET] if <paramref name="index"/> is negative or if there is no element at the specified position,
                including if it is larger than <see cref="P:Cybele.Collections.StickyList`1.LargestIndex"/>.
              [SET] if <paramref name="index"/> is negative
            </exception>
            <exception cref="T:System.InvalidOperationException">
              [SET] if a sticky element is already in the StickyList at position <paramref name="index"/>.
            </exception>
        </member>
        <member name="P:Cybele.Collections.StickyList`1.Count">
            <summary>
              The number of elements contained in the <see cref="T:Cybele.Collections.StickyList`1"/>. This count ignores gaps, and
              therefore may be less than <see cref="P:Cybele.Collections.StickyList`1.LargestIndex"/>.
            </summary>
        </member>
        <member name="P:Cybele.Collections.StickyList`1.LargestIndex">
            <summary>
              The largest <c>0</c>-based index that is <see cref="M:Cybele.Collections.StickyList`1.IsOccupied(System.Int32)">occupied</see> by an element in the
              <see cref="T:Cybele.Collections.StickyList`1"/>. If the list is empty, this property returns <c>-1</c>.
            </summary>
        </member>
        <member name="P:Cybele.Collections.StickyList`1.HasGaps">
            <summary>
              Whether or not there are any gaps in the <see cref="T:Cybele.Collections.StickyList`1"/>.
            </summary>
        </member>
        <member name="P:Cybele.Collections.StickyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.#ctor">
            <summary>
              Constructs a new, empty <see cref="T:Cybele.Collections.StickyList`1"/> that uses the default <see cref="T:System.Collections.IEqualityComparer"/>
              for <typeparamref name="T"/> for comparison purposes.
            </summary>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Constructs a new <see cref="T:Cybele.Collections.StickyList`1"/> that uses the default <see cref="T:System.Collections.IEqualityComparer"/> for
              <typeparamref name="T"/> for comparison purposes and is populated with the non-sticky contents of another
              enumerable.
            </summary>
            <param name="enumerable">
              The enumerable from which to populate the initial state of the new StickyList. All elemenets will be
              initialized as non-sticky.
            </param>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Constructs a new, empty <see cref="T:Cybele.Collections.StickyList`1"/> that uses a custom <see cref="T:System.Collections.IEqualityComparer"/>
              for comparison purposes.
            </summary>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that the new StickyList should use for comparisons.
            </param>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
              Constructs a new <see cref="T:Cybele.Collections.StickyList`1"/> that uses a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for
              comparison purposes and is populated with the non-sticky contents of another enumerable.
            </summary>
            <param name="enumerable">
              The enumerable from which to populate the initial state of the new StickyList. All elemenets will be
              initialized as non-sticky.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that the new StickyList should use for comparisons.
            </param>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.IsOccupied(System.Int32)">
            <summary>
              Checks if a particular index in the <see cref="T:Cybele.Collections.StickyList`1"/> is occupied by an element.
            </summary>
            <param name="index">
              The <c>0</c>-based index at which to check.
            </param>
            <returns>
              <see langword="true"/> if the StickyList contains an element at position <paramref name="index"/>;
              otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is negative or not less than <see cref="P:Cybele.Collections.StickyList`1.LargestIndex"/>.
            </exception>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.IsSticky(System.Int32)">
            <summary>
              Checks if an element at a particular index in the <see cref="T:Cybele.Collections.StickyList`1"/> is "sticky."
            </summary>
            <param name="index">
              The <c>0</c>-based index at which to check.
            </param>
            <returns>
              <see langword="true"/> if the element at position <paramref name="index"/> is "sticky"; otherwise,
              <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is negative or if there is no element at the specified position, including if
              it is larger than <see cref="P:Cybele.Collections.StickyList`1.LargestIndex"/>.
            </exception>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.Contains(`0)">
            <summary>
              Checks if an elemment exists in the <see cref="T:Cybele.Collections.StickyList`1"/>.
            </summary>
            <param name="element">
              The probe element.
            </param>
            <returns>
              <see langword="true"/> if the StickyList contains an element that compares equal to
              <paramref name="element"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.IndexOf(`0)">
            <summary>
              Determines the <c>0</c>-based index of an element in the <see cref="T:Cybele.Collections.StickyList`1"/>.
            </summary>
            <param name="element">
              The probe element.
            </param>
            <returns>
              The <c>0</c>-based index of the first element in the StickList that compares equal to
              <paramref name="element"/>, if suh an element exists; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.Add(`0)">
            <summary>
              Adds a new non-sticky element into the <see cref="T:Cybele.Collections.StickyList`1"/>. If there are no gaps, the element
              will be appended onto the end of the collection. If there are any gaps, the element will be placed into
              the unoccupied slot with the smallest index.
            </summary>
            <param name="element">
              The new element to add.
            </param>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.Insert(System.Int32,`0)">
            <summary>
              Adds a new sticky element into the <see cref="T:Cybele.Collections.StickyList`1"/> at a specified position. If that position
              is occupied by a non-sticky element, it will be displaced and <see cref="M:Cybele.Collections.StickyList`1.Add(`0)">added back</see>. If
              that position is beyond the current endpoint of the collection, a new gap will be created.
            </summary>
            <param name="index">
              The <c>0</c>-based index at which to add the new element.
            </param>
            <param name="element">
              The new element to add.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              if a sticky element already occupies position <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.Remove(`0)">
            <summary>
              Removes the first element in the <see cref="T:Cybele.Collections.StickyList`1"/> that compares equal to a probe. If the
              removal creates a gap, non-sticky elements will be rearranged so as to push the gap toward the end.
              Elements will not be rearranged otherwise.
            </summary>
            <param name="element">
              The probe element.
            </param>
            <returns>
              <see langword="true"/> if an element was removed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.RemoveAt(System.Int32)">
            <summary>
              Removes the element at a specified index from the <see cref="T:Cybele.Collections.StickyList`1"/>. If the removal creates a
              gap, non-sticky elements will be rearranged so as to push the gap toward the end. Elements will not be
              rearranged otherwise.
            </summary>
            <param name="index">
              The <c>0</c>-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if <paramref name="index"/> is negative or if there is no element at the specified position, including if
              it is larger than <see cref="P:Cybele.Collections.StickyList`1.LargestIndex"/>.
            </exception>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.Clear">
            <summary>
              Removes all elements from the <see cref="T:Cybele.Collections.StickyList`1"/>.
            </summary>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the elements of the <see cref="T:Cybele.Collections.StickyList`1"/>, skipping any
              gaps.
            </summary>
            <remarks>
              Because the StickyList's enumerator skips gaps, the sequence of items (and, by extension, the sequence
              produced by using LINQ to convert a StickyList to an Array or standard List) may not line up with indices
              as reported by other aspects of the API.
            </remarks>
            <returns>
              An enumerator over the elements of the StickyList in order, with all gaps skipped.
            </returns>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.EnsureInvariant">
            <summary>
              Checks that the <see cref="T:Cybele.Collections.StickyList`1"/> invariant is maintained. Specifically, there should be no
              non-sticky elements present after the first gap; and, the Count should always reflect the number of
              non-empty entries in the collection.
            </summary>
            <remarks>
              Violation of a class invariant is always due to programmer error. User input should be sanitized and
              checked to ensure that its use does not violate invariants, with appropriate (documented) exceptions
              raised if necessary.
            </remarks>
            <exception cref="T:System.ApplicationException">
              if the current state of the StickList violates the class's invariant.
            </exception>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Cybele.Collections.StickyList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Cybele.Core.ConceptString`1">
            <summary>
              A strongly typed piece of text for representing specific domain concepts.
            </summary>
            <remarks>
              <para>
                The <see cref="T:Cybele.Core.ConceptString`1"/> is designed to be a replacement for <see cref="T:System.String"/> in APIs
                where the use of a primitive would otherwise belie a specific domain concept. The class is intended for use
                at non-boundary points to encapsulate specific validation rules, increase readability, and avoid subtle
                bugs that can be introduced by mixing up <see cref="T:System.String"/> arguments in function calls. At library and
                application boundaries, a <see cref="T:Cybele.Core.ConceptString`1"/> can be explicitly converted back into the
                raw underlying <see cref="T:System.String"/>. By using a <see cref="T:Cybele.Core.ConceptString`1"/>, a API signals to the
                caller that the text has a specific semantic meaning and forces the caller to acknowledge any associated
                requirements.
              </para>
              <para>
                The API exposed by <see cref="T:Cybele.Core.ConceptString`1"/> is intentionally minimal, covering only the barest
                functionality of a character sequence. Equality is performed using a case-sensitive byte-wise comparison of
                characters, while ordering comparisons are made lexicographically. The characters of a
                <see cref="T:Cybele.Core.ConceptString`1"/> can be accessed by index and iterated over, while substrings can be
                obtained for particular endpoints. Concrete derived classes are encouraged to provide more
                domain-appropriate versions of equality and comparison (such as supporting specification of a
                <see cref="T:System.StringComparer"/>) and to expose additional functions on top of the base API. Additionally,
                derived classes can restrict the contents of a <see cref="T:Cybele.Core.ConceptString`1"/> by performing
                validity checks in the constructor; the base <see cref="T:Cybele.Core.ConceptString`1"/> imposes no such
                restrictions on the raw string.
              </para>
            </remarks>
        </member>
        <member name="P:Cybele.Core.ConceptString`1.Length">
            <summary>
              The number of characters in this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
        </member>
        <member name="P:Cybele.Core.ConceptString`1.Item(System.Int32)">
            <summary>
              The character at a particular index in this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <param name="index">
              The <c>0</c>-based index of the target character.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
              if <paramref name="index"/> is less than <c>0</c>
                --or--
              if <paramref name="index"/> is greater than or equal to <see cref="P:Cybele.Core.ConceptString`1.Length"/>.
            </exception>
        </member>
        <member name="P:Cybele.Core.ConceptString`1.Item(System.Range)">
            <summary>
              An immutable view over a substring of this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <param name="range">
              The endpoints of the target substring.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              if the beginning index of <paramref name="range"/> is less than <c>0</c>
                --or--
              if the ending index of <paramref name="range"/> is greater than or equal to <see cref="P:Cybele.Core.ConceptString`1.Length"/>.
            </exception>
        </member>
        <member name="P:Cybele.Core.ConceptString`1.View">
            <summary>
              An immutable view over the contents of this string.
            </summary>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.#ctor(System.String)">
            <summary>
              Constructs a new <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <param name="contents">
              The raw contents of the new <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
              if <paramref name="contents"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_Implicit(Cybele.Core.ConceptString{`0})~System.ReadOnlySpan{System.Char}">
            <summary>
              Implicitly converts this <see cref="T:Cybele.Core.ConceptString`1"/> to a
              <see cref="T:System.ReadOnlySpan`1">ReadOnlySpan&lt;char&gt;</see>.
            </summary>
            <param name="concept">
              The <see cref="T:Cybele.Core.ConceptString`1"/> to convert.
            </param>
            <returns>
              A read-only view over <paramref name="concept"/> if <paramref name="concept"/> is not
              <see langword="null"/>; otherwise, a read-only view over nothing.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_Explicit(Cybele.Core.ConceptString{`0})~System.String">
            <summary>
              Explicitly converts this <see cref="T:Cybele.Core.ConceptString`1"/> to a raw <see cref="T:System.String"/>.
            </summary>
            <param name="concept">
              The <see cref="T:Cybele.Core.ConceptString`1"/> to convert.
            </param>
            <returns>
              If <paramref name="concept"/> is not <see langword="null"/>, a <see cref="T:System.String"/> whose contents are
              identical to the contents of <paramref name="concept"/>; otherwise, a <see langword="null"/>
              <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.Equals(Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if this <see cref="T:Cybele.Core.ConceptString`1"/> is equal to another.
            </summary>
            <param name="rhs">
              The <see cref="T:Cybele.Core.ConceptString`1"/> against which to compare this one.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is equal to this <see cref="T:Cybele.Core.ConceptString`1"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.Equals(System.Object)">
            <summary>
              Determines if this <see cref="T:Cybele.Core.ConceptString`1"/> is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="rhs">
              The <see cref="T:System.Object"/> against which to compare this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="rhs"/> is a non-<see langword="null"/>
              <see cref="T:Cybele.Core.ConceptString`1"/> that is equal to this one; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.CompareTo(Cybele.Core.ConceptString{`0})">
            <summary>
              Performs a three-way comparison between this <see cref="T:Cybele.Core.ConceptString`1"/> and another.
            </summary>
            <param name="rhs">
              The <see cref="T:Cybele.Core.ConceptString`1"/> against which to compare this one.
            </param>
            <returns>
              An unspecified negative integer if this <see cref="T:Cybele.Core.ConceptString`1"/> is less than
              <paramref name="rhs"/>, <c>0</c> if this <see cref="T:Cybele.Core.ConceptString`1"/> is equal to
              <paramref name="rhs"/>, and an unspecified positive integer if this <see cref="T:Cybele.Core.ConceptString`1"/>
              is greater than <paramref name="rhs"/>. A <see langword="null"/> <see cref="T:Cybele.Core.ConceptString`1"/>
              compares less than all others.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.GetHashCode">
            <summary>
              Produces the hash code for this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <returns>
              The hash code for this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.ToString">
            <summary>
              Produces a human-readable string representation of this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <returns>
              A human-readable string representation of this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_Equality(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_Inequality(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is not equal to another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is not equal to <paramref name="rhs"/>; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_LessThan(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is lexicographically less than another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is lexicographially less than <paramref name="rhs"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_GreaterThan(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is lexicographically greater than another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is lexicographially greater than <paramref name="rhs"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_LessThanOrEqual(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is lexicographically less than or equal to
              another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is lexicographially less than or equal to
              <paramref name="rhs"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.op_GreaterThanOrEqual(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Determines if one <see cref="T:Cybele.Core.ConceptString`1"/> is lexicographically greater than or equal to
              another.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="lhs"/> is lexicographially greater than or equal to
              <paramref name="rhs"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.GetEnumerator">
            <summary>
              Produces an enumerator that iterates over the characters in this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <returns>
              An enumerator that iterates over the characters in this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Cybele.Core.ConceptString`1.Contents">
            <summary>
              The raw contents of this <see cref="T:Cybele.Core.ConceptString`1"/>.
            </summary>
            <remarks>
              This property is exposed to derived classes so that concrete <see cref="T:Cybele.Core.ConceptString`1"/> types
              can provide specialized equality and/or comparison methods, expose additional domain-relevant APIs, or
              perform validation on construction.
            </remarks>
        </member>
        <member name="M:Cybele.Core.ConceptString`1.Compare(Cybele.Core.ConceptString{`0},Cybele.Core.ConceptString{`0})">
            <summary>
              Performs a three-way comparison between two <see cref="T:Cybele.Core.ConceptString`1">ConceptStrings</see>.
            </summary>
            <param name="lhs">
              The first <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <param name="rhs">
              The second <see cref="T:Cybele.Core.ConceptString`1"/>.
            </param>
            <returns>
              An unspecified negative integer if <paramref name="lhs"/> is less than <paramref name="rhs"/>, <c>0</c>
              if <paramref name="lhs"/> is equal to <paramref name="rhs"/>, and an unspecified positive integer if
              <paramref name="lhs"/> is greater than <paramref name="rhs"/>. A <see langword="null"/>
              <see cref="T:Cybele.Core.ConceptString`1"/> compares equal to another <see langword="null"/> instance and less
              than any non-<see langword="null"/> one.
            </returns>
        </member>
        <member name="T:Cybele.Core.DataConverter">
            <summary>
              A utility for converting objects of one type into objects of another type, and possibly vice-versa.
            </summary>
            <remarks>
              <para>
                A <see cref="T:Cybele.Core.DataConverter"/> represents a possibly reversible function that maps instances of one CLR type
                into instances of another. This mapping can be relatively simple (e.g. formatting a string to be
                <c>ALL CAPS</c>) or relatively complex (e.g. involving the establishment of a database connection from an
                user-defined structure). This allows flexibility in the definition of the conversion mechanism without
                burdening the user on the potential complexities that underlie that logic. The client is presented with a
                simple conversion interface with which they can perform transformations.
              </para>
              <para>
                A <see cref="T:Cybele.Core.DataConverter"/>, at a minimum, must support conversion of every instance of some "source
                type" into instances of some "result type." This forward conversion can only fail when the source instance
                is malformed or in some other invalid state: conversion of a valid source instance can never result in an
                exception. Optionally, DataConverts can provide for converting <i>back</i> from instances of the "result"
                type into instances of the "source" type; this is known as a "bidirectional" converter, and the specifics
                of the reversal mechanism (e.g. what happens when two or more source instances map to the same result
                instance, which is then reversed) are defined by the underlying conversion mechanic. Clients should thus be
                careful when using the <see cref="M:Cybele.Core.DataConverter.Revert(System.Object)"/> API, as <c>Revert(Convert(X))</c> is not required to
                yield <c>X</c>.
              </para>
              <para>
                Both the conversion and reversion APIs operate in type-erased contexts. <see cref="T:Cybele.Core.DataConverter"/> will
                throw a runtime exception if an input object does not match the expected type; the class further guarantees
                that the returned value, though type-erased, can be safely cast.
              </para>
            </remarks>
        </member>
        <member name="P:Cybele.Core.DataConverter.SourceType">
            <summary>
              The <see cref="T:System.Type"/> of the input objects in the forward conversion supported by this
              <see cref="T:Cybele.Core.DataConverter"/>.
            </summary>
        </member>
        <member name="P:Cybele.Core.DataConverter.ResultType">
            <summary>
              The <see cref="T:System.Type"/> of the output objects in the forward conversion supported by this
              <see cref="T:Cybele.Core.DataConverter"/>.
            </summary>
        </member>
        <member name="P:Cybele.Core.DataConverter.IsBidirectional">
            <summary>
              Whether or not this <see cref="T:Cybele.Core.DataConverter"/> supports
              <see cref="M:Cybele.Core.DataConverter.Revert(System.Object)">reverse conversion</see>.
            </summary>
        </member>
        <member name="M:Cybele.Core.DataConverter.Create``2(System.Converter{``0,``1})">
            <summary>
              Creates a new <see cref="T:Cybele.Core.DataConverter"/> that is not <see cref="P:Cybele.Core.DataConverter.IsBidirectional">bidirectional</see>.
            </summary>
            <typeparam name="TSource">
              The <see cref="P:Cybele.Core.DataConverter.SourceType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="P:Cybele.Core.DataConverter.ResultType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </typeparam>
            <param name="convert">
              The function by which the new <see cref="T:Cybele.Core.DataConverter"/> is to convert instances of
              <see cref="P:Cybele.Core.DataConverter.SourceType"/> (i.e. <typeparamref name="TSource"/>) into instances of <see cref="P:Cybele.Core.DataConverter.ResultType"/>
              (i.e. <typeparamref name="TResult"/>).
            </param>
            <returns>
              A new unidirectional <see cref="T:Cybele.Core.DataConverter"/> that converts from instances of
              <typeparamref name="TSource"/> into instances of <typeparamref name="TResult"/> using
              <paramref name="convert"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.DataConverter.Create``2(System.Converter{``0,``1},System.Converter{``1,``0})">
            <summary>
              Creates a new <see cref="T:Cybele.Core.DataConverter"/> that is <see cref="P:Cybele.Core.DataConverter.IsBidirectional">bidirectional</see>.
            </summary>
            <typeparam name="TSource">
              The <see cref="P:Cybele.Core.DataConverter.SourceType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </typeparam>
            <typeparam name="TResult">
              The <see cref="P:Cybele.Core.DataConverter.ResultType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </typeparam>
            <param name="convert">
              The function by which the new <see cref="T:Cybele.Core.DataConverter"/> is to convert instances of
              <see cref="P:Cybele.Core.DataConverter.SourceType"/> (i.e. <typeparamref name="TSource"/>) into instances of <see cref="P:Cybele.Core.DataConverter.ResultType"/>
              (i.e. <typeparamref name="TResult"/>).
            </param>
            <param name="revert">
              The function by which the new <see cref="T:Cybele.Core.DataConverter"/> is to convert instances of
              <see cref="P:Cybele.Core.DataConverter.ResultType"/> (i.e. <typeparamref name="TResult"/>) into instances of <see cref="P:Cybele.Core.DataConverter.SourceType"/>
              (i.e. <typeparamref name="TSource"/>).
            </param>
            <returns>
              A new bidirectional <see cref="T:Cybele.Core.DataConverter"/> that converts from instances of
              <typeparamref name="TSource"/> into instances of <typeparamref name="TResult"/> using
              <paramref name="convert"/> and vice-versa using <paramref name="revert"/>.
            </returns>
        </member>
        <member name="M:Cybele.Core.DataConverter.Convert(System.Object)">
            <summary>
              Converts an instance of <see cref="P:Cybele.Core.DataConverter.SourceType"/> into an instance of <see cref="P:Cybele.Core.DataConverter.ResultType"/>.
            </summary>
            <param name="source">
              The source object.
            </param>
            <returns>
              The coversion of <paramref name="source"/> into an instance of <see cref="P:Cybele.Core.DataConverter.ResultType"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              if <paramref name="source"/> is neither an instance of <see cref="P:Cybele.Core.DataConverter.SourceType"/> nor a derived class or an
              implementation thereof
                --or--
              if <paramref name="source"/> cannot be converted.
            </exception>
        </member>
        <member name="M:Cybele.Core.DataConverter.Revert(System.Object)">
            <summary>
              Converts an instance of <see cref="P:Cybele.Core.DataConverter.ResultType"/> back into an instance of <see cref="P:Cybele.Core.DataConverter.SourceType"/>.
            </summary>
            <remarks>
              Because the underlying conversion mechanism need not be bijective (that is, multiple different source
              objects can convert into the same result object), the <see cref="M:Cybele.Core.DataConverter.Revert(System.Object)"/> API does not
              necessarily present a true inversion. For a given result object <c>R</c>, the only guarantees are that
              repeated calls to the API will yield the same source object and that <c>Convert(Revert(R)) == R</c>.
            </remarks>
            <param name="result">
              The result object.
            </param>
            <returns>
              The reversion of <paramref name="result"/> into an instance of <see cref="P:Cybele.Core.DataConverter.SourceType"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              if this <see cref="T:Cybele.Core.DataConverter"/> is not <see cref="P:Cybele.Core.DataConverter.IsBidirectional">bidirectional</see>.
            </exception>
            <exception cref="T:System.ArgumentException">
              if <paramref name="result"/> is neither an instance of <see cref="P:Cybele.Core.DataConverter.ResultType"/> nor a derived class or an
              implementation thereof
                --or--
              if <paramref name="result"/> cannot be reverted.
            </exception>
        </member>
        <member name="M:Cybele.Core.DataConverter.Identity``1">
            <summary>
              Creates a new <see cref="T:Cybele.Core.DataConverter"/> that represents an bidirectional identity conversion.
            </summary>
            <typeparam name="T">
              The type on which the identity converter is to operate.
            </typeparam>
            <returns>
              A new bidirectional <see cref="T:Cybele.Core.DataConverter"/> that performs identity conversion.
            </returns>
        </member>
        <member name="M:Cybele.Core.DataConverter.#ctor(System.Type,System.Type,System.Converter{System.Object,System.Object},Optional.Option{System.Converter{System.Object,System.Object}})">
            <summary>
              Constructs a new <see cref="T:Cybele.Core.DataConverter"/>.
            </summary>
            <param name="sourceType">
              The <see cref="P:Cybele.Core.DataConverter.SourceType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </param>
            <param name="resultType">
              The <see cref="P:Cybele.Core.DataConverter.ResultType"/> of the new <see cref="T:Cybele.Core.DataConverter"/>.
            </param>
            <param name="fwd">
              The function by which the new <see cref="T:Cybele.Core.DataConverter"/> is to convert instances of
              <see cref="P:Cybele.Core.DataConverter.SourceType"/> into instances of <see cref="P:Cybele.Core.DataConverter.ResultType"/>.
            </param>
            <param name="bwd">
              The function by which the new <see cref="T:Cybele.Core.DataConverter"/> is to convert instances of
              <see cref="P:Cybele.Core.DataConverter.ResultType"/> into instances of <see cref="P:Cybele.Core.DataConverter.SourceType"/>, if such a function is supported.
            </param>
        </member>
        <member name="T:Cybele.Extensions.EnumExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the enumerators.
            </summary>
        </member>
        <member name="M:Cybele.Extensions.EnumExtensions.IsValid``1(``0)">
            <summary>
              Determines if an enumerator is "valid."
            </summary>
            <remarks>
              <para>
                In C#, there are two types of enumerations: "regular" enumerations and "flag" enumerations. The latter
                are distinguished by the presence of a <see cref="T:System.FlagsAttribute"/> annotation and afford the user easy
                use of bitwise operations to combine enumerator flags. As in most languages, C# enums are little more
                than strongly typed wrappers around a numeric value: specifically, it is generally possible to cast an
                integer to any enumeration type without error (subject to over- and underflow). This can conceivably
                break APIs that expect an input enumeration to be one of the explicitly defined values.
              </para>
              <para>
                The "validity" of an enumerator is based on this intuitive sense of what values <i>should</i> be
                allowed as arguments to such an API. For "regular" enumerations, only those enumerator values that are
                explicitly defined in the enum's declaration are considered "valid"; this is identical to the behavior
                of the standard library <see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/> method. For "flag" enumerations,
                both the individually defined flags <i>and</i> any bitwise combinations thereof are considered "valid";
                this differs from the behavior of <see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/>, which only recognizes the
                flags.
              </para>
            </remarks>
            <typeparam name="TEnum">
              [deduced] The type of the enumeration to which the enumerator belongs.
            </typeparam>
            <param name="self">
              The enumerator on which the extension method is invoked.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="self"/> is an enumerator that either is defined explicitly in
              the declaration of <typeparamref name="TEnum"/> or is a bitwise combination of such values.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.EnumExtensions.#cctor">
            <summary>
              Initializes the <see langword="static"/> state of the <see cref="T:Cybele.Extensions.EnumExtensions"/> class.
            </summary>
        </member>
        <member name="M:Cybele.Extensions.EnumExtensions.AsInt64``1(``0)">
            <summary>
              Produces a <c>64</c>-bit integer whose bit pattern is equivalent to the bit pattern of the numeric value
              of an enumerator.
            </summary>
            <typeparam name="TEnum">
              [deduced] The type of the enumeration to which the enumerator belongs.
            </typeparam>
            <param name="self">
              The enumerator on which the extension method is invoked.
            </param>
            <returns>
              A <see cref="T:System.Int64"/> whose bit pattern is equivalent to the bit pattern of the numeric value underlying
              <paramref name="self"/>.
            </returns>
        </member>
        <member name="T:Cybele.Extensions.IEnumerableExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
              Checks if all elements of an enumerable pass a given predicate. The index of the element is passed to
              the predicate along with the element for evaluation.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="predicate">
              The predicate against which to check each <c>(index, element)</c> pair of <paramref name="self"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="predicate"/> returns <see langword="true"/> for all
              <c>(index, element)</c> pairs of <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.AllSame``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
              Checks if some function (e.g. a property accessor) returns the same value for all elements of an
              enumerable, using the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the function's return type.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <typeparam name="U">
              [deduced] The type of value returned by the function.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="func">
              The function.
            </param>
            <returns>
              <see langword="true"/> if, according to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for
              <typeparamref name="U"/>, <paramref name="func"/> returns equal values for all elements of
              <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.AllSame``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
              Checks if some function (e.g. a property accessor) returns the same value for all elements of an
              enumerable, using a specific <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the function's return type.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <typeparam name="U">
              [deduced] The type of value returned by the function.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="func">
              The function.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.EqualityComparer`1"/> with which to compare the return values of <paramref name="func"/>.
            </param>
            <returns>
              <see langword="true"/> if, according to <paramref name="comparer"/>, <paramref name="func"/> returns
              equal values for all elements of <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
              Checks if any element of an enumerable passes a given predicate. The index of the element is passed to
              the predicate along with the element for evaluation.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="predicate">
              The predicate against which to check each <c>(index, element)</c> pair of <paramref name="self"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="predicate"/> returns <see langword="true"/> for any
              <c>(index, element)</c> pair of <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.ContainsNoDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Checks if an enumerable contains only unique elements, using the default
              <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the element type.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <returns>
              <see langword="true"/> if, according to the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for
              <typeparamref name="T"/>, <paramref name="self"/> contains no duplicate elements; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.ContainsNoDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
              Checks if an enumerable contains only unique elements, using a specific
              <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the element type.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="comparer">
              The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> with which to compare elements of <paramref name="self"/> for
              uniqueness.
            </param>
            <returns>
              <see langword="true"/> if, according to <paramref name="comparer"/>, <paramref name="self"/> contains no
              duplicate elements; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Checks if an enumerable is empty, i.e. contains no elements.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="self"/> contains no elements; otherwise,
              <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
              Checks if all elements of an enumerable fail a given predicate.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="predicate">
              The predicate against which to check each element of <paramref name="self"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="predicate"/> returns <see langword="false"/> for all
              elements of <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
              Checks if all elements of an enumerable fail a given predicate. The index of the element is passed to
              the predicate along with the element for evaluation.
            </summary>
            <typeparam name="T">
              [deduced] The type of element in the enumerable.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which the extension method is invoked.
            </param>
            <param name="predicate">
              The predicate against which to check each <c>(index, element)</c> pair of <paramref name="self"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="predicate"/> returns <see langword="false"/> for all
              <c>(index, element)</c> pairs of <paramref name="self"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cybele.Extensions.TypeExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the <see cref="T:System.Reflection.MemberInfo"/> class.
            </summary>
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the <see cref="T:System.Reflection.MemberInfo"/> class.
            </summary>
        </member>
        <member name="M:Cybele.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
              Determines if a member (e.g. a <see cref="T:System.Type"/> or a <see cref="T:System.Reflection.PropertyInfo"/>) is annotated with a
              particular <see cref="T:System.Attribute"/>.
            </summary>
            <typeparam name="TAttribute">
              [explicit] The type of <see cref="T:System.Attribute"/> whose presence is being checked.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Reflection.MemberInfo"/> instance on which the extension method is invoked.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="self"/> is member that is annotated with at least one instance
              of <typeparamref name="TAttribute"/>, possibly inherited; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.TypeExtensions.IsInstanceOf(System.Type,System.Type)">
            <summary>
              Determines if an instance of one <see cref="T:System.Type"/> would also be an instance of another
              <see cref="T:System.Type"/> based on an identity, inheritance, or interface implementation relationship.
            </summary>
            <param name="derivedType">
              The hypothetical descendant <see cref="T:System.Type"/>.
            </param>
            <param name="ancestorType">
              The hypothetical ancestor <see cref="T:System.Type"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="ancestorType"/> is identical to <paramref name="derivedType"/>,
              is a base class of <paramref name="derivedType"/>, or is an interface of <paramref name="derivedType"/>;
              otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cybele.Extensions.Nullability">
            An indication of the nullability of an aspect of a program.
        </member>
        <member name="F:Cybele.Extensions.Nullability.Nullable">
            <see langword="null"/> is a valid value for the aspect in question.
        </member>
        <member name="F:Cybele.Extensions.Nullability.NonNullable">
            <see langword="null"/> is an invalid value for the aspect in question.
        </member>
        <member name="F:Cybele.Extensions.Nullability.Ambiguous">
            <see langword="null"/> may or may not be a valid value for the aspect in question; this generally applies
            only to generic types, with the ambiguity being resolved by the selection of a concrete type.
        </member>
        <member name="T:Cybele.Extensions.NullabilityExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that provide insight to the
              nullabilitiy of various aspects of a program.
            </summary>
            <remarks>
              <para>
                All types in C# can be separated into one of two categories: value types (primitives, enums, and structs)
                and reference types (classes, interfaces, delegates, and dynamic types). Prior to C# 8.0, one of the
                distinctions between these two types was that <see langword="null"/> was a valid value only for the former.
                However, C# 8.0 introduced the notion of nullable and non-nullable reference types, meaning that the
                nullability of a particular aspect of a program depends not only on the aspect's static type but also on
                any user-supplied annotations <i>and</i> on the nullability context in which the aspect is defined.
              </para>
              <para>
                The <c>GetNullability</c> family of methods can operate on properties, events, function parameters,
                function return types, and member variables. There is limited support for open generics (see below) and
                full support for closed generics. Specifically, the following types are identified as nullable:
                    <list type="bullet">
                        <item><description>
                          Instantiations of the <see cref="T:System.Nullable`1"/> generic wrapper.
                        </description></item>
                        <item><description>
                          Reference types defined in a nullable-disabled context; this includes code from before C# 8.0.
                        </description></item>
                        <item><description>
                          Nullable-annotated reference types (e.g. <c>string?</c>); these can only be defined in a
                          nullable-enabled context in code from C# 8.0 or later.
                        </description></item>
                        <item><description>
                          Open generic types that, through a combination of annotations and constraints, can be analyzed as
                          one of the above.
                        </description></item>
                    </list>
              </para>
              <para>
                Some uses of closed generics can be ambiguous as to the imparted nullability; these scenarios generally
                arise when the generic is unconstrained or constrained in such a way so as to allow both nullable and
                non-nullable types as <c>T</c>. Unfortunately, the reflection APIs offered by the C# standard library do
                not provide complete access to all forms of constraint, leading to an inability to properly identify these
                ambiguities. Specificall, the following scenarios should produce <see cref="F:Cybele.Extensions.Nullability.Ambiguous"/> but
                currently do not:
                    <list type="bullet">
                        <item><description>
                          <c>T [unconstrained]</c> resolves as either nullable or non-nullable, depending on its context
                        </description></item>
                        <item><description>
                          <c>T? [unconstrained]</c> resolves as nullable.
                        </description></item>
                        <item><description>
                          <c>T [where T : class?]</c> resolves as non-nullable.
                        </description></item>
                        <item><description>
                          <c>T? [where T : notnull]</c> resolves as nullable.
                        </description></item>
                    </list>
              </para>
              <para>
                A complete description of how the nullable context of a type is embedded in compiler metadata for C# 8.0+
                can be found on a <a href="https://tinyurl.com/jsm-roslyn-nullable-metadata">writeup</a> on the Roslyn
                GitHub page.
              </para>
            </remarks>
        </member>
        <member name="M:Cybele.Extensions.NullabilityExtensions.GetNullability(System.Reflection.PropertyInfo)">
            <summary>
              Determines if a particular property of a class or struct is nullable.
            </summary>
            <param name="self">
              The <see cref="T:System.Reflection.PropertyInfo"/> on which the extension method is invoked.
            </param>
            <returns>
              A <see cref="T:Cybele.Extensions.Nullability"/> indicator reflective of the traits of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.NullabilityExtensions.GetNullability(System.Reflection.FieldInfo)">
            <summary>
              Determines if a particular field (e.g. member variable) of a class or struct is nullable.
            </summary>
            <param name="self">
              The <see cref="T:System.Reflection.FieldInfo"/> on which the extension method is invoked.
            </param>
            <returns>
              A <see cref="T:Cybele.Extensions.Nullability"/> indicator reflective of the traits of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.NullabilityExtensions.GetNullability(System.Reflection.ParameterInfo)">
            <summary>
              Determines if a particular parameter or return value of a method is nullable.
            </summary>
            <param name="self">
              The <see cref="T:System.ParamArrayAttribute"/> on which the extension method is invoked.
            </param>
            <returns>
              A <see cref="T:Cybele.Extensions.Nullability"/> indicator reflective of the traits of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.NullabilityExtensions.GetNullability(System.Reflection.EventInfo)">
            <summary>
              Determines if a particular event of a class or struct is nullable.
            </summary>
            <param name="self">
              The <see cref="T:System.Reflection.EventInfo"/> on which the extension method is invoked.
            </param>
            <returns>
              A <see cref="T:Cybele.Extensions.Nullability"/> indicator reflective of the traits of <paramref name="self"/>.
            </returns>
        </member>
        <member name="M:Cybele.Extensions.NullabilityExtensions.GetNullability(System.Type,System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
              Determines if a program aspect with a given static <see cref="T:System.Type"/> defined in a particular context
              with (or without) certain attributes is nullable.
            </summary>
            <param name="type">
              The <see cref="T:System.Type"/> of the aspect being evaluated.
            </param>
            <param name="context">
              The context of the aspect being evaluated. For most aspects, this should be the <see cref="T:System.Type"/> in
              whih the aspect is being declared. For method parameters and return types, this should be the method
              itself.
            </param>
            <param name="attributes">
              The collection of attributes applied to the aspect.
            </param>
            <returns>
              A <see cref="T:Cybele.Extensions.Nullability"/> indicator reflective of the traits of an aspect with static
              <see cref="T:System.Type"/> <paramref name="type"/> defined in <paramref name="context"/> with
              <paramref name="attributes"/>.
            </returns>
        </member>
        <member name="T:Cybele.Extensions.OptionExtensions">
            <summary>
              A collection of <see href="https://tinyurl.com/y8q6ojue">extension methods</see> that extend the public API
              of the <see cref="T:Optional.Option`1"/> class.
            </summary>
        </member>
        <member name="M:Cybele.Extensions.OptionExtensions.Unwrap``1(Optional.Option{``0})">
            <summary>
              Unwraps an <see cref="T:Optional.Option`1"/>, exposing the wrapped value.
            </summary>
            <typeparam name="T">
              [deduced] The type of value wrapped in the option.
            </typeparam>
            <param name="self">
              The option on which the extension method is invoked.
            </param>
            <returns>
              The value wrapped by <paramref name="self"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              if <paramref name="self"/> is a <c>NONE</c> instance (i.e. an empty option).
            </exception>
        </member>
    </members>
</doc>
